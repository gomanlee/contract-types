"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockHook__factory = void 0;
var ethers_1 = require("ethers");
var MockHook__factory = /** @class */ (function (_super) {
    __extends(MockHook__factory, _super);
    function MockHook__factory(signer) {
        return _super.call(this, _abi, _bytecode, signer) || this;
    }
    MockHook__factory.prototype.deploy = function (overrides) {
        return _super.prototype.deploy.call(this, overrides || {});
    };
    MockHook__factory.prototype.getDeployTransaction = function (overrides) {
        return _super.prototype.getDeployTransaction.call(this, overrides || {});
    };
    MockHook__factory.prototype.attach = function (address) {
        return _super.prototype.attach.call(this, address);
    };
    MockHook__factory.prototype.connect = function (signer) {
        return _super.prototype.connect.call(this, signer);
    };
    MockHook__factory.connect = function (address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    };
    return MockHook__factory;
}(ethers_1.ContractFactory));
exports.MockHook__factory = MockHook__factory;
var _abi = [
    {
        inputs: [],
        name: "hook",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
];
var _bytecode = "0x608060405234801561001057600080fd5b5060b48061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80637f5a7c7b14602d575b600080fd5b60336035565b005b60005b6064811015607b57600080546001818101835591805291017f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5639091018190556038565b5056fea264697066735822122099acea7db2bc391902241badc9953f8fafe07a4d6559d8377bd39e049213115164736f6c634300060a0033";
