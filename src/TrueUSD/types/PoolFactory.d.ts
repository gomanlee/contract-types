/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface PoolFactoryInterface extends ethers.utils.Interface {
  functions: {
    "MAX_DECIMAL_COUNT()": FunctionFragment;
    "addLegacyPool(address)": FunctionFragment;
    "allowAll()": FunctionFragment;
    "allowToken(address,bool)": FunctionFragment;
    "claimOwnership()": FunctionFragment;
    "createPool(address)": FunctionFragment;
    "createSingleBorrowerPool(address,string,string)": FunctionFragment;
    "deprecatePool(address)": FunctionFragment;
    "ftlAgency()": FunctionFragment;
    "getSupportedPools()": FunctionFragment;
    "initialize(address,address,address,address)": FunctionFragment;
    "isAllowed(address)": FunctionFragment;
    "isBorrowerWhitelisted(address)": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "isPool(address)": FunctionFragment;
    "isSupportedPool(address)": FunctionFragment;
    "loanFactory()": FunctionFragment;
    "maxPools()": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "pool(address)": FunctionFragment;
    "poolImplementationReference()": FunctionFragment;
    "removePool(address)": FunctionFragment;
    "safu()": FunctionFragment;
    "setAllowAll(bool)": FunctionFragment;
    "setFixedTermLoanAgency(address)": FunctionFragment;
    "setLoanFactory(address)": FunctionFragment;
    "setMaxPools(uint256)": FunctionFragment;
    "setSafuAddress(address)": FunctionFragment;
    "singleBorrowerPool(address,address)": FunctionFragment;
    "supportPool(address)": FunctionFragment;
    "supportedPools(uint256)": FunctionFragment;
    "supportedPoolsTVL()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unsupportPool(address)": FunctionFragment;
    "whitelistBorrower(address,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MAX_DECIMAL_COUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addLegacyPool",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "allowAll", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowToken",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "claimOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "createPool", values: [string]): string;
  encodeFunctionData(
    functionFragment: "createSingleBorrowerPool",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deprecatePool",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "ftlAgency", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getSupportedPools",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "isAllowed", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isBorrowerWhitelisted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isPool", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isSupportedPool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "loanFactory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxPools", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pool", values: [string]): string;
  encodeFunctionData(
    functionFragment: "poolImplementationReference",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "removePool", values: [string]): string;
  encodeFunctionData(functionFragment: "safu", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAllowAll",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setFixedTermLoanAgency",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLoanFactory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPools",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSafuAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "singleBorrowerPool",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "supportPool", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportedPools",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedPoolsTVL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unsupportPool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistBorrower",
    values: [string, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_DECIMAL_COUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLegacyPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowAll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createSingleBorrowerPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deprecatePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ftlAgency", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isAllowed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isBorrowerWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isSupportedPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loanFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxPools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolImplementationReference",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "safu", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAllowAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFixedTermLoanAgency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLoanFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSafuAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "singleBorrowerPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedPoolsTVL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsupportPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistBorrower",
    data: BytesLike
  ): Result;

  events: {
    "AllowAllStatusChanged(bool)": EventFragment;
    "AllowedStatusChanged(address,bool)": EventFragment;
    "BorrowerWhitelistStatusChanged(address,bool)": EventFragment;
    "FixedTermLoanAgencyChanged(address)": EventFragment;
    "LoanFactoryChanged(address)": EventFragment;
    "MaxPoolsChanged(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PoolCreated(address,address)": EventFragment;
    "PoolSupported(address)": EventFragment;
    "PoolUnsupported(address)": EventFragment;
    "SafuChanged(address)": EventFragment;
    "SingleBorrowerPoolCreated(address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AllowAllStatusChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AllowedStatusChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "BorrowerWhitelistStatusChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FixedTermLoanAgencyChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoanFactoryChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxPoolsChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolSupported"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolUnsupported"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SafuChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SingleBorrowerPoolCreated"): EventFragment;
}

export class PoolFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PoolFactoryInterface;

  functions: {
    MAX_DECIMAL_COUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    "MAX_DECIMAL_COUNT()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    addLegacyPool(
      legacyPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addLegacyPool(address)"(
      legacyPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowAll(overrides?: CallOverrides): Promise<[boolean]>;

    "allowAll()"(overrides?: CallOverrides): Promise<[boolean]>;

    allowToken(
      token: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "allowToken(address,bool)"(
      token: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createPool(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createPool(address)"(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createSingleBorrowerPool(
      token: string,
      borrowerName: string,
      borrowerSymbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createSingleBorrowerPool(address,string,string)"(
      token: string,
      borrowerName: string,
      borrowerSymbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deprecatePool(
      legacyPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deprecatePool(address)"(
      legacyPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ftlAgency(overrides?: CallOverrides): Promise<[string]>;

    "ftlAgency()"(overrides?: CallOverrides): Promise<[string]>;

    getSupportedPools(overrides?: CallOverrides): Promise<[string[]]>;

    "getSupportedPools()"(overrides?: CallOverrides): Promise<[string[]]>;

    initialize(
      _poolImplementationReference: string,
      _ftlAgency: string,
      _safu: string,
      _loanFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(address,address,address,address)"(
      _poolImplementationReference: string,
      _ftlAgency: string,
      _safu: string,
      _loanFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isAllowed(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isAllowed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isBorrowerWhitelisted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isBorrowerWhitelisted(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    "isInitialized()"(overrides?: CallOverrides): Promise<[boolean]>;

    isPool(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isPool(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isSupportedPool(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isSupportedPool(address)"(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    loanFactory(overrides?: CallOverrides): Promise<[string]>;

    "loanFactory()"(overrides?: CallOverrides): Promise<[string]>;

    maxPools(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maxPools()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<[string]>;

    pool(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    "pool(address)"(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    poolImplementationReference(overrides?: CallOverrides): Promise<[string]>;

    "poolImplementationReference()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    removePool(
      legacyPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removePool(address)"(
      legacyPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safu(overrides?: CallOverrides): Promise<[string]>;

    "safu()"(overrides?: CallOverrides): Promise<[string]>;

    setAllowAll(
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setAllowAll(bool)"(
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFixedTermLoanAgency(
      _ftlAgency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setFixedTermLoanAgency(address)"(
      _ftlAgency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLoanFactory(
      _loanFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setLoanFactory(address)"(
      _loanFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxPools(
      _maxPools: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMaxPools(uint256)"(
      _maxPools: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSafuAddress(
      _safu: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setSafuAddress(address)"(
      _safu: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    singleBorrowerPool(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "singleBorrowerPool(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    supportPool(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "supportPool(address)"(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportedPools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "supportedPools(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    supportedPoolsTVL(overrides?: CallOverrides): Promise<[BigNumber]>;

    "supportedPoolsTVL()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unsupportPool(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "unsupportPool(address)"(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelistBorrower(
      borrower: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "whitelistBorrower(address,bool)"(
      borrower: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  MAX_DECIMAL_COUNT(overrides?: CallOverrides): Promise<BigNumber>;

  "MAX_DECIMAL_COUNT()"(overrides?: CallOverrides): Promise<BigNumber>;

  addLegacyPool(
    legacyPool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addLegacyPool(address)"(
    legacyPool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowAll(overrides?: CallOverrides): Promise<boolean>;

  "allowAll()"(overrides?: CallOverrides): Promise<boolean>;

  allowToken(
    token: string,
    status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "allowToken(address,bool)"(
    token: string,
    status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createPool(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createPool(address)"(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createSingleBorrowerPool(
    token: string,
    borrowerName: string,
    borrowerSymbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createSingleBorrowerPool(address,string,string)"(
    token: string,
    borrowerName: string,
    borrowerSymbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deprecatePool(
    legacyPool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deprecatePool(address)"(
    legacyPool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ftlAgency(overrides?: CallOverrides): Promise<string>;

  "ftlAgency()"(overrides?: CallOverrides): Promise<string>;

  getSupportedPools(overrides?: CallOverrides): Promise<string[]>;

  "getSupportedPools()"(overrides?: CallOverrides): Promise<string[]>;

  initialize(
    _poolImplementationReference: string,
    _ftlAgency: string,
    _safu: string,
    _loanFactory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(address,address,address,address)"(
    _poolImplementationReference: string,
    _ftlAgency: string,
    _safu: string,
    _loanFactory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isAllowed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "isAllowed(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isBorrowerWhitelisted(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isBorrowerWhitelisted(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  "isInitialized()"(overrides?: CallOverrides): Promise<boolean>;

  isPool(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "isPool(address)"(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isSupportedPool(_pool: string, overrides?: CallOverrides): Promise<boolean>;

  "isSupportedPool(address)"(
    _pool: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  loanFactory(overrides?: CallOverrides): Promise<string>;

  "loanFactory()"(overrides?: CallOverrides): Promise<string>;

  maxPools(overrides?: CallOverrides): Promise<BigNumber>;

  "maxPools()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  "pendingOwner()"(overrides?: CallOverrides): Promise<string>;

  pool(arg0: string, overrides?: CallOverrides): Promise<string>;

  "pool(address)"(arg0: string, overrides?: CallOverrides): Promise<string>;

  poolImplementationReference(overrides?: CallOverrides): Promise<string>;

  "poolImplementationReference()"(overrides?: CallOverrides): Promise<string>;

  removePool(
    legacyPool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removePool(address)"(
    legacyPool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safu(overrides?: CallOverrides): Promise<string>;

  "safu()"(overrides?: CallOverrides): Promise<string>;

  setAllowAll(
    status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setAllowAll(bool)"(
    status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFixedTermLoanAgency(
    _ftlAgency: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setFixedTermLoanAgency(address)"(
    _ftlAgency: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLoanFactory(
    _loanFactory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setLoanFactory(address)"(
    _loanFactory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxPools(
    _maxPools: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMaxPools(uint256)"(
    _maxPools: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSafuAddress(
    _safu: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setSafuAddress(address)"(
    _safu: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  singleBorrowerPool(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "singleBorrowerPool(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<string>;

  supportPool(
    _pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "supportPool(address)"(
    _pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportedPools(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "supportedPools(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  supportedPoolsTVL(overrides?: CallOverrides): Promise<BigNumber>;

  "supportedPoolsTVL()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unsupportPool(
    _pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "unsupportPool(address)"(
    _pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelistBorrower(
    borrower: string,
    status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "whitelistBorrower(address,bool)"(
    borrower: string,
    status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_DECIMAL_COUNT(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_DECIMAL_COUNT()"(overrides?: CallOverrides): Promise<BigNumber>;

    addLegacyPool(legacyPool: string, overrides?: CallOverrides): Promise<void>;

    "addLegacyPool(address)"(
      legacyPool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    allowAll(overrides?: CallOverrides): Promise<boolean>;

    "allowAll()"(overrides?: CallOverrides): Promise<boolean>;

    allowToken(
      token: string,
      status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "allowToken(address,bool)"(
      token: string,
      status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    claimOwnership(overrides?: CallOverrides): Promise<void>;

    "claimOwnership()"(overrides?: CallOverrides): Promise<void>;

    createPool(token: string, overrides?: CallOverrides): Promise<void>;

    "createPool(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createSingleBorrowerPool(
      token: string,
      borrowerName: string,
      borrowerSymbol: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "createSingleBorrowerPool(address,string,string)"(
      token: string,
      borrowerName: string,
      borrowerSymbol: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deprecatePool(legacyPool: string, overrides?: CallOverrides): Promise<void>;

    "deprecatePool(address)"(
      legacyPool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ftlAgency(overrides?: CallOverrides): Promise<string>;

    "ftlAgency()"(overrides?: CallOverrides): Promise<string>;

    getSupportedPools(overrides?: CallOverrides): Promise<string[]>;

    "getSupportedPools()"(overrides?: CallOverrides): Promise<string[]>;

    initialize(
      _poolImplementationReference: string,
      _ftlAgency: string,
      _safu: string,
      _loanFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address,address)"(
      _poolImplementationReference: string,
      _ftlAgency: string,
      _safu: string,
      _loanFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isAllowed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "isAllowed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isBorrowerWhitelisted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isBorrowerWhitelisted(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    "isInitialized()"(overrides?: CallOverrides): Promise<boolean>;

    isPool(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "isPool(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSupportedPool(_pool: string, overrides?: CallOverrides): Promise<boolean>;

    "isSupportedPool(address)"(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    loanFactory(overrides?: CallOverrides): Promise<string>;

    "loanFactory()"(overrides?: CallOverrides): Promise<string>;

    maxPools(overrides?: CallOverrides): Promise<BigNumber>;

    "maxPools()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<string>;

    pool(arg0: string, overrides?: CallOverrides): Promise<string>;

    "pool(address)"(arg0: string, overrides?: CallOverrides): Promise<string>;

    poolImplementationReference(overrides?: CallOverrides): Promise<string>;

    "poolImplementationReference()"(overrides?: CallOverrides): Promise<string>;

    removePool(legacyPool: string, overrides?: CallOverrides): Promise<void>;

    "removePool(address)"(
      legacyPool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    safu(overrides?: CallOverrides): Promise<string>;

    "safu()"(overrides?: CallOverrides): Promise<string>;

    setAllowAll(status: boolean, overrides?: CallOverrides): Promise<void>;

    "setAllowAll(bool)"(
      status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setFixedTermLoanAgency(
      _ftlAgency: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFixedTermLoanAgency(address)"(
      _ftlAgency: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLoanFactory(
      _loanFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLoanFactory(address)"(
      _loanFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxPools(
      _maxPools: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxPools(uint256)"(
      _maxPools: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSafuAddress(_safu: string, overrides?: CallOverrides): Promise<void>;

    "setSafuAddress(address)"(
      _safu: string,
      overrides?: CallOverrides
    ): Promise<void>;

    singleBorrowerPool(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "singleBorrowerPool(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<string>;

    supportPool(_pool: string, overrides?: CallOverrides): Promise<void>;

    "supportPool(address)"(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportedPools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "supportedPools(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    supportedPoolsTVL(overrides?: CallOverrides): Promise<BigNumber>;

    "supportedPoolsTVL()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unsupportPool(_pool: string, overrides?: CallOverrides): Promise<void>;

    "unsupportPool(address)"(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistBorrower(
      borrower: string,
      status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "whitelistBorrower(address,bool)"(
      borrower: string,
      status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AllowAllStatusChanged(
      status: null
    ): TypedEventFilter<[boolean], { status: boolean }>;

    AllowedStatusChanged(
      token: null,
      status: null
    ): TypedEventFilter<[string, boolean], { token: string; status: boolean }>;

    BorrowerWhitelistStatusChanged(
      borrower: null,
      status: null
    ): TypedEventFilter<
      [string, boolean],
      { borrower: string; status: boolean }
    >;

    FixedTermLoanAgencyChanged(
      ftlAgency: null
    ): TypedEventFilter<[string], { ftlAgency: string }>;

    LoanFactoryChanged(
      newLoanFactory: null
    ): TypedEventFilter<[string], { newLoanFactory: string }>;

    MaxPoolsChanged(
      maxPools: null
    ): TypedEventFilter<[BigNumber], { maxPools: BigNumber }>;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    PoolCreated(
      token: null,
      pool: null
    ): TypedEventFilter<[string, string], { token: string; pool: string }>;

    PoolSupported(pool: null): TypedEventFilter<[string], { pool: string }>;

    PoolUnsupported(pool: null): TypedEventFilter<[string], { pool: string }>;

    SafuChanged(newSafu: null): TypedEventFilter<[string], { newSafu: string }>;

    SingleBorrowerPoolCreated(
      borrower: null,
      token: null,
      pool: null
    ): TypedEventFilter<
      [string, string, string],
      { borrower: string; token: string; pool: string }
    >;
  };

  estimateGas: {
    MAX_DECIMAL_COUNT(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_DECIMAL_COUNT()"(overrides?: CallOverrides): Promise<BigNumber>;

    addLegacyPool(
      legacyPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addLegacyPool(address)"(
      legacyPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowAll(overrides?: CallOverrides): Promise<BigNumber>;

    "allowAll()"(overrides?: CallOverrides): Promise<BigNumber>;

    allowToken(
      token: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "allowToken(address,bool)"(
      token: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createPool(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createPool(address)"(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createSingleBorrowerPool(
      token: string,
      borrowerName: string,
      borrowerSymbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createSingleBorrowerPool(address,string,string)"(
      token: string,
      borrowerName: string,
      borrowerSymbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deprecatePool(
      legacyPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deprecatePool(address)"(
      legacyPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ftlAgency(overrides?: CallOverrides): Promise<BigNumber>;

    "ftlAgency()"(overrides?: CallOverrides): Promise<BigNumber>;

    getSupportedPools(overrides?: CallOverrides): Promise<BigNumber>;

    "getSupportedPools()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _poolImplementationReference: string,
      _ftlAgency: string,
      _safu: string,
      _loanFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(address,address,address,address)"(
      _poolImplementationReference: string,
      _ftlAgency: string,
      _safu: string,
      _loanFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isAllowed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isAllowed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isBorrowerWhitelisted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isBorrowerWhitelisted(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    "isInitialized()"(overrides?: CallOverrides): Promise<BigNumber>;

    isPool(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isPool(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSupportedPool(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isSupportedPool(address)"(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    loanFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "loanFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxPools(overrides?: CallOverrides): Promise<BigNumber>;

    "maxPools()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pool(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "pool(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolImplementationReference(overrides?: CallOverrides): Promise<BigNumber>;

    "poolImplementationReference()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removePool(
      legacyPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removePool(address)"(
      legacyPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safu(overrides?: CallOverrides): Promise<BigNumber>;

    "safu()"(overrides?: CallOverrides): Promise<BigNumber>;

    setAllowAll(
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setAllowAll(bool)"(
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFixedTermLoanAgency(
      _ftlAgency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setFixedTermLoanAgency(address)"(
      _ftlAgency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLoanFactory(
      _loanFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setLoanFactory(address)"(
      _loanFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxPools(
      _maxPools: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMaxPools(uint256)"(
      _maxPools: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSafuAddress(
      _safu: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setSafuAddress(address)"(
      _safu: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    singleBorrowerPool(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "singleBorrowerPool(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportPool(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "supportPool(address)"(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportedPools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportedPools(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportedPoolsTVL(overrides?: CallOverrides): Promise<BigNumber>;

    "supportedPoolsTVL()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unsupportPool(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "unsupportPool(address)"(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelistBorrower(
      borrower: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "whitelistBorrower(address,bool)"(
      borrower: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_DECIMAL_COUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MAX_DECIMAL_COUNT()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addLegacyPool(
      legacyPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addLegacyPool(address)"(
      legacyPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowAll(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "allowAll()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowToken(
      token: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "allowToken(address,bool)"(
      token: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createPool(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createPool(address)"(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createSingleBorrowerPool(
      token: string,
      borrowerName: string,
      borrowerSymbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createSingleBorrowerPool(address,string,string)"(
      token: string,
      borrowerName: string,
      borrowerSymbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deprecatePool(
      legacyPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deprecatePool(address)"(
      legacyPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ftlAgency(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ftlAgency()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSupportedPools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getSupportedPools()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _poolImplementationReference: string,
      _ftlAgency: string,
      _safu: string,
      _loanFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address,address)"(
      _poolImplementationReference: string,
      _ftlAgency: string,
      _safu: string,
      _loanFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isAllowed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isAllowed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isBorrowerWhitelisted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isBorrowerWhitelisted(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isInitialized()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPool(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isPool(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSupportedPool(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isSupportedPool(address)"(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    loanFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "loanFactory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxPools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxPools()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pool(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pool(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolImplementationReference(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolImplementationReference()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removePool(
      legacyPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removePool(address)"(
      legacyPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safu(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "safu()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAllowAll(
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setAllowAll(bool)"(
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFixedTermLoanAgency(
      _ftlAgency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setFixedTermLoanAgency(address)"(
      _ftlAgency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLoanFactory(
      _loanFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setLoanFactory(address)"(
      _loanFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxPools(
      _maxPools: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMaxPools(uint256)"(
      _maxPools: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSafuAddress(
      _safu: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setSafuAddress(address)"(
      _safu: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    singleBorrowerPool(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "singleBorrowerPool(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportPool(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "supportPool(address)"(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportedPools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportedPools(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportedPoolsTVL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "supportedPoolsTVL()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unsupportPool(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "unsupportPool(address)"(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelistBorrower(
      borrower: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "whitelistBorrower(address,bool)"(
      borrower: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
