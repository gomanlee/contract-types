/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface FixedTermLoanAgencyInterface extends ethers.utils.Interface {
  functions: {
    "_1inch()": FunctionFragment;
    "allowBorrower(address)": FunctionFragment;
    "blockBorrower(address)": FunctionFragment;
    "borrow(address,uint256,uint256,uint256)": FunctionFragment;
    "borrowLimit(address,address)": FunctionFragment;
    "borrowingMutex()": FunctionFragment;
    "claimOwnership()": FunctionFragment;
    "creditOracle()": FunctionFragment;
    "fee()": FunctionFragment;
    "feePool()": FunctionFragment;
    "feeToken()": FunctionFragment;
    "initialize(address,address,address,address,address,address,address,address)": FunctionFragment;
    "isBorrowerAllowed(address)": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "loanFactory()": FunctionFragment;
    "loans(address)": FunctionFragment;
    "longTermLoanScoreThreshold()": FunctionFragment;
    "longTermLoanThreshold()": FunctionFragment;
    "maxLoanTerm()": FunctionFragment;
    "maxLoans()": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "poolFactory()": FunctionFragment;
    "poolLoans(address,uint256)": FunctionFragment;
    "rate(address,address,uint256,uint256)": FunctionFragment;
    "rateModel()": FunctionFragment;
    "reclaim(address,bytes)": FunctionFragment;
    "setBorrowingMutex(address)": FunctionFragment;
    "setCreditOracle(address)": FunctionFragment;
    "setFee(uint256)": FunctionFragment;
    "setFeePool(address)": FunctionFragment;
    "setLoansLimit(uint256)": FunctionFragment;
    "setLongTermLoanScoreThreshold(uint8)": FunctionFragment;
    "setLongTermLoanThreshold(uint256)": FunctionFragment;
    "setMaxLoanTerm(uint256)": FunctionFragment;
    "stakingPool()": FunctionFragment;
    "stakingVault()": FunctionFragment;
    "swapFeeSlippage()": FunctionFragment;
    "totalBorrowed(address,uint8)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "value(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "_1inch", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowBorrower",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "blockBorrower",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowLimit",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowingMutex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creditOracle",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(functionFragment: "feePool", values?: undefined): string;
  encodeFunctionData(functionFragment: "feeToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isBorrowerAllowed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "loanFactory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "loans", values: [string]): string;
  encodeFunctionData(
    functionFragment: "longTermLoanScoreThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "longTermLoanThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxLoanTerm",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxLoans", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolLoans",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rate",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "rateModel", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reclaim",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setBorrowingMutex",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCreditOracle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setFeePool", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setLoansLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLongTermLoanScoreThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLongTermLoanThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxLoanTerm",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapFeeSlippage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBorrowed",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "value", values: [string]): string;

  decodeFunctionResult(functionFragment: "_1inch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowBorrower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blockBorrower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowingMutex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isBorrowerAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loanFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "loans", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "longTermLoanScoreThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "longTermLoanThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxLoanTerm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxLoans", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolLoans", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rateModel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reclaim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBorrowingMutex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCreditOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFeePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLoansLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLongTermLoanScoreThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLongTermLoanThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxLoanTerm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapFeeSlippage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBorrowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "value", data: BytesLike): Result;

  events: {
    "BorrowerAllowed(address)": EventFragment;
    "BorrowerBlocked(address)": EventFragment;
    "BorrowingMutexChanged(address)": EventFragment;
    "CreditOracleChanged(address)": EventFragment;
    "FeeChanged(uint256)": EventFragment;
    "FeePoolChanged(address)": EventFragment;
    "Funded(address,address,uint256)": EventFragment;
    "LoansLimitChanged(uint256)": EventFragment;
    "LongTermLoanScoreThresholdChanged(uint256)": EventFragment;
    "LongTermLoanThresholdChanged(uint256)": EventFragment;
    "MaxLoanTermChanged(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Reclaimed(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BorrowerAllowed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BorrowerBlocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BorrowingMutexChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreditOracleChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeePoolChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Funded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoansLimitChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LongTermLoanScoreThresholdChanged"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LongTermLoanThresholdChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxLoanTermChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Reclaimed"): EventFragment;
}

export class FixedTermLoanAgency extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FixedTermLoanAgencyInterface;

  functions: {
    _1inch(overrides?: CallOverrides): Promise<[string]>;

    "_1inch()"(overrides?: CallOverrides): Promise<[string]>;

    allowBorrower(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "allowBorrower(address)"(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    blockBorrower(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "blockBorrower(address)"(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrow(
      pool: string,
      amount: BigNumberish,
      term: BigNumberish,
      _maxApy: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "borrow(address,uint256,uint256,uint256)"(
      pool: string,
      amount: BigNumberish,
      term: BigNumberish,
      _maxApy: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrowLimit(
      pool: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "borrowLimit(address,address)"(
      pool: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    borrowingMutex(overrides?: CallOverrides): Promise<[string]>;

    "borrowingMutex()"(overrides?: CallOverrides): Promise<[string]>;

    claimOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    creditOracle(overrides?: CallOverrides): Promise<[string]>;

    "creditOracle()"(overrides?: CallOverrides): Promise<[string]>;

    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "fee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    feePool(overrides?: CallOverrides): Promise<[string]>;

    "feePool()"(overrides?: CallOverrides): Promise<[string]>;

    feeToken(overrides?: CallOverrides): Promise<[string]>;

    "feeToken()"(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _stakingPool: string,
      _poolFactory: string,
      __1inch: string,
      _creditOracle: string,
      _rateModel: string,
      _borrowingMutex: string,
      _loanFactory: string,
      _stakingVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(address,address,address,address,address,address,address,address)"(
      _stakingPool: string,
      _poolFactory: string,
      __1inch: string,
      _creditOracle: string,
      _rateModel: string,
      _borrowingMutex: string,
      _loanFactory: string,
      _stakingVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isBorrowerAllowed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isBorrowerAllowed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    "isInitialized()"(overrides?: CallOverrides): Promise<[boolean]>;

    loanFactory(overrides?: CallOverrides): Promise<[string]>;

    "loanFactory()"(overrides?: CallOverrides): Promise<[string]>;

    loans(
      pool: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { result: string[] }>;

    "loans(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { result: string[] }>;

    longTermLoanScoreThreshold(overrides?: CallOverrides): Promise<[number]>;

    "longTermLoanScoreThreshold()"(
      overrides?: CallOverrides
    ): Promise<[number]>;

    longTermLoanThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    "longTermLoanThreshold()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxLoanTerm(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maxLoanTerm()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxLoans(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maxLoans()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<[string]>;

    poolFactory(overrides?: CallOverrides): Promise<[string]>;

    "poolFactory()"(overrides?: CallOverrides): Promise<[string]>;

    poolLoans(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "poolLoans(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    rate(
      pool: string,
      borrower: string,
      amount: BigNumberish,
      term: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "rate(address,address,uint256,uint256)"(
      pool: string,
      borrower: string,
      amount: BigNumberish,
      term: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rateModel(overrides?: CallOverrides): Promise<[string]>;

    "rateModel()"(overrides?: CallOverrides): Promise<[string]>;

    reclaim(
      loanToken: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "reclaim(address,bytes)"(
      loanToken: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBorrowingMutex(
      newMutex: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setBorrowingMutex(address)"(
      newMutex: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCreditOracle(
      _creditOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setCreditOracle(address)"(
      _creditOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setFee(uint256)"(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeePool(
      newFeePool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setFeePool(address)"(
      newFeePool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLoansLimit(
      newLoansLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setLoansLimit(uint256)"(
      newLoansLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLongTermLoanScoreThreshold(
      _longTermLoanScoreThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setLongTermLoanScoreThreshold(uint8)"(
      _longTermLoanScoreThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLongTermLoanThreshold(
      _longTermLoanThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setLongTermLoanThreshold(uint256)"(
      _longTermLoanThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxLoanTerm(
      _maxLoanTerm: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMaxLoanTerm(uint256)"(
      _maxLoanTerm: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakingPool(overrides?: CallOverrides): Promise<[string]>;

    "stakingPool()"(overrides?: CallOverrides): Promise<[string]>;

    stakingVault(overrides?: CallOverrides): Promise<[string]>;

    "stakingVault()"(overrides?: CallOverrides): Promise<[string]>;

    swapFeeSlippage(overrides?: CallOverrides): Promise<[BigNumber]>;

    "swapFeeSlippage()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalBorrowed(
      borrower: string,
      decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "totalBorrowed(address,uint8)"(
      borrower: string,
      decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    value(pool: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "value(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  _1inch(overrides?: CallOverrides): Promise<string>;

  "_1inch()"(overrides?: CallOverrides): Promise<string>;

  allowBorrower(
    who: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "allowBorrower(address)"(
    who: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  blockBorrower(
    who: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "blockBorrower(address)"(
    who: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrow(
    pool: string,
    amount: BigNumberish,
    term: BigNumberish,
    _maxApy: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "borrow(address,uint256,uint256,uint256)"(
    pool: string,
    amount: BigNumberish,
    term: BigNumberish,
    _maxApy: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrowLimit(
    pool: string,
    borrower: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "borrowLimit(address,address)"(
    pool: string,
    borrower: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  borrowingMutex(overrides?: CallOverrides): Promise<string>;

  "borrowingMutex()"(overrides?: CallOverrides): Promise<string>;

  claimOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  creditOracle(overrides?: CallOverrides): Promise<string>;

  "creditOracle()"(overrides?: CallOverrides): Promise<string>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  "fee()"(overrides?: CallOverrides): Promise<BigNumber>;

  feePool(overrides?: CallOverrides): Promise<string>;

  "feePool()"(overrides?: CallOverrides): Promise<string>;

  feeToken(overrides?: CallOverrides): Promise<string>;

  "feeToken()"(overrides?: CallOverrides): Promise<string>;

  initialize(
    _stakingPool: string,
    _poolFactory: string,
    __1inch: string,
    _creditOracle: string,
    _rateModel: string,
    _borrowingMutex: string,
    _loanFactory: string,
    _stakingVault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(address,address,address,address,address,address,address,address)"(
    _stakingPool: string,
    _poolFactory: string,
    __1inch: string,
    _creditOracle: string,
    _rateModel: string,
    _borrowingMutex: string,
    _loanFactory: string,
    _stakingVault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isBorrowerAllowed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "isBorrowerAllowed(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  "isInitialized()"(overrides?: CallOverrides): Promise<boolean>;

  loanFactory(overrides?: CallOverrides): Promise<string>;

  "loanFactory()"(overrides?: CallOverrides): Promise<string>;

  loans(pool: string, overrides?: CallOverrides): Promise<string[]>;

  "loans(address)"(pool: string, overrides?: CallOverrides): Promise<string[]>;

  longTermLoanScoreThreshold(overrides?: CallOverrides): Promise<number>;

  "longTermLoanScoreThreshold()"(overrides?: CallOverrides): Promise<number>;

  longTermLoanThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  "longTermLoanThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxLoanTerm(overrides?: CallOverrides): Promise<BigNumber>;

  "maxLoanTerm()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxLoans(overrides?: CallOverrides): Promise<BigNumber>;

  "maxLoans()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  "pendingOwner()"(overrides?: CallOverrides): Promise<string>;

  poolFactory(overrides?: CallOverrides): Promise<string>;

  "poolFactory()"(overrides?: CallOverrides): Promise<string>;

  poolLoans(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "poolLoans(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  rate(
    pool: string,
    borrower: string,
    amount: BigNumberish,
    term: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "rate(address,address,uint256,uint256)"(
    pool: string,
    borrower: string,
    amount: BigNumberish,
    term: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rateModel(overrides?: CallOverrides): Promise<string>;

  "rateModel()"(overrides?: CallOverrides): Promise<string>;

  reclaim(
    loanToken: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "reclaim(address,bytes)"(
    loanToken: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBorrowingMutex(
    newMutex: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setBorrowingMutex(address)"(
    newMutex: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCreditOracle(
    _creditOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setCreditOracle(address)"(
    _creditOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFee(
    newFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setFee(uint256)"(
    newFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeePool(
    newFeePool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setFeePool(address)"(
    newFeePool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLoansLimit(
    newLoansLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setLoansLimit(uint256)"(
    newLoansLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLongTermLoanScoreThreshold(
    _longTermLoanScoreThreshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setLongTermLoanScoreThreshold(uint8)"(
    _longTermLoanScoreThreshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLongTermLoanThreshold(
    _longTermLoanThreshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setLongTermLoanThreshold(uint256)"(
    _longTermLoanThreshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxLoanTerm(
    _maxLoanTerm: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMaxLoanTerm(uint256)"(
    _maxLoanTerm: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakingPool(overrides?: CallOverrides): Promise<string>;

  "stakingPool()"(overrides?: CallOverrides): Promise<string>;

  stakingVault(overrides?: CallOverrides): Promise<string>;

  "stakingVault()"(overrides?: CallOverrides): Promise<string>;

  swapFeeSlippage(overrides?: CallOverrides): Promise<BigNumber>;

  "swapFeeSlippage()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalBorrowed(
    borrower: string,
    decimals: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "totalBorrowed(address,uint8)"(
    borrower: string,
    decimals: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  value(pool: string, overrides?: CallOverrides): Promise<BigNumber>;

  "value(address)"(pool: string, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    _1inch(overrides?: CallOverrides): Promise<string>;

    "_1inch()"(overrides?: CallOverrides): Promise<string>;

    allowBorrower(who: string, overrides?: CallOverrides): Promise<void>;

    "allowBorrower(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<void>;

    blockBorrower(who: string, overrides?: CallOverrides): Promise<void>;

    "blockBorrower(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<void>;

    borrow(
      pool: string,
      amount: BigNumberish,
      term: BigNumberish,
      _maxApy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "borrow(address,uint256,uint256,uint256)"(
      pool: string,
      amount: BigNumberish,
      term: BigNumberish,
      _maxApy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    borrowLimit(
      pool: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "borrowLimit(address,address)"(
      pool: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowingMutex(overrides?: CallOverrides): Promise<string>;

    "borrowingMutex()"(overrides?: CallOverrides): Promise<string>;

    claimOwnership(overrides?: CallOverrides): Promise<void>;

    "claimOwnership()"(overrides?: CallOverrides): Promise<void>;

    creditOracle(overrides?: CallOverrides): Promise<string>;

    "creditOracle()"(overrides?: CallOverrides): Promise<string>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    "fee()"(overrides?: CallOverrides): Promise<BigNumber>;

    feePool(overrides?: CallOverrides): Promise<string>;

    "feePool()"(overrides?: CallOverrides): Promise<string>;

    feeToken(overrides?: CallOverrides): Promise<string>;

    "feeToken()"(overrides?: CallOverrides): Promise<string>;

    initialize(
      _stakingPool: string,
      _poolFactory: string,
      __1inch: string,
      _creditOracle: string,
      _rateModel: string,
      _borrowingMutex: string,
      _loanFactory: string,
      _stakingVault: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address,address,address,address,address,address)"(
      _stakingPool: string,
      _poolFactory: string,
      __1inch: string,
      _creditOracle: string,
      _rateModel: string,
      _borrowingMutex: string,
      _loanFactory: string,
      _stakingVault: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isBorrowerAllowed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isBorrowerAllowed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    "isInitialized()"(overrides?: CallOverrides): Promise<boolean>;

    loanFactory(overrides?: CallOverrides): Promise<string>;

    "loanFactory()"(overrides?: CallOverrides): Promise<string>;

    loans(pool: string, overrides?: CallOverrides): Promise<string[]>;

    "loans(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    longTermLoanScoreThreshold(overrides?: CallOverrides): Promise<number>;

    "longTermLoanScoreThreshold()"(overrides?: CallOverrides): Promise<number>;

    longTermLoanThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    "longTermLoanThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxLoanTerm(overrides?: CallOverrides): Promise<BigNumber>;

    "maxLoanTerm()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxLoans(overrides?: CallOverrides): Promise<BigNumber>;

    "maxLoans()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<string>;

    poolFactory(overrides?: CallOverrides): Promise<string>;

    "poolFactory()"(overrides?: CallOverrides): Promise<string>;

    poolLoans(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "poolLoans(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    rate(
      pool: string,
      borrower: string,
      amount: BigNumberish,
      term: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rate(address,address,uint256,uint256)"(
      pool: string,
      borrower: string,
      amount: BigNumberish,
      term: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rateModel(overrides?: CallOverrides): Promise<string>;

    "rateModel()"(overrides?: CallOverrides): Promise<string>;

    reclaim(
      loanToken: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "reclaim(address,bytes)"(
      loanToken: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setBorrowingMutex(
      newMutex: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBorrowingMutex(address)"(
      newMutex: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCreditOracle(
      _creditOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCreditOracle(address)"(
      _creditOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFee(newFee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setFee(uint256)"(
      newFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeePool(newFeePool: string, overrides?: CallOverrides): Promise<void>;

    "setFeePool(address)"(
      newFeePool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLoansLimit(
      newLoansLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLoansLimit(uint256)"(
      newLoansLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLongTermLoanScoreThreshold(
      _longTermLoanScoreThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLongTermLoanScoreThreshold(uint8)"(
      _longTermLoanScoreThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLongTermLoanThreshold(
      _longTermLoanThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLongTermLoanThreshold(uint256)"(
      _longTermLoanThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxLoanTerm(
      _maxLoanTerm: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxLoanTerm(uint256)"(
      _maxLoanTerm: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakingPool(overrides?: CallOverrides): Promise<string>;

    "stakingPool()"(overrides?: CallOverrides): Promise<string>;

    stakingVault(overrides?: CallOverrides): Promise<string>;

    "stakingVault()"(overrides?: CallOverrides): Promise<string>;

    swapFeeSlippage(overrides?: CallOverrides): Promise<BigNumber>;

    "swapFeeSlippage()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalBorrowed(
      borrower: string,
      decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalBorrowed(address,uint8)"(
      borrower: string,
      decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    value(pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    "value(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    BorrowerAllowed(
      who: string | null
    ): TypedEventFilter<[string], { who: string }>;

    BorrowerBlocked(
      who: string | null
    ): TypedEventFilter<[string], { who: string }>;

    BorrowingMutexChanged(
      borrowingMutex: null
    ): TypedEventFilter<[string], { borrowingMutex: string }>;

    CreditOracleChanged(
      newCreditOracle: null
    ): TypedEventFilter<[string], { newCreditOracle: string }>;

    FeeChanged(
      newFee: null
    ): TypedEventFilter<[BigNumber], { newFee: BigNumber }>;

    FeePoolChanged(
      newFeePool: null
    ): TypedEventFilter<[string], { newFeePool: string }>;

    Funded(
      pool: string | null,
      loanToken: null,
      amount: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { pool: string; loanToken: string; amount: BigNumber }
    >;

    LoansLimitChanged(
      maxLoans: null
    ): TypedEventFilter<[BigNumber], { maxLoans: BigNumber }>;

    LongTermLoanScoreThresholdChanged(
      longTermLoanScoreThreshold: null
    ): TypedEventFilter<[BigNumber], { longTermLoanScoreThreshold: BigNumber }>;

    LongTermLoanThresholdChanged(
      longTermLoanThreshold: null
    ): TypedEventFilter<[BigNumber], { longTermLoanThreshold: BigNumber }>;

    MaxLoanTermChanged(
      maxLoanTerm: null
    ): TypedEventFilter<[BigNumber], { maxLoanTerm: BigNumber }>;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    Reclaimed(
      pool: string | null,
      loanToken: null,
      amount: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { pool: string; loanToken: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    _1inch(overrides?: CallOverrides): Promise<BigNumber>;

    "_1inch()"(overrides?: CallOverrides): Promise<BigNumber>;

    allowBorrower(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "allowBorrower(address)"(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    blockBorrower(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "blockBorrower(address)"(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrow(
      pool: string,
      amount: BigNumberish,
      term: BigNumberish,
      _maxApy: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "borrow(address,uint256,uint256,uint256)"(
      pool: string,
      amount: BigNumberish,
      term: BigNumberish,
      _maxApy: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrowLimit(
      pool: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "borrowLimit(address,address)"(
      pool: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowingMutex(overrides?: CallOverrides): Promise<BigNumber>;

    "borrowingMutex()"(overrides?: CallOverrides): Promise<BigNumber>;

    claimOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    creditOracle(overrides?: CallOverrides): Promise<BigNumber>;

    "creditOracle()"(overrides?: CallOverrides): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    "fee()"(overrides?: CallOverrides): Promise<BigNumber>;

    feePool(overrides?: CallOverrides): Promise<BigNumber>;

    "feePool()"(overrides?: CallOverrides): Promise<BigNumber>;

    feeToken(overrides?: CallOverrides): Promise<BigNumber>;

    "feeToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _stakingPool: string,
      _poolFactory: string,
      __1inch: string,
      _creditOracle: string,
      _rateModel: string,
      _borrowingMutex: string,
      _loanFactory: string,
      _stakingVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(address,address,address,address,address,address,address,address)"(
      _stakingPool: string,
      _poolFactory: string,
      __1inch: string,
      _creditOracle: string,
      _rateModel: string,
      _borrowingMutex: string,
      _loanFactory: string,
      _stakingVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isBorrowerAllowed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isBorrowerAllowed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    "isInitialized()"(overrides?: CallOverrides): Promise<BigNumber>;

    loanFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "loanFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    loans(pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    "loans(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    longTermLoanScoreThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    "longTermLoanScoreThreshold()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    longTermLoanThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    "longTermLoanThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxLoanTerm(overrides?: CallOverrides): Promise<BigNumber>;

    "maxLoanTerm()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxLoans(overrides?: CallOverrides): Promise<BigNumber>;

    "maxLoans()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "poolFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolLoans(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poolLoans(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rate(
      pool: string,
      borrower: string,
      amount: BigNumberish,
      term: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rate(address,address,uint256,uint256)"(
      pool: string,
      borrower: string,
      amount: BigNumberish,
      term: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rateModel(overrides?: CallOverrides): Promise<BigNumber>;

    "rateModel()"(overrides?: CallOverrides): Promise<BigNumber>;

    reclaim(
      loanToken: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "reclaim(address,bytes)"(
      loanToken: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBorrowingMutex(
      newMutex: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setBorrowingMutex(address)"(
      newMutex: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCreditOracle(
      _creditOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setCreditOracle(address)"(
      _creditOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setFee(uint256)"(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeePool(
      newFeePool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setFeePool(address)"(
      newFeePool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLoansLimit(
      newLoansLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setLoansLimit(uint256)"(
      newLoansLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLongTermLoanScoreThreshold(
      _longTermLoanScoreThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setLongTermLoanScoreThreshold(uint8)"(
      _longTermLoanScoreThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLongTermLoanThreshold(
      _longTermLoanThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setLongTermLoanThreshold(uint256)"(
      _longTermLoanThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxLoanTerm(
      _maxLoanTerm: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMaxLoanTerm(uint256)"(
      _maxLoanTerm: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakingPool(overrides?: CallOverrides): Promise<BigNumber>;

    "stakingPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    stakingVault(overrides?: CallOverrides): Promise<BigNumber>;

    "stakingVault()"(overrides?: CallOverrides): Promise<BigNumber>;

    swapFeeSlippage(overrides?: CallOverrides): Promise<BigNumber>;

    "swapFeeSlippage()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalBorrowed(
      borrower: string,
      decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalBorrowed(address,uint8)"(
      borrower: string,
      decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    value(pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    "value(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _1inch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_1inch()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowBorrower(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "allowBorrower(address)"(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    blockBorrower(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "blockBorrower(address)"(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrow(
      pool: string,
      amount: BigNumberish,
      term: BigNumberish,
      _maxApy: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "borrow(address,uint256,uint256,uint256)"(
      pool: string,
      amount: BigNumberish,
      term: BigNumberish,
      _maxApy: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrowLimit(
      pool: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "borrowLimit(address,address)"(
      pool: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowingMutex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "borrowingMutex()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    creditOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "creditOracle()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "fee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feePool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feePool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feeToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _stakingPool: string,
      _poolFactory: string,
      __1inch: string,
      _creditOracle: string,
      _rateModel: string,
      _borrowingMutex: string,
      _loanFactory: string,
      _stakingVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address,address,address,address,address,address)"(
      _stakingPool: string,
      _poolFactory: string,
      __1inch: string,
      _creditOracle: string,
      _rateModel: string,
      _borrowingMutex: string,
      _loanFactory: string,
      _stakingVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isBorrowerAllowed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isBorrowerAllowed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isInitialized()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    loanFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "loanFactory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    loans(
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "loans(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    longTermLoanScoreThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "longTermLoanScoreThreshold()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    longTermLoanThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "longTermLoanThreshold()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxLoanTerm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxLoanTerm()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxLoans(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxLoans()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolFactory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolLoans(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolLoans(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rate(
      pool: string,
      borrower: string,
      amount: BigNumberish,
      term: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rate(address,address,uint256,uint256)"(
      pool: string,
      borrower: string,
      amount: BigNumberish,
      term: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rateModel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rateModel()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reclaim(
      loanToken: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "reclaim(address,bytes)"(
      loanToken: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBorrowingMutex(
      newMutex: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setBorrowingMutex(address)"(
      newMutex: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCreditOracle(
      _creditOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setCreditOracle(address)"(
      _creditOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setFee(uint256)"(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeePool(
      newFeePool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setFeePool(address)"(
      newFeePool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLoansLimit(
      newLoansLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setLoansLimit(uint256)"(
      newLoansLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLongTermLoanScoreThreshold(
      _longTermLoanScoreThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setLongTermLoanScoreThreshold(uint8)"(
      _longTermLoanScoreThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLongTermLoanThreshold(
      _longTermLoanThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setLongTermLoanThreshold(uint256)"(
      _longTermLoanThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxLoanTerm(
      _maxLoanTerm: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMaxLoanTerm(uint256)"(
      _maxLoanTerm: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakingPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stakingPool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakingVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stakingVault()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapFeeSlippage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "swapFeeSlippage()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalBorrowed(
      borrower: string,
      decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalBorrowed(address,uint8)"(
      borrower: string,
      decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    value(
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "value(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
