/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TrueLenderInterface extends ethers.utils.Interface {
  functions: {
    "allowedBorrowers(address)": FunctionFragment;
    "currencyToken()": FunctionFragment;
    "distribute(address,uint256,uint256)": FunctionFragment;
    "fund(address)": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "loanIsAttractiveEnough(uint256)": FunctionFragment;
    "loanIsCredible(uint256,uint256)": FunctionFragment;
    "loanSizeWithinBounds(uint256)": FunctionFragment;
    "loanTermWithinBounds(uint256)": FunctionFragment;
    "loanValue(address)": FunctionFragment;
    "loans()": FunctionFragment;
    "maxApy()": FunctionFragment;
    "maxLoans()": FunctionFragment;
    "maxSize()": FunctionFragment;
    "maxTerm()": FunctionFragment;
    "minApy()": FunctionFragment;
    "minRatio()": FunctionFragment;
    "minSize()": FunctionFragment;
    "minTerm()": FunctionFragment;
    "minVotes()": FunctionFragment;
    "owner()": FunctionFragment;
    "pool()": FunctionFragment;
    "ratingAgency()": FunctionFragment;
    "reclaim(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setApyLimits(uint256,uint256)": FunctionFragment;
    "setLoansLimit(uint256)": FunctionFragment;
    "setMinRatio(uint256)": FunctionFragment;
    "setMinVotes(uint256)": FunctionFragment;
    "setRatingAgency(address)": FunctionFragment;
    "setSizeLimits(uint256,uint256)": FunctionFragment;
    "setStakingPool(address)": FunctionFragment;
    "setTermLimits(uint256,uint256)": FunctionFragment;
    "setVotingPeriod(uint256)": FunctionFragment;
    "stakingPool()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "value()": FunctionFragment;
    "votesThresholdReached(uint256)": FunctionFragment;
    "votingLastedLongEnough(uint256)": FunctionFragment;
    "votingPeriod()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allowedBorrowers",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "currencyToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distribute",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "fund", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "loanIsAttractiveEnough",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "loanIsCredible",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "loanSizeWithinBounds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "loanTermWithinBounds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "loanValue", values: [string]): string;
  encodeFunctionData(functionFragment: "loans", values?: undefined): string;
  encodeFunctionData(functionFragment: "maxApy", values?: undefined): string;
  encodeFunctionData(functionFragment: "maxLoans", values?: undefined): string;
  encodeFunctionData(functionFragment: "maxSize", values?: undefined): string;
  encodeFunctionData(functionFragment: "maxTerm", values?: undefined): string;
  encodeFunctionData(functionFragment: "minApy", values?: undefined): string;
  encodeFunctionData(functionFragment: "minRatio", values?: undefined): string;
  encodeFunctionData(functionFragment: "minSize", values?: undefined): string;
  encodeFunctionData(functionFragment: "minTerm", values?: undefined): string;
  encodeFunctionData(functionFragment: "minVotes", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ratingAgency",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "reclaim", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setApyLimits",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLoansLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinVotes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRatingAgency",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSizeLimits",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakingPool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTermLimits",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setVotingPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "value", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "votesThresholdReached",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votingLastedLongEnough",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votingPeriod",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "allowedBorrowers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currencyToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "distribute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loanIsAttractiveEnough",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loanIsCredible",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loanSizeWithinBounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loanTermWithinBounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "loanValue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "loans", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxApy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxLoans", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxSize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxTerm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minApy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minRatio", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minSize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minTerm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minVotes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ratingAgency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reclaim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApyLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLoansLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRatingAgency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSizeLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakingPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTermLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVotingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "value", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votesThresholdReached",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingLastedLongEnough",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingPeriod",
    data: BytesLike
  ): Result;

  events: {
    "Allowed(address,bool)": EventFragment;
    "ApyLimitsChanged(uint256,uint256)": EventFragment;
    "Funded(address,uint256)": EventFragment;
    "LoansLimitChanged(uint256)": EventFragment;
    "MinRatioChanged(uint256)": EventFragment;
    "MinVotesChanged(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RatingAgencyChanged(address)": EventFragment;
    "Reclaimed(address,uint256)": EventFragment;
    "SizeLimitsChanged(uint256,uint256)": EventFragment;
    "StakingPoolChanged(address)": EventFragment;
    "TermLimitsChanged(uint256,uint256)": EventFragment;
    "VotingPeriodChanged(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Allowed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApyLimitsChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Funded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoansLimitChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinRatioChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinVotesChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RatingAgencyChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Reclaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SizeLimitsChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakingPoolChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TermLimitsChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VotingPeriodChanged"): EventFragment;
}

export class TrueLender extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TrueLenderInterface;

  functions: {
    allowedBorrowers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "allowedBorrowers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    currencyToken(overrides?: CallOverrides): Promise<[string]>;

    "currencyToken()"(overrides?: CallOverrides): Promise<[string]>;

    distribute(
      recipient: string,
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "distribute(address,uint256,uint256)"(
      recipient: string,
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fund(
      loanToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "fund(address)"(
      loanToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _pool: string,
      _ratingAgency: string,
      _stakingPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(address,address,address)"(
      _pool: string,
      _ratingAgency: string,
      _stakingPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    "isInitialized()"(overrides?: CallOverrides): Promise<[boolean]>;

    loanIsAttractiveEnough(
      apy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "loanIsAttractiveEnough(uint256)"(
      apy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    loanIsCredible(
      yesVotes: BigNumberish,
      noVotes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "loanIsCredible(uint256,uint256)"(
      yesVotes: BigNumberish,
      noVotes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    loanSizeWithinBounds(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "loanSizeWithinBounds(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    loanTermWithinBounds(
      term: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "loanTermWithinBounds(uint256)"(
      term: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    loanValue(loan: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "loanValue(address)"(
      loan: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    loans(
      overrides?: CallOverrides
    ): Promise<[string[]] & { result: string[] }>;

    "loans()"(
      overrides?: CallOverrides
    ): Promise<[string[]] & { result: string[] }>;

    maxApy(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maxApy()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxLoans(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maxLoans()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maxSize()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxTerm(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maxTerm()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    minApy(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minApy()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    minRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minRatio()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    minSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minSize()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    minTerm(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minTerm()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    minVotes(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minVotes()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pool(overrides?: CallOverrides): Promise<[string]>;

    "pool()"(overrides?: CallOverrides): Promise<[string]>;

    ratingAgency(overrides?: CallOverrides): Promise<[string]>;

    "ratingAgency()"(overrides?: CallOverrides): Promise<[string]>;

    reclaim(
      loanToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "reclaim(address)"(
      loanToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApyLimits(
      newMinApy: BigNumberish,
      newMaxApy: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setApyLimits(uint256,uint256)"(
      newMinApy: BigNumberish,
      newMaxApy: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLoansLimit(
      newLoansLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setLoansLimit(uint256)"(
      newLoansLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinRatio(
      newMinRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMinRatio(uint256)"(
      newMinRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinVotes(
      newMinVotes: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMinVotes(uint256)"(
      newMinVotes: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRatingAgency(
      newRatingAgency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setRatingAgency(address)"(
      newRatingAgency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSizeLimits(
      min: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setSizeLimits(uint256,uint256)"(
      min: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStakingPool(
      newPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setStakingPool(address)"(
      newPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTermLimits(
      min: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTermLimits(uint256,uint256)"(
      min: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVotingPeriod(
      newVotingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setVotingPeriod(uint256)"(
      newVotingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakingPool(overrides?: CallOverrides): Promise<[string]>;

    "stakingPool()"(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    value(overrides?: CallOverrides): Promise<[BigNumber]>;

    "value()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    votesThresholdReached(
      votes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "votesThresholdReached(uint256)"(
      votes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    votingLastedLongEnough(
      start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "votingLastedLongEnough(uint256)"(
      start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    votingPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    "votingPeriod()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  allowedBorrowers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "allowedBorrowers(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  currencyToken(overrides?: CallOverrides): Promise<string>;

  "currencyToken()"(overrides?: CallOverrides): Promise<string>;

  distribute(
    recipient: string,
    numerator: BigNumberish,
    denominator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "distribute(address,uint256,uint256)"(
    recipient: string,
    numerator: BigNumberish,
    denominator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fund(
    loanToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "fund(address)"(
    loanToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _pool: string,
    _ratingAgency: string,
    _stakingPool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(address,address,address)"(
    _pool: string,
    _ratingAgency: string,
    _stakingPool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  "isInitialized()"(overrides?: CallOverrides): Promise<boolean>;

  loanIsAttractiveEnough(
    apy: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "loanIsAttractiveEnough(uint256)"(
    apy: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  loanIsCredible(
    yesVotes: BigNumberish,
    noVotes: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "loanIsCredible(uint256,uint256)"(
    yesVotes: BigNumberish,
    noVotes: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  loanSizeWithinBounds(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "loanSizeWithinBounds(uint256)"(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  loanTermWithinBounds(
    term: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "loanTermWithinBounds(uint256)"(
    term: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  loanValue(loan: string, overrides?: CallOverrides): Promise<BigNumber>;

  "loanValue(address)"(
    loan: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  loans(overrides?: CallOverrides): Promise<string[]>;

  "loans()"(overrides?: CallOverrides): Promise<string[]>;

  maxApy(overrides?: CallOverrides): Promise<BigNumber>;

  "maxApy()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxLoans(overrides?: CallOverrides): Promise<BigNumber>;

  "maxLoans()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxSize(overrides?: CallOverrides): Promise<BigNumber>;

  "maxSize()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxTerm(overrides?: CallOverrides): Promise<BigNumber>;

  "maxTerm()"(overrides?: CallOverrides): Promise<BigNumber>;

  minApy(overrides?: CallOverrides): Promise<BigNumber>;

  "minApy()"(overrides?: CallOverrides): Promise<BigNumber>;

  minRatio(overrides?: CallOverrides): Promise<BigNumber>;

  "minRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

  minSize(overrides?: CallOverrides): Promise<BigNumber>;

  "minSize()"(overrides?: CallOverrides): Promise<BigNumber>;

  minTerm(overrides?: CallOverrides): Promise<BigNumber>;

  "minTerm()"(overrides?: CallOverrides): Promise<BigNumber>;

  minVotes(overrides?: CallOverrides): Promise<BigNumber>;

  "minVotes()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pool(overrides?: CallOverrides): Promise<string>;

  "pool()"(overrides?: CallOverrides): Promise<string>;

  ratingAgency(overrides?: CallOverrides): Promise<string>;

  "ratingAgency()"(overrides?: CallOverrides): Promise<string>;

  reclaim(
    loanToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "reclaim(address)"(
    loanToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApyLimits(
    newMinApy: BigNumberish,
    newMaxApy: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setApyLimits(uint256,uint256)"(
    newMinApy: BigNumberish,
    newMaxApy: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLoansLimit(
    newLoansLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setLoansLimit(uint256)"(
    newLoansLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinRatio(
    newMinRatio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMinRatio(uint256)"(
    newMinRatio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinVotes(
    newMinVotes: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMinVotes(uint256)"(
    newMinVotes: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRatingAgency(
    newRatingAgency: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setRatingAgency(address)"(
    newRatingAgency: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSizeLimits(
    min: BigNumberish,
    max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setSizeLimits(uint256,uint256)"(
    min: BigNumberish,
    max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStakingPool(
    newPool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setStakingPool(address)"(
    newPool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTermLimits(
    min: BigNumberish,
    max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTermLimits(uint256,uint256)"(
    min: BigNumberish,
    max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVotingPeriod(
    newVotingPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setVotingPeriod(uint256)"(
    newVotingPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakingPool(overrides?: CallOverrides): Promise<string>;

  "stakingPool()"(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  value(overrides?: CallOverrides): Promise<BigNumber>;

  "value()"(overrides?: CallOverrides): Promise<BigNumber>;

  votesThresholdReached(
    votes: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "votesThresholdReached(uint256)"(
    votes: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  votingLastedLongEnough(
    start: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "votingLastedLongEnough(uint256)"(
    start: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "votingPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    allowedBorrowers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "allowedBorrowers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    currencyToken(overrides?: CallOverrides): Promise<string>;

    "currencyToken()"(overrides?: CallOverrides): Promise<string>;

    distribute(
      recipient: string,
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "distribute(address,uint256,uint256)"(
      recipient: string,
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fund(loanToken: string, overrides?: CallOverrides): Promise<void>;

    "fund(address)"(
      loanToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _pool: string,
      _ratingAgency: string,
      _stakingPool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address)"(
      _pool: string,
      _ratingAgency: string,
      _stakingPool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    "isInitialized()"(overrides?: CallOverrides): Promise<boolean>;

    loanIsAttractiveEnough(
      apy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "loanIsAttractiveEnough(uint256)"(
      apy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    loanIsCredible(
      yesVotes: BigNumberish,
      noVotes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "loanIsCredible(uint256,uint256)"(
      yesVotes: BigNumberish,
      noVotes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    loanSizeWithinBounds(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "loanSizeWithinBounds(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    loanTermWithinBounds(
      term: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "loanTermWithinBounds(uint256)"(
      term: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    loanValue(loan: string, overrides?: CallOverrides): Promise<BigNumber>;

    "loanValue(address)"(
      loan: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    loans(overrides?: CallOverrides): Promise<string[]>;

    "loans()"(overrides?: CallOverrides): Promise<string[]>;

    maxApy(overrides?: CallOverrides): Promise<BigNumber>;

    "maxApy()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxLoans(overrides?: CallOverrides): Promise<BigNumber>;

    "maxLoans()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxSize(overrides?: CallOverrides): Promise<BigNumber>;

    "maxSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxTerm(overrides?: CallOverrides): Promise<BigNumber>;

    "maxTerm()"(overrides?: CallOverrides): Promise<BigNumber>;

    minApy(overrides?: CallOverrides): Promise<BigNumber>;

    "minApy()"(overrides?: CallOverrides): Promise<BigNumber>;

    minRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "minRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    minSize(overrides?: CallOverrides): Promise<BigNumber>;

    "minSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    minTerm(overrides?: CallOverrides): Promise<BigNumber>;

    "minTerm()"(overrides?: CallOverrides): Promise<BigNumber>;

    minVotes(overrides?: CallOverrides): Promise<BigNumber>;

    "minVotes()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pool(overrides?: CallOverrides): Promise<string>;

    "pool()"(overrides?: CallOverrides): Promise<string>;

    ratingAgency(overrides?: CallOverrides): Promise<string>;

    "ratingAgency()"(overrides?: CallOverrides): Promise<string>;

    reclaim(loanToken: string, overrides?: CallOverrides): Promise<void>;

    "reclaim(address)"(
      loanToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setApyLimits(
      newMinApy: BigNumberish,
      newMaxApy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setApyLimits(uint256,uint256)"(
      newMinApy: BigNumberish,
      newMaxApy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLoansLimit(
      newLoansLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLoansLimit(uint256)"(
      newLoansLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinRatio(
      newMinRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinRatio(uint256)"(
      newMinRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinVotes(
      newMinVotes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinVotes(uint256)"(
      newMinVotes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRatingAgency(
      newRatingAgency: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRatingAgency(address)"(
      newRatingAgency: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSizeLimits(
      min: BigNumberish,
      max: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setSizeLimits(uint256,uint256)"(
      min: BigNumberish,
      max: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStakingPool(newPool: string, overrides?: CallOverrides): Promise<void>;

    "setStakingPool(address)"(
      newPool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTermLimits(
      min: BigNumberish,
      max: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTermLimits(uint256,uint256)"(
      min: BigNumberish,
      max: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setVotingPeriod(
      newVotingPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setVotingPeriod(uint256)"(
      newVotingPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakingPool(overrides?: CallOverrides): Promise<string>;

    "stakingPool()"(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    value(overrides?: CallOverrides): Promise<BigNumber>;

    "value()"(overrides?: CallOverrides): Promise<BigNumber>;

    votesThresholdReached(
      votes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "votesThresholdReached(uint256)"(
      votes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    votingLastedLongEnough(
      start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "votingLastedLongEnough(uint256)"(
      start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "votingPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    Allowed(
      who: string | null,
      status: null
    ): TypedEventFilter<[string, boolean], { who: string; status: boolean }>;

    ApyLimitsChanged(
      minApy: null,
      maxApy: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { minApy: BigNumber; maxApy: BigNumber }
    >;

    Funded(
      loanToken: string | null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { loanToken: string; amount: BigNumber }
    >;

    LoansLimitChanged(
      maxLoans: null
    ): TypedEventFilter<[BigNumber], { maxLoans: BigNumber }>;

    MinRatioChanged(
      minRatio: null
    ): TypedEventFilter<[BigNumber], { minRatio: BigNumber }>;

    MinVotesChanged(
      minVotes: null
    ): TypedEventFilter<[BigNumber], { minVotes: BigNumber }>;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    RatingAgencyChanged(
      newRatingAgency: null
    ): TypedEventFilter<[string], { newRatingAgency: string }>;

    Reclaimed(
      loanToken: string | null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { loanToken: string; amount: BigNumber }
    >;

    SizeLimitsChanged(
      minSize: null,
      maxSize: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { minSize: BigNumber; maxSize: BigNumber }
    >;

    StakingPoolChanged(
      pool: null
    ): TypedEventFilter<[string], { pool: string }>;

    TermLimitsChanged(
      minTerm: null,
      maxTerm: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { minTerm: BigNumber; maxTerm: BigNumber }
    >;

    VotingPeriodChanged(
      votingPeriod: null
    ): TypedEventFilter<[BigNumber], { votingPeriod: BigNumber }>;
  };

  estimateGas: {
    allowedBorrowers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowedBorrowers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currencyToken(overrides?: CallOverrides): Promise<BigNumber>;

    "currencyToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    distribute(
      recipient: string,
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "distribute(address,uint256,uint256)"(
      recipient: string,
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fund(
      loanToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "fund(address)"(
      loanToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _pool: string,
      _ratingAgency: string,
      _stakingPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(address,address,address)"(
      _pool: string,
      _ratingAgency: string,
      _stakingPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    "isInitialized()"(overrides?: CallOverrides): Promise<BigNumber>;

    loanIsAttractiveEnough(
      apy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "loanIsAttractiveEnough(uint256)"(
      apy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    loanIsCredible(
      yesVotes: BigNumberish,
      noVotes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "loanIsCredible(uint256,uint256)"(
      yesVotes: BigNumberish,
      noVotes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    loanSizeWithinBounds(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "loanSizeWithinBounds(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    loanTermWithinBounds(
      term: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "loanTermWithinBounds(uint256)"(
      term: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    loanValue(loan: string, overrides?: CallOverrides): Promise<BigNumber>;

    "loanValue(address)"(
      loan: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    loans(overrides?: CallOverrides): Promise<BigNumber>;

    "loans()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxApy(overrides?: CallOverrides): Promise<BigNumber>;

    "maxApy()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxLoans(overrides?: CallOverrides): Promise<BigNumber>;

    "maxLoans()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxSize(overrides?: CallOverrides): Promise<BigNumber>;

    "maxSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxTerm(overrides?: CallOverrides): Promise<BigNumber>;

    "maxTerm()"(overrides?: CallOverrides): Promise<BigNumber>;

    minApy(overrides?: CallOverrides): Promise<BigNumber>;

    "minApy()"(overrides?: CallOverrides): Promise<BigNumber>;

    minRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "minRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    minSize(overrides?: CallOverrides): Promise<BigNumber>;

    "minSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    minTerm(overrides?: CallOverrides): Promise<BigNumber>;

    "minTerm()"(overrides?: CallOverrides): Promise<BigNumber>;

    minVotes(overrides?: CallOverrides): Promise<BigNumber>;

    "minVotes()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<BigNumber>;

    "pool()"(overrides?: CallOverrides): Promise<BigNumber>;

    ratingAgency(overrides?: CallOverrides): Promise<BigNumber>;

    "ratingAgency()"(overrides?: CallOverrides): Promise<BigNumber>;

    reclaim(
      loanToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "reclaim(address)"(
      loanToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApyLimits(
      newMinApy: BigNumberish,
      newMaxApy: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setApyLimits(uint256,uint256)"(
      newMinApy: BigNumberish,
      newMaxApy: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLoansLimit(
      newLoansLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setLoansLimit(uint256)"(
      newLoansLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinRatio(
      newMinRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMinRatio(uint256)"(
      newMinRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinVotes(
      newMinVotes: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMinVotes(uint256)"(
      newMinVotes: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRatingAgency(
      newRatingAgency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setRatingAgency(address)"(
      newRatingAgency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSizeLimits(
      min: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setSizeLimits(uint256,uint256)"(
      min: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStakingPool(
      newPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setStakingPool(address)"(
      newPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTermLimits(
      min: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTermLimits(uint256,uint256)"(
      min: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVotingPeriod(
      newVotingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setVotingPeriod(uint256)"(
      newVotingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakingPool(overrides?: CallOverrides): Promise<BigNumber>;

    "stakingPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    value(overrides?: CallOverrides): Promise<BigNumber>;

    "value()"(overrides?: CallOverrides): Promise<BigNumber>;

    votesThresholdReached(
      votes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "votesThresholdReached(uint256)"(
      votes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votingLastedLongEnough(
      start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "votingLastedLongEnough(uint256)"(
      start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "votingPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    allowedBorrowers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowedBorrowers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currencyToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currencyToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distribute(
      recipient: string,
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "distribute(address,uint256,uint256)"(
      recipient: string,
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fund(
      loanToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "fund(address)"(
      loanToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _pool: string,
      _ratingAgency: string,
      _stakingPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address)"(
      _pool: string,
      _ratingAgency: string,
      _stakingPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isInitialized()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    loanIsAttractiveEnough(
      apy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "loanIsAttractiveEnough(uint256)"(
      apy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    loanIsCredible(
      yesVotes: BigNumberish,
      noVotes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "loanIsCredible(uint256,uint256)"(
      yesVotes: BigNumberish,
      noVotes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    loanSizeWithinBounds(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "loanSizeWithinBounds(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    loanTermWithinBounds(
      term: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "loanTermWithinBounds(uint256)"(
      term: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    loanValue(
      loan: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "loanValue(address)"(
      loan: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    loans(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "loans()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxApy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxApy()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxLoans(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxLoans()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxSize()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxTerm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxTerm()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minApy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minApy()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minRatio()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minSize()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minTerm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minTerm()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minVotes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minVotes()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ratingAgency(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ratingAgency()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reclaim(
      loanToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "reclaim(address)"(
      loanToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApyLimits(
      newMinApy: BigNumberish,
      newMaxApy: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setApyLimits(uint256,uint256)"(
      newMinApy: BigNumberish,
      newMaxApy: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLoansLimit(
      newLoansLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setLoansLimit(uint256)"(
      newLoansLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinRatio(
      newMinRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMinRatio(uint256)"(
      newMinRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinVotes(
      newMinVotes: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMinVotes(uint256)"(
      newMinVotes: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRatingAgency(
      newRatingAgency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setRatingAgency(address)"(
      newRatingAgency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSizeLimits(
      min: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setSizeLimits(uint256,uint256)"(
      min: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStakingPool(
      newPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setStakingPool(address)"(
      newPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTermLimits(
      min: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTermLimits(uint256,uint256)"(
      min: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVotingPeriod(
      newVotingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setVotingPeriod(uint256)"(
      newVotingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakingPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stakingPool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    value(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "value()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votesThresholdReached(
      votes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "votesThresholdReached(uint256)"(
      votes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votingLastedLongEnough(
      start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "votingLastedLongEnough(uint256)"(
      start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votingPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "votingPeriod()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
