/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ITimeAveragedBaseRateOracleInterface extends ethers.utils.Interface {
  functions: {
    "calculateAverageAPY(uint16)": FunctionFragment;
    "getMonthlyAPY()": FunctionFragment;
    "getWeeklyAPY()": FunctionFragment;
    "getYearlyAPY()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calculateAverageAPY",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMonthlyAPY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWeeklyAPY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getYearlyAPY",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateAverageAPY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMonthlyAPY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWeeklyAPY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getYearlyAPY",
    data: BytesLike
  ): Result;

  events: {};
}

export class ITimeAveragedBaseRateOracle extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ITimeAveragedBaseRateOracleInterface;

  functions: {
    calculateAverageAPY(
      numberOfValues: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calculateAverageAPY(uint16)"(
      numberOfValues: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMonthlyAPY(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getMonthlyAPY()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getWeeklyAPY(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getWeeklyAPY()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getYearlyAPY(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getYearlyAPY()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  calculateAverageAPY(
    numberOfValues: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateAverageAPY(uint16)"(
    numberOfValues: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMonthlyAPY(overrides?: CallOverrides): Promise<BigNumber>;

  "getMonthlyAPY()"(overrides?: CallOverrides): Promise<BigNumber>;

  getWeeklyAPY(overrides?: CallOverrides): Promise<BigNumber>;

  "getWeeklyAPY()"(overrides?: CallOverrides): Promise<BigNumber>;

  getYearlyAPY(overrides?: CallOverrides): Promise<BigNumber>;

  "getYearlyAPY()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    calculateAverageAPY(
      numberOfValues: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateAverageAPY(uint16)"(
      numberOfValues: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMonthlyAPY(overrides?: CallOverrides): Promise<BigNumber>;

    "getMonthlyAPY()"(overrides?: CallOverrides): Promise<BigNumber>;

    getWeeklyAPY(overrides?: CallOverrides): Promise<BigNumber>;

    "getWeeklyAPY()"(overrides?: CallOverrides): Promise<BigNumber>;

    getYearlyAPY(overrides?: CallOverrides): Promise<BigNumber>;

    "getYearlyAPY()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    calculateAverageAPY(
      numberOfValues: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateAverageAPY(uint16)"(
      numberOfValues: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMonthlyAPY(overrides?: CallOverrides): Promise<BigNumber>;

    "getMonthlyAPY()"(overrides?: CallOverrides): Promise<BigNumber>;

    getWeeklyAPY(overrides?: CallOverrides): Promise<BigNumber>;

    "getWeeklyAPY()"(overrides?: CallOverrides): Promise<BigNumber>;

    getYearlyAPY(overrides?: CallOverrides): Promise<BigNumber>;

    "getYearlyAPY()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateAverageAPY(
      numberOfValues: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateAverageAPY(uint16)"(
      numberOfValues: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMonthlyAPY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getMonthlyAPY()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWeeklyAPY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getWeeklyAPY()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getYearlyAPY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getYearlyAPY()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
