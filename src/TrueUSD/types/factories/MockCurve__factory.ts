/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { MockCurve } from "../MockCurve";

export class MockCurve__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockCurve> {
    return super.deploy(overrides || {}) as Promise<MockCurve>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockCurve {
    return super.attach(address) as MockCurve;
  }
  connect(signer: Signer): MockCurve__factory {
    return super.connect(signer) as MockCurve__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockCurve {
    return new Contract(address, _abi, signerOrProvider) as MockCurve;
  }
}

const _abi = [
  {
    inputs: [],
    name: "burn300kGas",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[4]",
        name: "amounts",
        type: "uint256[4]",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    name: "calc_token_amount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "get_virtual_price",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "set_withdraw_price",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "sharePrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052670de0b6b3a764000060005534801561001c57600080fd5b506101958061002c6000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c806387269729116100505780638726972914610093578063bb7b8b80146100ad578063cf701ff7146100b557610067565b80633142dc361461006c5780637417259e1461008b575b600080fd5b6100896004803603602081101561008257600080fd5b5035610109565b005b61008961010e565b61009b610126565b60408051918252519081900360200190f35b61009b61012c565b61009b600480360360a08110156100cb57600080fd5b81019080806080019060048060200260405190810160405280929190826004602002808284376000920191909152509194505050351515905061013d565b600055565b60005b61018c81101561012357600101610111565b50565b60005481565b600061013661010e565b5060005490565b600080546060840151670de0b6b3a7640000028161015757fe5b04939250505056fea2646970667358221220d06f082e454c4d407b23887548f94db531cf413028a5c3771a544542ed07f0f564736f6c634300060a0033";
