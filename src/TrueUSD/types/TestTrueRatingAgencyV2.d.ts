/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TestTrueRatingAgencyV2Interface extends ethers.utils.Interface {
  functions: {
    "TRU()": FunctionFragment;
    "claim(address,address)": FunctionFragment;
    "claimable(address,address)": FunctionFragment;
    "claimed(address,address)": FunctionFragment;
    "distributor()": FunctionFragment;
    "getNoRate(address,address)": FunctionFragment;
    "getResults(address)": FunctionFragment;
    "getTotalNoRatings(address)": FunctionFragment;
    "getTotalYesRatings(address)": FunctionFragment;
    "getVotingStart(address)": FunctionFragment;
    "getYesRate(address,address)": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "loans(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "ratersRewardFactor()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardMultiplier()": FunctionFragment;
    "setRatersRewardFactor(uint256)": FunctionFragment;
    "setRewardMultiplier(uint256)": FunctionFragment;
    "status(address)": FunctionFragment;
    "stkTRU()": FunctionFragment;
    "submit(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "yes(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "TRU", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimable",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimed",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "distributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNoRate",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "getResults", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getTotalNoRatings",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalYesRatings",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingStart",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getYesRate",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "loans", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ratersRewardFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRatersRewardFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "status", values: [string]): string;
  encodeFunctionData(functionFragment: "stkTRU", values?: undefined): string;
  encodeFunctionData(functionFragment: "submit", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "yes",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "TRU", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNoRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getResults", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalNoRatings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalYesRatings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getYesRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "loans", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ratersRewardFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRatersRewardFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stkTRU", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "submit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "yes", data: BytesLike): Result;

  events: {
    "Claimed(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RatersRewardFactorChanged(uint256)": EventFragment;
    "RewardMultiplierChanged(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RatersRewardFactorChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardMultiplierChanged"): EventFragment;
}

export class TestTrueRatingAgencyV2 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TestTrueRatingAgencyV2Interface;

  functions: {
    TRU(overrides?: CallOverrides): Promise<[string]>;

    "TRU()"(overrides?: CallOverrides): Promise<[string]>;

    claim(
      id: string,
      rater: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claim(address,address)"(
      id: string,
      rater: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimable(
      id: string,
      rater: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "claimable(address,address)"(
      id: string,
      rater: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimed(
      id: string,
      rater: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "claimed(address,address)"(
      id: string,
      rater: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    distributor(overrides?: CallOverrides): Promise<[string]>;

    "distributor()"(overrides?: CallOverrides): Promise<[string]>;

    getNoRate(
      id: string,
      rater: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getNoRate(address,address)"(
      id: string,
      rater: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getResults(
      id: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    "getResults(address)"(
      id: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getTotalNoRatings(
      id: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getTotalNoRatings(address)"(
      id: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalYesRatings(
      id: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getTotalYesRatings(address)"(
      id: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVotingStart(id: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "getVotingStart(address)"(
      id: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getYesRate(
      id: string,
      rater: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getYesRate(address,address)"(
      id: string,
      rater: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      _TRU: string,
      _stkTRU: string,
      _distributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(address,address,address)"(
      _TRU: string,
      _stkTRU: string,
      _distributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    "isInitialized()"(overrides?: CallOverrides): Promise<[boolean]>;

    loans(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        creator: string;
        timestamp: BigNumber;
        blockNumber: BigNumber;
        reward: BigNumber;
      }
    >;

    "loans(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        creator: string;
        timestamp: BigNumber;
        blockNumber: BigNumber;
        reward: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    ratersRewardFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    "ratersRewardFactor()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    "rewardMultiplier()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    setRatersRewardFactor(
      newRatersRewardFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setRatersRewardFactor(uint256)"(
      newRatersRewardFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardMultiplier(
      newRewardMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setRewardMultiplier(uint256)"(
      newRewardMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    status(id: string, overrides?: CallOverrides): Promise<[number]>;

    "status(address)"(id: string, overrides?: CallOverrides): Promise<[number]>;

    stkTRU(overrides?: CallOverrides): Promise<[string]>;

    "stkTRU()"(overrides?: CallOverrides): Promise<[string]>;

    submit(
      id: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "submit(address)"(
      id: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    yes(
      id: string,
      stake: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "yes(address,uint256)"(
      id: string,
      stake: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  TRU(overrides?: CallOverrides): Promise<string>;

  "TRU()"(overrides?: CallOverrides): Promise<string>;

  claim(
    id: string,
    rater: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claim(address,address)"(
    id: string,
    rater: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimable(
    id: string,
    rater: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "claimable(address,address)"(
    id: string,
    rater: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimed(
    id: string,
    rater: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "claimed(address,address)"(
    id: string,
    rater: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  distributor(overrides?: CallOverrides): Promise<string>;

  "distributor()"(overrides?: CallOverrides): Promise<string>;

  getNoRate(
    id: string,
    rater: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getNoRate(address,address)"(
    id: string,
    rater: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getResults(
    id: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  "getResults(address)"(
    id: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  getTotalNoRatings(id: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getTotalNoRatings(address)"(
    id: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalYesRatings(id: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getTotalYesRatings(address)"(
    id: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVotingStart(id: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getVotingStart(address)"(
    id: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getYesRate(
    id: string,
    rater: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getYesRate(address,address)"(
    id: string,
    rater: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _TRU: string,
    _stkTRU: string,
    _distributor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(address,address,address)"(
    _TRU: string,
    _stkTRU: string,
    _distributor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  "isInitialized()"(overrides?: CallOverrides): Promise<boolean>;

  loans(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber] & {
      creator: string;
      timestamp: BigNumber;
      blockNumber: BigNumber;
      reward: BigNumber;
    }
  >;

  "loans(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber] & {
      creator: string;
      timestamp: BigNumber;
      blockNumber: BigNumber;
      reward: BigNumber;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  ratersRewardFactor(overrides?: CallOverrides): Promise<BigNumber>;

  "ratersRewardFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  "rewardMultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

  setRatersRewardFactor(
    newRatersRewardFactor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setRatersRewardFactor(uint256)"(
    newRatersRewardFactor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardMultiplier(
    newRewardMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setRewardMultiplier(uint256)"(
    newRewardMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  status(id: string, overrides?: CallOverrides): Promise<number>;

  "status(address)"(id: string, overrides?: CallOverrides): Promise<number>;

  stkTRU(overrides?: CallOverrides): Promise<string>;

  "stkTRU()"(overrides?: CallOverrides): Promise<string>;

  submit(
    id: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "submit(address)"(
    id: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  yes(
    id: string,
    stake: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "yes(address,uint256)"(
    id: string,
    stake: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    TRU(overrides?: CallOverrides): Promise<string>;

    "TRU()"(overrides?: CallOverrides): Promise<string>;

    claim(id: string, rater: string, overrides?: CallOverrides): Promise<void>;

    "claim(address,address)"(
      id: string,
      rater: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claimable(
      id: string,
      rater: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimable(address,address)"(
      id: string,
      rater: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimed(
      id: string,
      rater: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimed(address,address)"(
      id: string,
      rater: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distributor(overrides?: CallOverrides): Promise<string>;

    "distributor()"(overrides?: CallOverrides): Promise<string>;

    getNoRate(
      id: string,
      rater: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNoRate(address,address)"(
      id: string,
      rater: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getResults(
      id: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    "getResults(address)"(
      id: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getTotalNoRatings(
      id: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalNoRatings(address)"(
      id: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalYesRatings(
      id: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalYesRatings(address)"(
      id: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotingStart(id: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getVotingStart(address)"(
      id: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getYesRate(
      id: string,
      rater: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getYesRate(address,address)"(
      id: string,
      rater: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _TRU: string,
      _stkTRU: string,
      _distributor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address)"(
      _TRU: string,
      _stkTRU: string,
      _distributor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    "isInitialized()"(overrides?: CallOverrides): Promise<boolean>;

    loans(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        creator: string;
        timestamp: BigNumber;
        blockNumber: BigNumber;
        reward: BigNumber;
      }
    >;

    "loans(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        creator: string;
        timestamp: BigNumber;
        blockNumber: BigNumber;
        reward: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    ratersRewardFactor(overrides?: CallOverrides): Promise<BigNumber>;

    "ratersRewardFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    rewardMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardMultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

    setRatersRewardFactor(
      newRatersRewardFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRatersRewardFactor(uint256)"(
      newRatersRewardFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardMultiplier(
      newRewardMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRewardMultiplier(uint256)"(
      newRewardMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    status(id: string, overrides?: CallOverrides): Promise<number>;

    "status(address)"(id: string, overrides?: CallOverrides): Promise<number>;

    stkTRU(overrides?: CallOverrides): Promise<string>;

    "stkTRU()"(overrides?: CallOverrides): Promise<string>;

    submit(id: string, overrides?: CallOverrides): Promise<void>;

    "submit(address)"(id: string, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    yes(
      id: string,
      stake: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "yes(address,uint256)"(
      id: string,
      stake: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Claimed(
      loanToken: null,
      rater: null,
      claimedReward: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { loanToken: string; rater: string; claimedReward: BigNumber }
    >;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    RatersRewardFactorChanged(
      ratersRewardFactor: null
    ): TypedEventFilter<[BigNumber], { ratersRewardFactor: BigNumber }>;

    RewardMultiplierChanged(
      newRewardMultiplier: null
    ): TypedEventFilter<[BigNumber], { newRewardMultiplier: BigNumber }>;
  };

  estimateGas: {
    TRU(overrides?: CallOverrides): Promise<BigNumber>;

    "TRU()"(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      id: string,
      rater: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claim(address,address)"(
      id: string,
      rater: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimable(
      id: string,
      rater: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimable(address,address)"(
      id: string,
      rater: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimed(
      id: string,
      rater: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimed(address,address)"(
      id: string,
      rater: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distributor(overrides?: CallOverrides): Promise<BigNumber>;

    "distributor()"(overrides?: CallOverrides): Promise<BigNumber>;

    getNoRate(
      id: string,
      rater: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNoRate(address,address)"(
      id: string,
      rater: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getResults(id: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getResults(address)"(
      id: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalNoRatings(
      id: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalNoRatings(address)"(
      id: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalYesRatings(
      id: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalYesRatings(address)"(
      id: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotingStart(id: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getVotingStart(address)"(
      id: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getYesRate(
      id: string,
      rater: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getYesRate(address,address)"(
      id: string,
      rater: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _TRU: string,
      _stkTRU: string,
      _distributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(address,address,address)"(
      _TRU: string,
      _stkTRU: string,
      _distributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    "isInitialized()"(overrides?: CallOverrides): Promise<BigNumber>;

    loans(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "loans(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    ratersRewardFactor(overrides?: CallOverrides): Promise<BigNumber>;

    "ratersRewardFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardMultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

    setRatersRewardFactor(
      newRatersRewardFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setRatersRewardFactor(uint256)"(
      newRatersRewardFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardMultiplier(
      newRewardMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setRewardMultiplier(uint256)"(
      newRewardMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    status(id: string, overrides?: CallOverrides): Promise<BigNumber>;

    "status(address)"(
      id: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stkTRU(overrides?: CallOverrides): Promise<BigNumber>;

    "stkTRU()"(overrides?: CallOverrides): Promise<BigNumber>;

    submit(
      id: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "submit(address)"(
      id: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    yes(
      id: string,
      stake: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "yes(address,uint256)"(
      id: string,
      stake: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    TRU(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "TRU()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claim(
      id: string,
      rater: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claim(address,address)"(
      id: string,
      rater: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimable(
      id: string,
      rater: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimable(address,address)"(
      id: string,
      rater: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimed(
      id: string,
      rater: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimed(address,address)"(
      id: string,
      rater: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    distributor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "distributor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNoRate(
      id: string,
      rater: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNoRate(address,address)"(
      id: string,
      rater: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getResults(
      id: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getResults(address)"(
      id: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalNoRatings(
      id: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalNoRatings(address)"(
      id: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalYesRatings(
      id: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalYesRatings(address)"(
      id: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVotingStart(
      id: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVotingStart(address)"(
      id: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getYesRate(
      id: string,
      rater: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getYesRate(address,address)"(
      id: string,
      rater: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _TRU: string,
      _stkTRU: string,
      _distributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address)"(
      _TRU: string,
      _stkTRU: string,
      _distributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isInitialized()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    loans(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "loans(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ratersRewardFactor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ratersRewardFactor()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardMultiplier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardMultiplier()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setRatersRewardFactor(
      newRatersRewardFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setRatersRewardFactor(uint256)"(
      newRatersRewardFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardMultiplier(
      newRewardMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setRewardMultiplier(uint256)"(
      newRewardMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    status(
      id: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "status(address)"(
      id: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stkTRU(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stkTRU()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    submit(
      id: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "submit(address)"(
      id: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    yes(
      id: string,
      stake: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "yes(address,uint256)"(
      id: string,
      stake: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
