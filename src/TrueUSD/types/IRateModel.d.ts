/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IRateModelInterface extends ethers.utils.Interface {
  functions: {
    "borrowLimit(address,uint8,uint256,uint256,uint256)": FunctionFragment;
    "borrowLimitAdjustment(uint8)": FunctionFragment;
    "combinedRate(uint256,uint256)": FunctionFragment;
    "creditScoreAdjustmentRate(uint8)": FunctionFragment;
    "effectiveScore(address,uint8,uint256,uint256)": FunctionFragment;
    "fixedTermLoanAdjustment(uint256)": FunctionFragment;
    "isOverLimit(address,uint8,uint256,uint256,uint256)": FunctionFragment;
    "poolBasicRate(address,uint256)": FunctionFragment;
    "rate(address,uint8,uint256)": FunctionFragment;
    "securedRate(address)": FunctionFragment;
    "utilizationAdjustmentRate(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "borrowLimit",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowLimitAdjustment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "combinedRate",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "creditScoreAdjustmentRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "effectiveScore",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fixedTermLoanAdjustment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isOverLimit",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolBasicRate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rate",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "securedRate", values: [string]): string;
  encodeFunctionData(
    functionFragment: "utilizationAdjustmentRate",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "borrowLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowLimitAdjustment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "combinedRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditScoreAdjustmentRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "effectiveScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fixedTermLoanAdjustment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOverLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolBasicRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "securedRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "utilizationAdjustmentRate",
    data: BytesLike
  ): Result;

  events: {};
}

export class IRateModel extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IRateModelInterface;

  functions: {
    borrowLimit(
      pool: string,
      score: BigNumberish,
      maxBorrowerLimit: BigNumberish,
      stakedTru: BigNumberish,
      totalBorrowed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "borrowLimit(address,uint8,uint256,uint256,uint256)"(
      pool: string,
      score: BigNumberish,
      maxBorrowerLimit: BigNumberish,
      stakedTru: BigNumberish,
      totalBorrowed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    borrowLimitAdjustment(
      score: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "borrowLimitAdjustment(uint8)"(
      score: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    combinedRate(
      partialRate: BigNumberish,
      __creditScoreAdjustmentRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "combinedRate(uint256,uint256)"(
      partialRate: BigNumberish,
      __creditScoreAdjustmentRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    creditScoreAdjustmentRate(
      score: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "creditScoreAdjustmentRate(uint8)"(
      score: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    effectiveScore(
      pool: string,
      score: BigNumberish,
      stakedAmount: BigNumberish,
      borrowedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    "effectiveScore(address,uint8,uint256,uint256)"(
      pool: string,
      score: BigNumberish,
      stakedAmount: BigNumberish,
      borrowedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    fixedTermLoanAdjustment(
      term: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "fixedTermLoanAdjustment(uint256)"(
      term: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isOverLimit(
      pool: string,
      score: BigNumberish,
      maxBorrowerLimit: BigNumberish,
      stakedTru: BigNumberish,
      totalBorrowed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isOverLimit(address,uint8,uint256,uint256,uint256)"(
      pool: string,
      score: BigNumberish,
      maxBorrowerLimit: BigNumberish,
      stakedTru: BigNumberish,
      totalBorrowed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    poolBasicRate(
      pool: string,
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "poolBasicRate(address,uint256)"(
      pool: string,
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rate(
      pool: string,
      score: BigNumberish,
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "rate(address,uint8,uint256)"(
      pool: string,
      score: BigNumberish,
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    securedRate(pool: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "securedRate(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    utilizationAdjustmentRate(
      pool: string,
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "utilizationAdjustmentRate(address,uint256)"(
      pool: string,
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  borrowLimit(
    pool: string,
    score: BigNumberish,
    maxBorrowerLimit: BigNumberish,
    stakedTru: BigNumberish,
    totalBorrowed: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "borrowLimit(address,uint8,uint256,uint256,uint256)"(
    pool: string,
    score: BigNumberish,
    maxBorrowerLimit: BigNumberish,
    stakedTru: BigNumberish,
    totalBorrowed: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  borrowLimitAdjustment(
    score: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "borrowLimitAdjustment(uint8)"(
    score: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  combinedRate(
    partialRate: BigNumberish,
    __creditScoreAdjustmentRate: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "combinedRate(uint256,uint256)"(
    partialRate: BigNumberish,
    __creditScoreAdjustmentRate: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  creditScoreAdjustmentRate(
    score: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "creditScoreAdjustmentRate(uint8)"(
    score: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  effectiveScore(
    pool: string,
    score: BigNumberish,
    stakedAmount: BigNumberish,
    borrowedAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  "effectiveScore(address,uint8,uint256,uint256)"(
    pool: string,
    score: BigNumberish,
    stakedAmount: BigNumberish,
    borrowedAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  fixedTermLoanAdjustment(
    term: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "fixedTermLoanAdjustment(uint256)"(
    term: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isOverLimit(
    pool: string,
    score: BigNumberish,
    maxBorrowerLimit: BigNumberish,
    stakedTru: BigNumberish,
    totalBorrowed: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isOverLimit(address,uint8,uint256,uint256,uint256)"(
    pool: string,
    score: BigNumberish,
    maxBorrowerLimit: BigNumberish,
    stakedTru: BigNumberish,
    totalBorrowed: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  poolBasicRate(
    pool: string,
    afterAmountLent: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "poolBasicRate(address,uint256)"(
    pool: string,
    afterAmountLent: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rate(
    pool: string,
    score: BigNumberish,
    afterAmountLent: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "rate(address,uint8,uint256)"(
    pool: string,
    score: BigNumberish,
    afterAmountLent: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  securedRate(pool: string, overrides?: CallOverrides): Promise<BigNumber>;

  "securedRate(address)"(
    pool: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  utilizationAdjustmentRate(
    pool: string,
    afterAmountLent: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "utilizationAdjustmentRate(address,uint256)"(
    pool: string,
    afterAmountLent: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    borrowLimit(
      pool: string,
      score: BigNumberish,
      maxBorrowerLimit: BigNumberish,
      stakedTru: BigNumberish,
      totalBorrowed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "borrowLimit(address,uint8,uint256,uint256,uint256)"(
      pool: string,
      score: BigNumberish,
      maxBorrowerLimit: BigNumberish,
      stakedTru: BigNumberish,
      totalBorrowed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowLimitAdjustment(
      score: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "borrowLimitAdjustment(uint8)"(
      score: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    combinedRate(
      partialRate: BigNumberish,
      __creditScoreAdjustmentRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "combinedRate(uint256,uint256)"(
      partialRate: BigNumberish,
      __creditScoreAdjustmentRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creditScoreAdjustmentRate(
      score: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "creditScoreAdjustmentRate(uint8)"(
      score: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    effectiveScore(
      pool: string,
      score: BigNumberish,
      stakedAmount: BigNumberish,
      borrowedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    "effectiveScore(address,uint8,uint256,uint256)"(
      pool: string,
      score: BigNumberish,
      stakedAmount: BigNumberish,
      borrowedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    fixedTermLoanAdjustment(
      term: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "fixedTermLoanAdjustment(uint256)"(
      term: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOverLimit(
      pool: string,
      score: BigNumberish,
      maxBorrowerLimit: BigNumberish,
      stakedTru: BigNumberish,
      totalBorrowed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isOverLimit(address,uint8,uint256,uint256,uint256)"(
      pool: string,
      score: BigNumberish,
      maxBorrowerLimit: BigNumberish,
      stakedTru: BigNumberish,
      totalBorrowed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    poolBasicRate(
      pool: string,
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poolBasicRate(address,uint256)"(
      pool: string,
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rate(
      pool: string,
      score: BigNumberish,
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rate(address,uint8,uint256)"(
      pool: string,
      score: BigNumberish,
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    securedRate(pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    "securedRate(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    utilizationAdjustmentRate(
      pool: string,
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "utilizationAdjustmentRate(address,uint256)"(
      pool: string,
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    borrowLimit(
      pool: string,
      score: BigNumberish,
      maxBorrowerLimit: BigNumberish,
      stakedTru: BigNumberish,
      totalBorrowed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "borrowLimit(address,uint8,uint256,uint256,uint256)"(
      pool: string,
      score: BigNumberish,
      maxBorrowerLimit: BigNumberish,
      stakedTru: BigNumberish,
      totalBorrowed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowLimitAdjustment(
      score: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "borrowLimitAdjustment(uint8)"(
      score: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    combinedRate(
      partialRate: BigNumberish,
      __creditScoreAdjustmentRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "combinedRate(uint256,uint256)"(
      partialRate: BigNumberish,
      __creditScoreAdjustmentRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creditScoreAdjustmentRate(
      score: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "creditScoreAdjustmentRate(uint8)"(
      score: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    effectiveScore(
      pool: string,
      score: BigNumberish,
      stakedAmount: BigNumberish,
      borrowedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "effectiveScore(address,uint8,uint256,uint256)"(
      pool: string,
      score: BigNumberish,
      stakedAmount: BigNumberish,
      borrowedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fixedTermLoanAdjustment(
      term: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "fixedTermLoanAdjustment(uint256)"(
      term: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOverLimit(
      pool: string,
      score: BigNumberish,
      maxBorrowerLimit: BigNumberish,
      stakedTru: BigNumberish,
      totalBorrowed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isOverLimit(address,uint8,uint256,uint256,uint256)"(
      pool: string,
      score: BigNumberish,
      maxBorrowerLimit: BigNumberish,
      stakedTru: BigNumberish,
      totalBorrowed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolBasicRate(
      pool: string,
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poolBasicRate(address,uint256)"(
      pool: string,
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rate(
      pool: string,
      score: BigNumberish,
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rate(address,uint8,uint256)"(
      pool: string,
      score: BigNumberish,
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    securedRate(pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    "securedRate(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    utilizationAdjustmentRate(
      pool: string,
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "utilizationAdjustmentRate(address,uint256)"(
      pool: string,
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    borrowLimit(
      pool: string,
      score: BigNumberish,
      maxBorrowerLimit: BigNumberish,
      stakedTru: BigNumberish,
      totalBorrowed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "borrowLimit(address,uint8,uint256,uint256,uint256)"(
      pool: string,
      score: BigNumberish,
      maxBorrowerLimit: BigNumberish,
      stakedTru: BigNumberish,
      totalBorrowed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowLimitAdjustment(
      score: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "borrowLimitAdjustment(uint8)"(
      score: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    combinedRate(
      partialRate: BigNumberish,
      __creditScoreAdjustmentRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "combinedRate(uint256,uint256)"(
      partialRate: BigNumberish,
      __creditScoreAdjustmentRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creditScoreAdjustmentRate(
      score: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "creditScoreAdjustmentRate(uint8)"(
      score: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    effectiveScore(
      pool: string,
      score: BigNumberish,
      stakedAmount: BigNumberish,
      borrowedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "effectiveScore(address,uint8,uint256,uint256)"(
      pool: string,
      score: BigNumberish,
      stakedAmount: BigNumberish,
      borrowedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fixedTermLoanAdjustment(
      term: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "fixedTermLoanAdjustment(uint256)"(
      term: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOverLimit(
      pool: string,
      score: BigNumberish,
      maxBorrowerLimit: BigNumberish,
      stakedTru: BigNumberish,
      totalBorrowed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isOverLimit(address,uint8,uint256,uint256,uint256)"(
      pool: string,
      score: BigNumberish,
      maxBorrowerLimit: BigNumberish,
      stakedTru: BigNumberish,
      totalBorrowed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolBasicRate(
      pool: string,
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolBasicRate(address,uint256)"(
      pool: string,
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rate(
      pool: string,
      score: BigNumberish,
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rate(address,uint8,uint256)"(
      pool: string,
      score: BigNumberish,
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    securedRate(
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "securedRate(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    utilizationAdjustmentRate(
      pool: string,
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "utilizationAdjustmentRate(address,uint256)"(
      pool: string,
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
