/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TrueMultiFarmInterface extends ethers.utils.Interface {
  functions: {
    "claim(address[])": FunctionFragment;
    "claimOwnership()": FunctionFragment;
    "claimable(address,address)": FunctionFragment;
    "exit(address[])": FunctionFragment;
    "farmRewards()": FunctionFragment;
    "getShare(address)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "setShares(address[],uint256[])": FunctionFragment;
    "shares()": FunctionFragment;
    "stake(address,uint256)": FunctionFragment;
    "staked(address,address)": FunctionFragment;
    "stakerRewards(address)": FunctionFragment;
    "stakes(address)": FunctionFragment;
    "stkTru()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "tru()": FunctionFragment;
    "trueDistributor()": FunctionFragment;
    "unstake(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "claim", values: [string[]]): string;
  encodeFunctionData(
    functionFragment: "claimOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimable",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "exit", values: [string[]]): string;
  encodeFunctionData(
    functionFragment: "farmRewards",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getShare", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setShares",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "shares", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "staked",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakerRewards",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "stakes", values: [string]): string;
  encodeFunctionData(functionFragment: "stkTru", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "tru", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "trueDistributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "farmRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getShare", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setShares", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shares", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "staked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakerRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stkTru", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tru", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "trueDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;

  events: {
    "Claim(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Stake(address,address,uint256)": EventFragment;
    "Unstake(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstake"): EventFragment;
}

export class TrueMultiFarm extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TrueMultiFarmInterface;

  functions: {
    claim(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claim(address[])"(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimable(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "claimable(address,address)"(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    exit(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "exit(address[])"(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    farmRewards(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        cumulativeRewardPerToken: BigNumber;
        totalClaimedRewards: BigNumber;
        totalRewards: BigNumber;
      }
    >;

    "farmRewards()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        cumulativeRewardPerToken: BigNumber;
        totalClaimedRewards: BigNumber;
        totalRewards: BigNumber;
      }
    >;

    getShare(token: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "getShare(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      _trueDistributor: string,
      _stkTru: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(address,address)"(
      _trueDistributor: string,
      _stkTru: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    "isInitialized()"(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<[string]>;

    setShares(
      tokens: string[],
      updatedShares: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setShares(address[],uint256[])"(
      tokens: string[],
      updatedShares: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shares(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalStaked: BigNumber }>;

    "shares()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalStaked: BigNumber }>;

    stake(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "stake(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    staked(
      token: string,
      staker: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "staked(address,address)"(
      token: string,
      staker: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stakerRewards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        cumulativeRewardPerToken: BigNumber;
        totalClaimedRewards: BigNumber;
        totalRewards: BigNumber;
      }
    >;

    "stakerRewards(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        cumulativeRewardPerToken: BigNumber;
        totalClaimedRewards: BigNumber;
        totalRewards: BigNumber;
      }
    >;

    stakes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalStaked: BigNumber }>;

    "stakes(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalStaked: BigNumber }>;

    stkTru(overrides?: CallOverrides): Promise<[string]>;

    "stkTru()"(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tru(overrides?: CallOverrides): Promise<[string]>;

    "tru()"(overrides?: CallOverrides): Promise<[string]>;

    trueDistributor(overrides?: CallOverrides): Promise<[string]>;

    "trueDistributor()"(overrides?: CallOverrides): Promise<[string]>;

    unstake(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "unstake(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  claim(
    tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claim(address[])"(
    tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimable(
    token: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "claimable(address,address)"(
    token: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  exit(
    tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "exit(address[])"(
    tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  farmRewards(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      cumulativeRewardPerToken: BigNumber;
      totalClaimedRewards: BigNumber;
      totalRewards: BigNumber;
    }
  >;

  "farmRewards()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      cumulativeRewardPerToken: BigNumber;
      totalClaimedRewards: BigNumber;
      totalRewards: BigNumber;
    }
  >;

  getShare(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getShare(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _trueDistributor: string,
    _stkTru: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(address,address)"(
    _trueDistributor: string,
    _stkTru: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  "isInitialized()"(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  "pendingOwner()"(overrides?: CallOverrides): Promise<string>;

  setShares(
    tokens: string[],
    updatedShares: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setShares(address[],uint256[])"(
    tokens: string[],
    updatedShares: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shares(overrides?: CallOverrides): Promise<BigNumber>;

  "shares()"(overrides?: CallOverrides): Promise<BigNumber>;

  stake(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "stake(address,uint256)"(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  staked(
    token: string,
    staker: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "staked(address,address)"(
    token: string,
    staker: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stakerRewards(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      cumulativeRewardPerToken: BigNumber;
      totalClaimedRewards: BigNumber;
      totalRewards: BigNumber;
    }
  >;

  "stakerRewards(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      cumulativeRewardPerToken: BigNumber;
      totalClaimedRewards: BigNumber;
      totalRewards: BigNumber;
    }
  >;

  stakes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "stakes(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stkTru(overrides?: CallOverrides): Promise<string>;

  "stkTru()"(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tru(overrides?: CallOverrides): Promise<string>;

  "tru()"(overrides?: CallOverrides): Promise<string>;

  trueDistributor(overrides?: CallOverrides): Promise<string>;

  "trueDistributor()"(overrides?: CallOverrides): Promise<string>;

  unstake(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "unstake(address,uint256)"(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claim(tokens: string[], overrides?: CallOverrides): Promise<void>;

    "claim(address[])"(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimOwnership(overrides?: CallOverrides): Promise<void>;

    "claimOwnership()"(overrides?: CallOverrides): Promise<void>;

    claimable(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimable(address,address)"(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exit(tokens: string[], overrides?: CallOverrides): Promise<void>;

    "exit(address[])"(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    farmRewards(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        cumulativeRewardPerToken: BigNumber;
        totalClaimedRewards: BigNumber;
        totalRewards: BigNumber;
      }
    >;

    "farmRewards()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        cumulativeRewardPerToken: BigNumber;
        totalClaimedRewards: BigNumber;
        totalRewards: BigNumber;
      }
    >;

    getShare(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getShare(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _trueDistributor: string,
      _stkTru: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address)"(
      _trueDistributor: string,
      _stkTru: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    "isInitialized()"(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<string>;

    setShares(
      tokens: string[],
      updatedShares: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setShares(address[],uint256[])"(
      tokens: string[],
      updatedShares: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    shares(overrides?: CallOverrides): Promise<BigNumber>;

    "shares()"(overrides?: CallOverrides): Promise<BigNumber>;

    stake(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "stake(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    staked(
      token: string,
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "staked(address,address)"(
      token: string,
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakerRewards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        cumulativeRewardPerToken: BigNumber;
        totalClaimedRewards: BigNumber;
        totalRewards: BigNumber;
      }
    >;

    "stakerRewards(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        cumulativeRewardPerToken: BigNumber;
        totalClaimedRewards: BigNumber;
        totalRewards: BigNumber;
      }
    >;

    stakes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "stakes(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stkTru(overrides?: CallOverrides): Promise<string>;

    "stkTru()"(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tru(overrides?: CallOverrides): Promise<string>;

    "tru()"(overrides?: CallOverrides): Promise<string>;

    trueDistributor(overrides?: CallOverrides): Promise<string>;

    "trueDistributor()"(overrides?: CallOverrides): Promise<string>;

    unstake(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "unstake(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Claim(
      token: string | null,
      who: string | null,
      amountClaimed: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { token: string; who: string; amountClaimed: BigNumber }
    >;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    Stake(
      token: string | null,
      who: string | null,
      amountStaked: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { token: string; who: string; amountStaked: BigNumber }
    >;

    Unstake(
      token: string | null,
      who: string | null,
      amountUnstaked: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { token: string; who: string; amountUnstaked: BigNumber }
    >;
  };

  estimateGas: {
    claim(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claim(address[])"(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimable(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimable(address,address)"(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exit(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "exit(address[])"(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    farmRewards(overrides?: CallOverrides): Promise<BigNumber>;

    "farmRewards()"(overrides?: CallOverrides): Promise<BigNumber>;

    getShare(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getShare(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _trueDistributor: string,
      _stkTru: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(address,address)"(
      _trueDistributor: string,
      _stkTru: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    "isInitialized()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    setShares(
      tokens: string[],
      updatedShares: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setShares(address[],uint256[])"(
      tokens: string[],
      updatedShares: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shares(overrides?: CallOverrides): Promise<BigNumber>;

    "shares()"(overrides?: CallOverrides): Promise<BigNumber>;

    stake(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "stake(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    staked(
      token: string,
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "staked(address,address)"(
      token: string,
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakerRewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "stakerRewards(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "stakes(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stkTru(overrides?: CallOverrides): Promise<BigNumber>;

    "stkTru()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tru(overrides?: CallOverrides): Promise<BigNumber>;

    "tru()"(overrides?: CallOverrides): Promise<BigNumber>;

    trueDistributor(overrides?: CallOverrides): Promise<BigNumber>;

    "trueDistributor()"(overrides?: CallOverrides): Promise<BigNumber>;

    unstake(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "unstake(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claim(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claim(address[])"(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimable(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimable(address,address)"(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exit(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "exit(address[])"(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    farmRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "farmRewards()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getShare(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getShare(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _trueDistributor: string,
      _stkTru: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(address,address)"(
      _trueDistributor: string,
      _stkTru: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isInitialized()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setShares(
      tokens: string[],
      updatedShares: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setShares(address[],uint256[])"(
      tokens: string[],
      updatedShares: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "shares()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stake(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "stake(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    staked(
      token: string,
      staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "staked(address,address)"(
      token: string,
      staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakerRewards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stakerRewards(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stakes(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stkTru(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stkTru()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tru(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tru()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    trueDistributor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "trueDistributor()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unstake(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "unstake(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
