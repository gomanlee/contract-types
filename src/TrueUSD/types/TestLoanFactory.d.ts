/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TestLoanFactoryInterface extends ethers.utils.Interface {
  functions: {
    "admin()": FunctionFragment;
    "borrowingMutex()": FunctionFragment;
    "createDebtToken(address,address,uint256)": FunctionFragment;
    "createLegacyLoanToken(address,address,uint256,uint256,uint256)": FunctionFragment;
    "createLoanToken(address,address,uint256,uint256,uint256)": FunctionFragment;
    "creditAgency()": FunctionFragment;
    "creditOracle()": FunctionFragment;
    "debtTokenImplementation()": FunctionFragment;
    "debtTokens(address)": FunctionFragment;
    "ftlAgency()": FunctionFragment;
    "initialize(address,address,address,address,address)": FunctionFragment;
    "isDebtToken(address)": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "isLegacyLoanToken(address)": FunctionFragment;
    "isLoanToken(address)": FunctionFragment;
    "liquidator()": FunctionFragment;
    "loanTokenImplementation()": FunctionFragment;
    "setAdmin()": FunctionFragment;
    "setBorrowingMutex(address)": FunctionFragment;
    "setCreditAgency(address)": FunctionFragment;
    "setCreditOracle(address)": FunctionFragment;
    "setDebtTokenImplementation(address)": FunctionFragment;
    "setFixedTermLoanAgency(address)": FunctionFragment;
    "setIsLoanToken(address)": FunctionFragment;
    "setLoanTokenImplementation(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "borrowingMutex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createDebtToken",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createLegacyLoanToken",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createLoanToken",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "creditAgency",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creditOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "debtTokenImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "debtTokens", values: [string]): string;
  encodeFunctionData(functionFragment: "ftlAgency", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "isDebtToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isLegacyLoanToken",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isLoanToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "liquidator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "loanTokenImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setAdmin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setBorrowingMutex",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCreditAgency",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCreditOracle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDebtTokenImplementation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFixedTermLoanAgency",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsLoanToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLoanTokenImplementation",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowingMutex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDebtToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLegacyLoanToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLoanToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditAgency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "debtTokenImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "debtTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ftlAgency", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isDebtToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLegacyLoanToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLoanToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "loanTokenImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBorrowingMutex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCreditAgency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCreditOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDebtTokenImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFixedTermLoanAgency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsLoanToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLoanTokenImplementation",
    data: BytesLike
  ): Result;

  events: {
    "BorrowingMutexChanged(address)": EventFragment;
    "CreditAgencyChanged(address)": EventFragment;
    "CreditOracleChanged(address)": EventFragment;
    "DebtTokenCreated(address)": EventFragment;
    "DebtTokenImplementationChanged(address)": EventFragment;
    "FixedTermLoanAgencyChanged(address)": EventFragment;
    "LegacyLoanCreated(address)": EventFragment;
    "LoanTokenCreated(address)": EventFragment;
    "LoanTokenImplementationChanged(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BorrowingMutexChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreditAgencyChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreditOracleChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DebtTokenCreated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DebtTokenImplementationChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FixedTermLoanAgencyChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LegacyLoanCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoanTokenCreated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LoanTokenImplementationChanged"
  ): EventFragment;
}

export class TestLoanFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TestLoanFactoryInterface;

  functions: {
    admin(overrides?: CallOverrides): Promise<[string]>;

    "admin()"(overrides?: CallOverrides): Promise<[string]>;

    borrowingMutex(overrides?: CallOverrides): Promise<[string]>;

    "borrowingMutex()"(overrides?: CallOverrides): Promise<[string]>;

    createDebtToken(
      _pool: string,
      _borrower: string,
      _debt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createDebtToken(address,address,uint256)"(
      _pool: string,
      _borrower: string,
      _debt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createLegacyLoanToken(
      _pool: string,
      _borrower: string,
      _amount: BigNumberish,
      _term: BigNumberish,
      _apy: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createLegacyLoanToken(address,address,uint256,uint256,uint256)"(
      _pool: string,
      _borrower: string,
      _amount: BigNumberish,
      _term: BigNumberish,
      _apy: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createLoanToken(
      _pool: string,
      _borrower: string,
      _amount: BigNumberish,
      _term: BigNumberish,
      _apy: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createLoanToken(address,address,uint256,uint256,uint256)"(
      _pool: string,
      _borrower: string,
      _amount: BigNumberish,
      _term: BigNumberish,
      _apy: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    creditAgency(overrides?: CallOverrides): Promise<[string]>;

    "creditAgency()"(overrides?: CallOverrides): Promise<[string]>;

    creditOracle(overrides?: CallOverrides): Promise<[string]>;

    "creditOracle()"(overrides?: CallOverrides): Promise<[string]>;

    debtTokenImplementation(overrides?: CallOverrides): Promise<[string]>;

    "debtTokenImplementation()"(overrides?: CallOverrides): Promise<[string]>;

    debtTokens(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    "debtTokens(address)"(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    ftlAgency(overrides?: CallOverrides): Promise<[string]>;

    "ftlAgency()"(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _ftlAgency: string,
      _liquidator: string,
      _creditOracle: string,
      _borrowingMutex: string,
      _creditAgency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(address,address,address,address,address)"(
      _ftlAgency: string,
      _liquidator: string,
      _creditOracle: string,
      _borrowingMutex: string,
      _creditAgency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isDebtToken(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isDebtToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    "isInitialized()"(overrides?: CallOverrides): Promise<[boolean]>;

    isLegacyLoanToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isLegacyLoanToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isLoanToken(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isLoanToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    liquidator(overrides?: CallOverrides): Promise<[string]>;

    "liquidator()"(overrides?: CallOverrides): Promise<[string]>;

    loanTokenImplementation(overrides?: CallOverrides): Promise<[string]>;

    "loanTokenImplementation()"(overrides?: CallOverrides): Promise<[string]>;

    setAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setAdmin()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBorrowingMutex(
      _mutex: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setBorrowingMutex(address)"(
      _mutex: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCreditAgency(
      _creditAgency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setCreditAgency(address)"(
      _creditAgency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCreditOracle(
      _creditOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setCreditOracle(address)"(
      _creditOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDebtTokenImplementation(
      _implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setDebtTokenImplementation(address)"(
      _implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFixedTermLoanAgency(
      _ftlAgency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setFixedTermLoanAgency(address)"(
      _ftlAgency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIsLoanToken(
      loanToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setIsLoanToken(address)"(
      loanToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLoanTokenImplementation(
      _implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setLoanTokenImplementation(address)"(
      _implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  admin(overrides?: CallOverrides): Promise<string>;

  "admin()"(overrides?: CallOverrides): Promise<string>;

  borrowingMutex(overrides?: CallOverrides): Promise<string>;

  "borrowingMutex()"(overrides?: CallOverrides): Promise<string>;

  createDebtToken(
    _pool: string,
    _borrower: string,
    _debt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createDebtToken(address,address,uint256)"(
    _pool: string,
    _borrower: string,
    _debt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createLegacyLoanToken(
    _pool: string,
    _borrower: string,
    _amount: BigNumberish,
    _term: BigNumberish,
    _apy: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createLegacyLoanToken(address,address,uint256,uint256,uint256)"(
    _pool: string,
    _borrower: string,
    _amount: BigNumberish,
    _term: BigNumberish,
    _apy: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createLoanToken(
    _pool: string,
    _borrower: string,
    _amount: BigNumberish,
    _term: BigNumberish,
    _apy: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createLoanToken(address,address,uint256,uint256,uint256)"(
    _pool: string,
    _borrower: string,
    _amount: BigNumberish,
    _term: BigNumberish,
    _apy: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  creditAgency(overrides?: CallOverrides): Promise<string>;

  "creditAgency()"(overrides?: CallOverrides): Promise<string>;

  creditOracle(overrides?: CallOverrides): Promise<string>;

  "creditOracle()"(overrides?: CallOverrides): Promise<string>;

  debtTokenImplementation(overrides?: CallOverrides): Promise<string>;

  "debtTokenImplementation()"(overrides?: CallOverrides): Promise<string>;

  debtTokens(borrower: string, overrides?: CallOverrides): Promise<string[]>;

  "debtTokens(address)"(
    borrower: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  ftlAgency(overrides?: CallOverrides): Promise<string>;

  "ftlAgency()"(overrides?: CallOverrides): Promise<string>;

  initialize(
    _ftlAgency: string,
    _liquidator: string,
    _creditOracle: string,
    _borrowingMutex: string,
    _creditAgency: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(address,address,address,address,address)"(
    _ftlAgency: string,
    _liquidator: string,
    _creditOracle: string,
    _borrowingMutex: string,
    _creditAgency: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isDebtToken(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "isDebtToken(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  "isInitialized()"(overrides?: CallOverrides): Promise<boolean>;

  isLegacyLoanToken(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "isLegacyLoanToken(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isLoanToken(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "isLoanToken(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  liquidator(overrides?: CallOverrides): Promise<string>;

  "liquidator()"(overrides?: CallOverrides): Promise<string>;

  loanTokenImplementation(overrides?: CallOverrides): Promise<string>;

  "loanTokenImplementation()"(overrides?: CallOverrides): Promise<string>;

  setAdmin(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setAdmin()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBorrowingMutex(
    _mutex: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setBorrowingMutex(address)"(
    _mutex: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCreditAgency(
    _creditAgency: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setCreditAgency(address)"(
    _creditAgency: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCreditOracle(
    _creditOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setCreditOracle(address)"(
    _creditOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDebtTokenImplementation(
    _implementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setDebtTokenImplementation(address)"(
    _implementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFixedTermLoanAgency(
    _ftlAgency: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setFixedTermLoanAgency(address)"(
    _ftlAgency: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIsLoanToken(
    loanToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setIsLoanToken(address)"(
    loanToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLoanTokenImplementation(
    _implementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setLoanTokenImplementation(address)"(
    _implementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    admin(overrides?: CallOverrides): Promise<string>;

    "admin()"(overrides?: CallOverrides): Promise<string>;

    borrowingMutex(overrides?: CallOverrides): Promise<string>;

    "borrowingMutex()"(overrides?: CallOverrides): Promise<string>;

    createDebtToken(
      _pool: string,
      _borrower: string,
      _debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "createDebtToken(address,address,uint256)"(
      _pool: string,
      _borrower: string,
      _debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    createLegacyLoanToken(
      _pool: string,
      _borrower: string,
      _amount: BigNumberish,
      _term: BigNumberish,
      _apy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "createLegacyLoanToken(address,address,uint256,uint256,uint256)"(
      _pool: string,
      _borrower: string,
      _amount: BigNumberish,
      _term: BigNumberish,
      _apy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createLoanToken(
      _pool: string,
      _borrower: string,
      _amount: BigNumberish,
      _term: BigNumberish,
      _apy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "createLoanToken(address,address,uint256,uint256,uint256)"(
      _pool: string,
      _borrower: string,
      _amount: BigNumberish,
      _term: BigNumberish,
      _apy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    creditAgency(overrides?: CallOverrides): Promise<string>;

    "creditAgency()"(overrides?: CallOverrides): Promise<string>;

    creditOracle(overrides?: CallOverrides): Promise<string>;

    "creditOracle()"(overrides?: CallOverrides): Promise<string>;

    debtTokenImplementation(overrides?: CallOverrides): Promise<string>;

    "debtTokenImplementation()"(overrides?: CallOverrides): Promise<string>;

    debtTokens(borrower: string, overrides?: CallOverrides): Promise<string[]>;

    "debtTokens(address)"(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    ftlAgency(overrides?: CallOverrides): Promise<string>;

    "ftlAgency()"(overrides?: CallOverrides): Promise<string>;

    initialize(
      _ftlAgency: string,
      _liquidator: string,
      _creditOracle: string,
      _borrowingMutex: string,
      _creditAgency: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address,address,address)"(
      _ftlAgency: string,
      _liquidator: string,
      _creditOracle: string,
      _borrowingMutex: string,
      _creditAgency: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isDebtToken(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "isDebtToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    "isInitialized()"(overrides?: CallOverrides): Promise<boolean>;

    isLegacyLoanToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isLegacyLoanToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isLoanToken(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "isLoanToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    liquidator(overrides?: CallOverrides): Promise<string>;

    "liquidator()"(overrides?: CallOverrides): Promise<string>;

    loanTokenImplementation(overrides?: CallOverrides): Promise<string>;

    "loanTokenImplementation()"(overrides?: CallOverrides): Promise<string>;

    setAdmin(overrides?: CallOverrides): Promise<void>;

    "setAdmin()"(overrides?: CallOverrides): Promise<void>;

    setBorrowingMutex(_mutex: string, overrides?: CallOverrides): Promise<void>;

    "setBorrowingMutex(address)"(
      _mutex: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCreditAgency(
      _creditAgency: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCreditAgency(address)"(
      _creditAgency: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCreditOracle(
      _creditOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCreditOracle(address)"(
      _creditOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDebtTokenImplementation(
      _implementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDebtTokenImplementation(address)"(
      _implementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFixedTermLoanAgency(
      _ftlAgency: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFixedTermLoanAgency(address)"(
      _ftlAgency: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsLoanToken(loanToken: string, overrides?: CallOverrides): Promise<void>;

    "setIsLoanToken(address)"(
      loanToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLoanTokenImplementation(
      _implementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLoanTokenImplementation(address)"(
      _implementation: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    BorrowingMutexChanged(
      borrowingMutex: null
    ): TypedEventFilter<[string], { borrowingMutex: string }>;

    CreditAgencyChanged(
      creditAgency: null
    ): TypedEventFilter<[string], { creditAgency: string }>;

    CreditOracleChanged(
      creditOracle: null
    ): TypedEventFilter<[string], { creditOracle: string }>;

    DebtTokenCreated(
      debtToken: null
    ): TypedEventFilter<[string], { debtToken: string }>;

    DebtTokenImplementationChanged(
      debtTokenImplementation: null
    ): TypedEventFilter<[string], { debtTokenImplementation: string }>;

    FixedTermLoanAgencyChanged(
      ftlAgency: null
    ): TypedEventFilter<[string], { ftlAgency: string }>;

    LegacyLoanCreated(loan: null): TypedEventFilter<[string], { loan: string }>;

    LoanTokenCreated(
      loanToken: null
    ): TypedEventFilter<[string], { loanToken: string }>;

    LoanTokenImplementationChanged(
      loanTokenImplementation: null
    ): TypedEventFilter<[string], { loanTokenImplementation: string }>;
  };

  estimateGas: {
    admin(overrides?: CallOverrides): Promise<BigNumber>;

    "admin()"(overrides?: CallOverrides): Promise<BigNumber>;

    borrowingMutex(overrides?: CallOverrides): Promise<BigNumber>;

    "borrowingMutex()"(overrides?: CallOverrides): Promise<BigNumber>;

    createDebtToken(
      _pool: string,
      _borrower: string,
      _debt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createDebtToken(address,address,uint256)"(
      _pool: string,
      _borrower: string,
      _debt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createLegacyLoanToken(
      _pool: string,
      _borrower: string,
      _amount: BigNumberish,
      _term: BigNumberish,
      _apy: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createLegacyLoanToken(address,address,uint256,uint256,uint256)"(
      _pool: string,
      _borrower: string,
      _amount: BigNumberish,
      _term: BigNumberish,
      _apy: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createLoanToken(
      _pool: string,
      _borrower: string,
      _amount: BigNumberish,
      _term: BigNumberish,
      _apy: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createLoanToken(address,address,uint256,uint256,uint256)"(
      _pool: string,
      _borrower: string,
      _amount: BigNumberish,
      _term: BigNumberish,
      _apy: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    creditAgency(overrides?: CallOverrides): Promise<BigNumber>;

    "creditAgency()"(overrides?: CallOverrides): Promise<BigNumber>;

    creditOracle(overrides?: CallOverrides): Promise<BigNumber>;

    "creditOracle()"(overrides?: CallOverrides): Promise<BigNumber>;

    debtTokenImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    "debtTokenImplementation()"(overrides?: CallOverrides): Promise<BigNumber>;

    debtTokens(borrower: string, overrides?: CallOverrides): Promise<BigNumber>;

    "debtTokens(address)"(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ftlAgency(overrides?: CallOverrides): Promise<BigNumber>;

    "ftlAgency()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _ftlAgency: string,
      _liquidator: string,
      _creditOracle: string,
      _borrowingMutex: string,
      _creditAgency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(address,address,address,address,address)"(
      _ftlAgency: string,
      _liquidator: string,
      _creditOracle: string,
      _borrowingMutex: string,
      _creditAgency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isDebtToken(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isDebtToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    "isInitialized()"(overrides?: CallOverrides): Promise<BigNumber>;

    isLegacyLoanToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isLegacyLoanToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isLoanToken(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isLoanToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidator(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidator()"(overrides?: CallOverrides): Promise<BigNumber>;

    loanTokenImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    "loanTokenImplementation()"(overrides?: CallOverrides): Promise<BigNumber>;

    setAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setAdmin()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBorrowingMutex(
      _mutex: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setBorrowingMutex(address)"(
      _mutex: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCreditAgency(
      _creditAgency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setCreditAgency(address)"(
      _creditAgency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCreditOracle(
      _creditOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setCreditOracle(address)"(
      _creditOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDebtTokenImplementation(
      _implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setDebtTokenImplementation(address)"(
      _implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFixedTermLoanAgency(
      _ftlAgency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setFixedTermLoanAgency(address)"(
      _ftlAgency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIsLoanToken(
      loanToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setIsLoanToken(address)"(
      loanToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLoanTokenImplementation(
      _implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setLoanTokenImplementation(address)"(
      _implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "admin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowingMutex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "borrowingMutex()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createDebtToken(
      _pool: string,
      _borrower: string,
      _debt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createDebtToken(address,address,uint256)"(
      _pool: string,
      _borrower: string,
      _debt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createLegacyLoanToken(
      _pool: string,
      _borrower: string,
      _amount: BigNumberish,
      _term: BigNumberish,
      _apy: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createLegacyLoanToken(address,address,uint256,uint256,uint256)"(
      _pool: string,
      _borrower: string,
      _amount: BigNumberish,
      _term: BigNumberish,
      _apy: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createLoanToken(
      _pool: string,
      _borrower: string,
      _amount: BigNumberish,
      _term: BigNumberish,
      _apy: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createLoanToken(address,address,uint256,uint256,uint256)"(
      _pool: string,
      _borrower: string,
      _amount: BigNumberish,
      _term: BigNumberish,
      _apy: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    creditAgency(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "creditAgency()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    creditOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "creditOracle()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    debtTokenImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "debtTokenImplementation()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    debtTokens(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "debtTokens(address)"(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ftlAgency(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ftlAgency()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _ftlAgency: string,
      _liquidator: string,
      _creditOracle: string,
      _borrowingMutex: string,
      _creditAgency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address,address,address)"(
      _ftlAgency: string,
      _liquidator: string,
      _creditOracle: string,
      _borrowingMutex: string,
      _creditAgency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isDebtToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isDebtToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isInitialized()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isLegacyLoanToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isLegacyLoanToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isLoanToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isLoanToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "liquidator()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    loanTokenImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "loanTokenImplementation()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setAdmin()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBorrowingMutex(
      _mutex: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setBorrowingMutex(address)"(
      _mutex: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCreditAgency(
      _creditAgency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setCreditAgency(address)"(
      _creditAgency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCreditOracle(
      _creditOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setCreditOracle(address)"(
      _creditOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDebtTokenImplementation(
      _implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setDebtTokenImplementation(address)"(
      _implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFixedTermLoanAgency(
      _ftlAgency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setFixedTermLoanAgency(address)"(
      _ftlAgency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIsLoanToken(
      loanToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setIsLoanToken(address)"(
      loanToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLoanTokenImplementation(
      _implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setLoanTokenImplementation(address)"(
      _implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
