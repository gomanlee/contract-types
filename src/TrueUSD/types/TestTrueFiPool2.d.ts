/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TestTrueFiPool2Interface extends ethers.utils.Interface {
  functions: {
    "TOLERATED_SLIPPAGE()": FunctionFragment;
    "TOLERATED_STRATEGY_LOSS()": FunctionFragment;
    "VERSION()": FunctionFragment;
    "addDebt(address,uint256)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "averageExitPenalty(uint256,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "beneficiary()": FunctionFragment;
    "borrow(uint256)": FunctionFragment;
    "claimOwnership()": FunctionFragment;
    "claimableFees()": FunctionFragment;
    "collectFees()": FunctionFragment;
    "creditAgency()": FunctionFragment;
    "creditValue()": FunctionFragment;
    "currencyBalance()": FunctionFragment;
    "debtValue()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "deficitValue()": FunctionFragment;
    "flush(uint256)": FunctionFragment;
    "ftlAgency()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initialize(address,address,address,address,address)": FunctionFragment;
    "integrateAtPoint(uint256)": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "join(uint256)": FunctionFragment;
    "joiningFee()": FunctionFragment;
    "lender()": FunctionFragment;
    "liquidExit(uint256)": FunctionFragment;
    "liquidExitPenalty(uint256)": FunctionFragment;
    "liquidRatio(uint256)": FunctionFragment;
    "liquidValue()": FunctionFragment;
    "liquidateDebt(address)": FunctionFragment;
    "liquidateLegacyLoan(address)": FunctionFragment;
    "loanFactory()": FunctionFragment;
    "loansValue()": FunctionFragment;
    "name()": FunctionFragment;
    "oracle()": FunctionFragment;
    "owner()": FunctionFragment;
    "pauseStatus()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "poolValue()": FunctionFragment;
    "pull(uint256)": FunctionFragment;
    "reclaimDeficit(address)": FunctionFragment;
    "reclaimLegacyDeficit(address)": FunctionFragment;
    "repay(uint256)": FunctionFragment;
    "safu()": FunctionFragment;
    "setBeneficiary(address)": FunctionFragment;
    "setCreditAgency(address)": FunctionFragment;
    "setFixedTermLoanAgency(address)": FunctionFragment;
    "setJoiningFee(uint256)": FunctionFragment;
    "setLender(address)": FunctionFragment;
    "setLoanFactory(address)": FunctionFragment;
    "setOracle(address)": FunctionFragment;
    "setPauseStatus(bool)": FunctionFragment;
    "setSafuAddress(address)": FunctionFragment;
    "singleBorrowerInitialize(address,address,address,address,address,string,string)": FunctionFragment;
    "strategy()": FunctionFragment;
    "strategyValue()": FunctionFragment;
    "switchStrategy(address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "token()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "TOLERATED_SLIPPAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOLERATED_STRATEGY_LOSS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addDebt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "averageExitPenalty",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "beneficiary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimableFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creditAgency",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creditValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currencyBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "debtValue", values?: undefined): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deficitValue",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "flush", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "ftlAgency", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "integrateAtPoint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "join", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "joiningFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lender", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "liquidExit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidExitPenalty",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateDebt",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateLegacyLoan",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "loanFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "loansValue",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "poolValue", values?: undefined): string;
  encodeFunctionData(functionFragment: "pull", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "reclaimDeficit",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "reclaimLegacyDeficit",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "repay", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "safu", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setBeneficiary",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCreditAgency",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFixedTermLoanAgency",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setJoiningFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setLender", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setLoanFactory",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setOracle", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setPauseStatus",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setSafuAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "singleBorrowerInitialize",
    values: [string, string, string, string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "strategy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "strategyValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "switchStrategy",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "TOLERATED_SLIPPAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOLERATED_STRATEGY_LOSS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addDebt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "averageExitPenalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "beneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimableFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditAgency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currencyBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "debtValue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deficitValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "flush", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ftlAgency", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "integrateAtPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "join", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joiningFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lender", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidExit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidExitPenalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateLegacyLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loanFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "loansValue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolValue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pull", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reclaimDeficit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reclaimLegacyDeficit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "safu", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCreditAgency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFixedTermLoanAgency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setJoiningFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setLender", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLoanFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPauseStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSafuAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "singleBorrowerInitialize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "strategy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "strategyValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "switchStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "BeneficiaryChanged(address)": EventFragment;
    "Borrow(address,uint256)": EventFragment;
    "Collected(address,uint256)": EventFragment;
    "CreditAgencyChanged(address)": EventFragment;
    "DebtAdded(address,uint256)": EventFragment;
    "DeficitReclaimed(address,uint256)": EventFragment;
    "Exited(address,uint256)": EventFragment;
    "FixedTermLoanAgencyChanged(address)": EventFragment;
    "Flushed(uint256)": EventFragment;
    "Joined(address,uint256,uint256)": EventFragment;
    "JoiningFeeChanged(uint256)": EventFragment;
    "LoanFactoryChanged(address)": EventFragment;
    "OracleChanged(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PauseStatusChanged(bool)": EventFragment;
    "Pulled(uint256)": EventFragment;
    "Repaid(address,uint256)": EventFragment;
    "SafuChanged(address)": EventFragment;
    "StrategySwitched(address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeneficiaryChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Borrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Collected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreditAgencyChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DebtAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeficitReclaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Exited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FixedTermLoanAgencyChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Flushed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Joined"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JoiningFeeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoanFactoryChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PauseStatusChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Pulled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Repaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SafuChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategySwitched"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class TestTrueFiPool2 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TestTrueFiPool2Interface;

  functions: {
    TOLERATED_SLIPPAGE(overrides?: CallOverrides): Promise<[number]>;

    "TOLERATED_SLIPPAGE()"(overrides?: CallOverrides): Promise<[number]>;

    TOLERATED_STRATEGY_LOSS(overrides?: CallOverrides): Promise<[number]>;

    "TOLERATED_STRATEGY_LOSS()"(overrides?: CallOverrides): Promise<[number]>;

    VERSION(overrides?: CallOverrides): Promise<[number]>;

    "VERSION()"(overrides?: CallOverrides): Promise<[number]>;

    addDebt(
      debtToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addDebt(address,uint256)"(
      debtToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    averageExitPenalty(
      from: BigNumberish,
      to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "averageExitPenalty(uint256,uint256)"(
      from: BigNumberish,
      to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    beneficiary(overrides?: CallOverrides): Promise<[string]>;

    "beneficiary()"(overrides?: CallOverrides): Promise<[string]>;

    borrow(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "borrow(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimableFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    "claimableFees()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    collectFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "collectFees()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    creditAgency(overrides?: CallOverrides): Promise<[string]>;

    "creditAgency()"(overrides?: CallOverrides): Promise<[string]>;

    creditValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    "creditValue()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    currencyBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    "currencyBalance()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    debtValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    "debtValue()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    "decimals()"(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deficitValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    "deficitValue()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    flush(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "flush(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ftlAgency(overrides?: CallOverrides): Promise<[string]>;

    "ftlAgency()"(overrides?: CallOverrides): Promise<[string]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _token: string,
      _ftlAgency: string,
      _safu: string,
      _loanFactory: string,
      __owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(address,address,address,address,address)"(
      _token: string,
      _ftlAgency: string,
      _safu: string,
      _loanFactory: string,
      __owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    integrateAtPoint(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "integrateAtPoint(uint256)"(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    "isInitialized()"(overrides?: CallOverrides): Promise<[boolean]>;

    join(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "join(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    joiningFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "joiningFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    lender(overrides?: CallOverrides): Promise<[string]>;

    "lender()"(overrides?: CallOverrides): Promise<[string]>;

    liquidExit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "liquidExit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidExitPenalty(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "liquidExitPenalty(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    liquidRatio(
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "liquidRatio(uint256)"(
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    liquidValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    "liquidValue()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidateDebt(
      debtToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "liquidateDebt(address)"(
      debtToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidateLegacyLoan(
      loan: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "liquidateLegacyLoan(address)"(
      loan: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    loanFactory(overrides?: CallOverrides): Promise<[string]>;

    "loanFactory()"(overrides?: CallOverrides): Promise<[string]>;

    loansValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    "loansValue()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    "oracle()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pauseStatus(overrides?: CallOverrides): Promise<[boolean]>;

    "pauseStatus()"(overrides?: CallOverrides): Promise<[boolean]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<[string]>;

    poolValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    "poolValue()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    pull(
      minTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "pull(uint256)"(
      minTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reclaimDeficit(
      debt: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "reclaimDeficit(address)"(
      debt: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reclaimLegacyDeficit(
      loan: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "reclaimLegacyDeficit(address)"(
      loan: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repay(
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "repay(uint256)"(
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safu(overrides?: CallOverrides): Promise<[string]>;

    "safu()"(overrides?: CallOverrides): Promise<[string]>;

    setBeneficiary(
      newBeneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setBeneficiary(address)"(
      newBeneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCreditAgency(
      _creditAgency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setCreditAgency(address)"(
      _creditAgency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFixedTermLoanAgency(
      _ftlAgency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setFixedTermLoanAgency(address)"(
      _ftlAgency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setJoiningFee(
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setJoiningFee(uint256)"(
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLender(
      _lender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setLender(address)"(
      _lender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLoanFactory(
      _loanFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setLoanFactory(address)"(
      _loanFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOracle(
      newOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setOracle(address)"(
      newOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPauseStatus(
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setPauseStatus(bool)"(
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSafuAddress(
      _safu: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setSafuAddress(address)"(
      _safu: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    singleBorrowerInitialize(
      _token: string,
      _ftlAgency: string,
      _safu: string,
      _loanFactory: string,
      __owner: string,
      borrowerName: string,
      borrowerSymbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "singleBorrowerInitialize(address,address,address,address,address,string,string)"(
      _token: string,
      _ftlAgency: string,
      _safu: string,
      _loanFactory: string,
      __owner: string,
      borrowerName: string,
      borrowerSymbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    strategy(overrides?: CallOverrides): Promise<[string]>;

    "strategy()"(overrides?: CallOverrides): Promise<[string]>;

    strategyValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    "strategyValue()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    switchStrategy(
      newStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "switchStrategy(address)"(
      newStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    "symbol()"(overrides?: CallOverrides): Promise<[string]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    "token()"(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  TOLERATED_SLIPPAGE(overrides?: CallOverrides): Promise<number>;

  "TOLERATED_SLIPPAGE()"(overrides?: CallOverrides): Promise<number>;

  TOLERATED_STRATEGY_LOSS(overrides?: CallOverrides): Promise<number>;

  "TOLERATED_STRATEGY_LOSS()"(overrides?: CallOverrides): Promise<number>;

  VERSION(overrides?: CallOverrides): Promise<number>;

  "VERSION()"(overrides?: CallOverrides): Promise<number>;

  addDebt(
    debtToken: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addDebt(address,uint256)"(
    debtToken: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  averageExitPenalty(
    from: BigNumberish,
    to: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "averageExitPenalty(uint256,uint256)"(
    from: BigNumberish,
    to: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  beneficiary(overrides?: CallOverrides): Promise<string>;

  "beneficiary()"(overrides?: CallOverrides): Promise<string>;

  borrow(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "borrow(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimableFees(overrides?: CallOverrides): Promise<BigNumber>;

  "claimableFees()"(overrides?: CallOverrides): Promise<BigNumber>;

  collectFees(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "collectFees()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  creditAgency(overrides?: CallOverrides): Promise<string>;

  "creditAgency()"(overrides?: CallOverrides): Promise<string>;

  creditValue(overrides?: CallOverrides): Promise<BigNumber>;

  "creditValue()"(overrides?: CallOverrides): Promise<BigNumber>;

  currencyBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "currencyBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  debtValue(overrides?: CallOverrides): Promise<BigNumber>;

  "debtValue()"(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "decreaseAllowance(address,uint256)"(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deficitValue(overrides?: CallOverrides): Promise<BigNumber>;

  "deficitValue()"(overrides?: CallOverrides): Promise<BigNumber>;

  flush(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "flush(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ftlAgency(overrides?: CallOverrides): Promise<string>;

  "ftlAgency()"(overrides?: CallOverrides): Promise<string>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "increaseAllowance(address,uint256)"(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _token: string,
    _ftlAgency: string,
    _safu: string,
    _loanFactory: string,
    __owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(address,address,address,address,address)"(
    _token: string,
    _ftlAgency: string,
    _safu: string,
    _loanFactory: string,
    __owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  integrateAtPoint(
    x: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "integrateAtPoint(uint256)"(
    x: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  "isInitialized()"(overrides?: CallOverrides): Promise<boolean>;

  join(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "join(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  joiningFee(overrides?: CallOverrides): Promise<BigNumber>;

  "joiningFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  lender(overrides?: CallOverrides): Promise<string>;

  "lender()"(overrides?: CallOverrides): Promise<string>;

  liquidExit(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "liquidExit(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidExitPenalty(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "liquidExitPenalty(uint256)"(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  liquidRatio(
    afterAmountLent: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "liquidRatio(uint256)"(
    afterAmountLent: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  liquidValue(overrides?: CallOverrides): Promise<BigNumber>;

  "liquidValue()"(overrides?: CallOverrides): Promise<BigNumber>;

  liquidateDebt(
    debtToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "liquidateDebt(address)"(
    debtToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidateLegacyLoan(
    loan: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "liquidateLegacyLoan(address)"(
    loan: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  loanFactory(overrides?: CallOverrides): Promise<string>;

  "loanFactory()"(overrides?: CallOverrides): Promise<string>;

  loansValue(overrides?: CallOverrides): Promise<BigNumber>;

  "loansValue()"(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  oracle(overrides?: CallOverrides): Promise<string>;

  "oracle()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pauseStatus(overrides?: CallOverrides): Promise<boolean>;

  "pauseStatus()"(overrides?: CallOverrides): Promise<boolean>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  "pendingOwner()"(overrides?: CallOverrides): Promise<string>;

  poolValue(overrides?: CallOverrides): Promise<BigNumber>;

  "poolValue()"(overrides?: CallOverrides): Promise<BigNumber>;

  pull(
    minTokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "pull(uint256)"(
    minTokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reclaimDeficit(
    debt: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "reclaimDeficit(address)"(
    debt: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reclaimLegacyDeficit(
    loan: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "reclaimLegacyDeficit(address)"(
    loan: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repay(
    currencyAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "repay(uint256)"(
    currencyAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safu(overrides?: CallOverrides): Promise<string>;

  "safu()"(overrides?: CallOverrides): Promise<string>;

  setBeneficiary(
    newBeneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setBeneficiary(address)"(
    newBeneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCreditAgency(
    _creditAgency: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setCreditAgency(address)"(
    _creditAgency: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFixedTermLoanAgency(
    _ftlAgency: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setFixedTermLoanAgency(address)"(
    _ftlAgency: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setJoiningFee(
    fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setJoiningFee(uint256)"(
    fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLender(
    _lender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setLender(address)"(
    _lender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLoanFactory(
    _loanFactory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setLoanFactory(address)"(
    _loanFactory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOracle(
    newOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setOracle(address)"(
    newOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPauseStatus(
    status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setPauseStatus(bool)"(
    status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSafuAddress(
    _safu: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setSafuAddress(address)"(
    _safu: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  singleBorrowerInitialize(
    _token: string,
    _ftlAgency: string,
    _safu: string,
    _loanFactory: string,
    __owner: string,
    borrowerName: string,
    borrowerSymbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "singleBorrowerInitialize(address,address,address,address,address,string,string)"(
    _token: string,
    _ftlAgency: string,
    _safu: string,
    _loanFactory: string,
    __owner: string,
    borrowerName: string,
    borrowerSymbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  strategy(overrides?: CallOverrides): Promise<string>;

  "strategy()"(overrides?: CallOverrides): Promise<string>;

  strategyValue(overrides?: CallOverrides): Promise<BigNumber>;

  "strategyValue()"(overrides?: CallOverrides): Promise<BigNumber>;

  switchStrategy(
    newStrategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "switchStrategy(address)"(
    newStrategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    TOLERATED_SLIPPAGE(overrides?: CallOverrides): Promise<number>;

    "TOLERATED_SLIPPAGE()"(overrides?: CallOverrides): Promise<number>;

    TOLERATED_STRATEGY_LOSS(overrides?: CallOverrides): Promise<number>;

    "TOLERATED_STRATEGY_LOSS()"(overrides?: CallOverrides): Promise<number>;

    VERSION(overrides?: CallOverrides): Promise<number>;

    "VERSION()"(overrides?: CallOverrides): Promise<number>;

    addDebt(
      debtToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addDebt(address,uint256)"(
      debtToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    averageExitPenalty(
      from: BigNumberish,
      to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "averageExitPenalty(uint256,uint256)"(
      from: BigNumberish,
      to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beneficiary(overrides?: CallOverrides): Promise<string>;

    "beneficiary()"(overrides?: CallOverrides): Promise<string>;

    borrow(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "borrow(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimOwnership(overrides?: CallOverrides): Promise<void>;

    "claimOwnership()"(overrides?: CallOverrides): Promise<void>;

    claimableFees(overrides?: CallOverrides): Promise<BigNumber>;

    "claimableFees()"(overrides?: CallOverrides): Promise<BigNumber>;

    collectFees(overrides?: CallOverrides): Promise<void>;

    "collectFees()"(overrides?: CallOverrides): Promise<void>;

    creditAgency(overrides?: CallOverrides): Promise<string>;

    "creditAgency()"(overrides?: CallOverrides): Promise<string>;

    creditValue(overrides?: CallOverrides): Promise<BigNumber>;

    "creditValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    currencyBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "currencyBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    debtValue(overrides?: CallOverrides): Promise<BigNumber>;

    "debtValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deficitValue(overrides?: CallOverrides): Promise<BigNumber>;

    "deficitValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    flush(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "flush(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ftlAgency(overrides?: CallOverrides): Promise<string>;

    "ftlAgency()"(overrides?: CallOverrides): Promise<string>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _token: string,
      _ftlAgency: string,
      _safu: string,
      _loanFactory: string,
      __owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address,address,address)"(
      _token: string,
      _ftlAgency: string,
      _safu: string,
      _loanFactory: string,
      __owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    integrateAtPoint(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "integrateAtPoint(uint256)"(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    "isInitialized()"(overrides?: CallOverrides): Promise<boolean>;

    join(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "join(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    joiningFee(overrides?: CallOverrides): Promise<BigNumber>;

    "joiningFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    lender(overrides?: CallOverrides): Promise<string>;

    "lender()"(overrides?: CallOverrides): Promise<string>;

    liquidExit(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "liquidExit(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidExitPenalty(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "liquidExitPenalty(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidRatio(
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "liquidRatio(uint256)"(
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidValue(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    liquidateDebt(debtToken: string, overrides?: CallOverrides): Promise<void>;

    "liquidateDebt(address)"(
      debtToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidateLegacyLoan(loan: string, overrides?: CallOverrides): Promise<void>;

    "liquidateLegacyLoan(address)"(
      loan: string,
      overrides?: CallOverrides
    ): Promise<void>;

    loanFactory(overrides?: CallOverrides): Promise<string>;

    "loanFactory()"(overrides?: CallOverrides): Promise<string>;

    loansValue(overrides?: CallOverrides): Promise<BigNumber>;

    "loansValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    oracle(overrides?: CallOverrides): Promise<string>;

    "oracle()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pauseStatus(overrides?: CallOverrides): Promise<boolean>;

    "pauseStatus()"(overrides?: CallOverrides): Promise<boolean>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<string>;

    poolValue(overrides?: CallOverrides): Promise<BigNumber>;

    "poolValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    pull(
      minTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "pull(uint256)"(
      minTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    reclaimDeficit(debt: string, overrides?: CallOverrides): Promise<void>;

    "reclaimDeficit(address)"(
      debt: string,
      overrides?: CallOverrides
    ): Promise<void>;

    reclaimLegacyDeficit(
      loan: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "reclaimLegacyDeficit(address)"(
      loan: string,
      overrides?: CallOverrides
    ): Promise<void>;

    repay(
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "repay(uint256)"(
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    safu(overrides?: CallOverrides): Promise<string>;

    "safu()"(overrides?: CallOverrides): Promise<string>;

    setBeneficiary(
      newBeneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBeneficiary(address)"(
      newBeneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCreditAgency(
      _creditAgency: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCreditAgency(address)"(
      _creditAgency: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFixedTermLoanAgency(
      _ftlAgency: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFixedTermLoanAgency(address)"(
      _ftlAgency: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setJoiningFee(fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setJoiningFee(uint256)"(
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLender(_lender: string, overrides?: CallOverrides): Promise<void>;

    "setLender(address)"(
      _lender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLoanFactory(
      _loanFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLoanFactory(address)"(
      _loanFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOracle(newOracle: string, overrides?: CallOverrides): Promise<void>;

    "setOracle(address)"(
      newOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPauseStatus(status: boolean, overrides?: CallOverrides): Promise<void>;

    "setPauseStatus(bool)"(
      status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setSafuAddress(_safu: string, overrides?: CallOverrides): Promise<void>;

    "setSafuAddress(address)"(
      _safu: string,
      overrides?: CallOverrides
    ): Promise<void>;

    singleBorrowerInitialize(
      _token: string,
      _ftlAgency: string,
      _safu: string,
      _loanFactory: string,
      __owner: string,
      borrowerName: string,
      borrowerSymbol: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "singleBorrowerInitialize(address,address,address,address,address,string,string)"(
      _token: string,
      _ftlAgency: string,
      _safu: string,
      _loanFactory: string,
      __owner: string,
      borrowerName: string,
      borrowerSymbol: string,
      overrides?: CallOverrides
    ): Promise<void>;

    strategy(overrides?: CallOverrides): Promise<string>;

    "strategy()"(overrides?: CallOverrides): Promise<string>;

    strategyValue(overrides?: CallOverrides): Promise<BigNumber>;

    "strategyValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    switchStrategy(
      newStrategy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "switchStrategy(address)"(
      newStrategy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    BeneficiaryChanged(
      newBeneficiary: null
    ): TypedEventFilter<[string], { newBeneficiary: string }>;

    Borrow(
      borrower: null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { borrower: string; amount: BigNumber }
    >;

    Collected(
      beneficiary: string | null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { beneficiary: string; amount: BigNumber }
    >;

    CreditAgencyChanged(
      newCreditAgency: null
    ): TypedEventFilter<[string], { newCreditAgency: string }>;

    DebtAdded(
      debtToken: null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { debtToken: string; amount: BigNumber }
    >;

    DeficitReclaimed(
      debt: null,
      deficit: null
    ): TypedEventFilter<
      [string, BigNumber],
      { debt: string; deficit: BigNumber }
    >;

    Exited(
      staker: string | null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { staker: string; amount: BigNumber }
    >;

    FixedTermLoanAgencyChanged(
      newFTLAgency: null
    ): TypedEventFilter<[string], { newFTLAgency: string }>;

    Flushed(
      currencyAmount: null
    ): TypedEventFilter<[BigNumber], { currencyAmount: BigNumber }>;

    Joined(
      staker: string | null,
      deposited: null,
      minted: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { staker: string; deposited: BigNumber; minted: BigNumber }
    >;

    JoiningFeeChanged(
      newFee: null
    ): TypedEventFilter<[BigNumber], { newFee: BigNumber }>;

    LoanFactoryChanged(
      newLoanFactory: null
    ): TypedEventFilter<[string], { newLoanFactory: string }>;

    OracleChanged(
      newOracle: null
    ): TypedEventFilter<[string], { newOracle: string }>;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    PauseStatusChanged(
      pauseStatus: null
    ): TypedEventFilter<[boolean], { pauseStatus: boolean }>;

    Pulled(
      minTokenAmount: null
    ): TypedEventFilter<[BigNumber], { minTokenAmount: BigNumber }>;

    Repaid(
      payer: string | null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { payer: string; amount: BigNumber }
    >;

    SafuChanged(newSafu: null): TypedEventFilter<[string], { newSafu: string }>;

    StrategySwitched(
      newStrategy: null
    ): TypedEventFilter<[string], { newStrategy: string }>;

    Transfer(
      from: string | null,
      to: string | null,
      value: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;
  };

  estimateGas: {
    TOLERATED_SLIPPAGE(overrides?: CallOverrides): Promise<BigNumber>;

    "TOLERATED_SLIPPAGE()"(overrides?: CallOverrides): Promise<BigNumber>;

    TOLERATED_STRATEGY_LOSS(overrides?: CallOverrides): Promise<BigNumber>;

    "TOLERATED_STRATEGY_LOSS()"(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    "VERSION()"(overrides?: CallOverrides): Promise<BigNumber>;

    addDebt(
      debtToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addDebt(address,uint256)"(
      debtToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    averageExitPenalty(
      from: BigNumberish,
      to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "averageExitPenalty(uint256,uint256)"(
      from: BigNumberish,
      to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beneficiary(overrides?: CallOverrides): Promise<BigNumber>;

    "beneficiary()"(overrides?: CallOverrides): Promise<BigNumber>;

    borrow(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "borrow(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimableFees(overrides?: CallOverrides): Promise<BigNumber>;

    "claimableFees()"(overrides?: CallOverrides): Promise<BigNumber>;

    collectFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "collectFees()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    creditAgency(overrides?: CallOverrides): Promise<BigNumber>;

    "creditAgency()"(overrides?: CallOverrides): Promise<BigNumber>;

    creditValue(overrides?: CallOverrides): Promise<BigNumber>;

    "creditValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    currencyBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "currencyBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    debtValue(overrides?: CallOverrides): Promise<BigNumber>;

    "debtValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deficitValue(overrides?: CallOverrides): Promise<BigNumber>;

    "deficitValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    flush(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "flush(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ftlAgency(overrides?: CallOverrides): Promise<BigNumber>;

    "ftlAgency()"(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _token: string,
      _ftlAgency: string,
      _safu: string,
      _loanFactory: string,
      __owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(address,address,address,address,address)"(
      _token: string,
      _ftlAgency: string,
      _safu: string,
      _loanFactory: string,
      __owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    integrateAtPoint(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "integrateAtPoint(uint256)"(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    "isInitialized()"(overrides?: CallOverrides): Promise<BigNumber>;

    join(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "join(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    joiningFee(overrides?: CallOverrides): Promise<BigNumber>;

    "joiningFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    lender(overrides?: CallOverrides): Promise<BigNumber>;

    "lender()"(overrides?: CallOverrides): Promise<BigNumber>;

    liquidExit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "liquidExit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidExitPenalty(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "liquidExitPenalty(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidRatio(
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "liquidRatio(uint256)"(
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidValue(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    liquidateDebt(
      debtToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "liquidateDebt(address)"(
      debtToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidateLegacyLoan(
      loan: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "liquidateLegacyLoan(address)"(
      loan: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    loanFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "loanFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    loansValue(overrides?: CallOverrides): Promise<BigNumber>;

    "loansValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    "oracle()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pauseStatus(overrides?: CallOverrides): Promise<BigNumber>;

    "pauseStatus()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolValue(overrides?: CallOverrides): Promise<BigNumber>;

    "poolValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    pull(
      minTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "pull(uint256)"(
      minTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reclaimDeficit(
      debt: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "reclaimDeficit(address)"(
      debt: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reclaimLegacyDeficit(
      loan: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "reclaimLegacyDeficit(address)"(
      loan: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repay(
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "repay(uint256)"(
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safu(overrides?: CallOverrides): Promise<BigNumber>;

    "safu()"(overrides?: CallOverrides): Promise<BigNumber>;

    setBeneficiary(
      newBeneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setBeneficiary(address)"(
      newBeneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCreditAgency(
      _creditAgency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setCreditAgency(address)"(
      _creditAgency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFixedTermLoanAgency(
      _ftlAgency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setFixedTermLoanAgency(address)"(
      _ftlAgency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setJoiningFee(
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setJoiningFee(uint256)"(
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLender(
      _lender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setLender(address)"(
      _lender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLoanFactory(
      _loanFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setLoanFactory(address)"(
      _loanFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOracle(
      newOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setOracle(address)"(
      newOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPauseStatus(
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setPauseStatus(bool)"(
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSafuAddress(
      _safu: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setSafuAddress(address)"(
      _safu: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    singleBorrowerInitialize(
      _token: string,
      _ftlAgency: string,
      _safu: string,
      _loanFactory: string,
      __owner: string,
      borrowerName: string,
      borrowerSymbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "singleBorrowerInitialize(address,address,address,address,address,string,string)"(
      _token: string,
      _ftlAgency: string,
      _safu: string,
      _loanFactory: string,
      __owner: string,
      borrowerName: string,
      borrowerSymbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    strategy(overrides?: CallOverrides): Promise<BigNumber>;

    "strategy()"(overrides?: CallOverrides): Promise<BigNumber>;

    strategyValue(overrides?: CallOverrides): Promise<BigNumber>;

    "strategyValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    switchStrategy(
      newStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "switchStrategy(address)"(
      newStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    TOLERATED_SLIPPAGE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "TOLERATED_SLIPPAGE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TOLERATED_STRATEGY_LOSS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "TOLERATED_STRATEGY_LOSS()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "VERSION()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addDebt(
      debtToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addDebt(address,uint256)"(
      debtToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    averageExitPenalty(
      from: BigNumberish,
      to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "averageExitPenalty(uint256,uint256)"(
      from: BigNumberish,
      to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beneficiary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "beneficiary()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrow(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "borrow(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimableFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "claimableFees()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collectFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "collectFees()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    creditAgency(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "creditAgency()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    creditValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "creditValue()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currencyBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currencyBalance()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    debtValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "debtValue()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deficitValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "deficitValue()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    flush(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "flush(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ftlAgency(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ftlAgency()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _token: string,
      _ftlAgency: string,
      _safu: string,
      _loanFactory: string,
      __owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address,address,address)"(
      _token: string,
      _ftlAgency: string,
      _safu: string,
      _loanFactory: string,
      __owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    integrateAtPoint(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "integrateAtPoint(uint256)"(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isInitialized()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    join(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "join(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    joiningFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "joiningFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lender(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lender()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidExit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "liquidExit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidExitPenalty(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "liquidExitPenalty(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidRatio(
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "liquidRatio(uint256)"(
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "liquidValue()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidateDebt(
      debtToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "liquidateDebt(address)"(
      debtToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidateLegacyLoan(
      loan: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "liquidateLegacyLoan(address)"(
      loan: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    loanFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "loanFactory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    loansValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "loansValue()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "oracle()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauseStatus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pauseStatus()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolValue()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pull(
      minTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "pull(uint256)"(
      minTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reclaimDeficit(
      debt: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "reclaimDeficit(address)"(
      debt: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reclaimLegacyDeficit(
      loan: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "reclaimLegacyDeficit(address)"(
      loan: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repay(
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "repay(uint256)"(
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safu(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "safu()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBeneficiary(
      newBeneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setBeneficiary(address)"(
      newBeneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCreditAgency(
      _creditAgency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setCreditAgency(address)"(
      _creditAgency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFixedTermLoanAgency(
      _ftlAgency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setFixedTermLoanAgency(address)"(
      _ftlAgency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setJoiningFee(
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setJoiningFee(uint256)"(
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLender(
      _lender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setLender(address)"(
      _lender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLoanFactory(
      _loanFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setLoanFactory(address)"(
      _loanFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOracle(
      newOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setOracle(address)"(
      newOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPauseStatus(
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setPauseStatus(bool)"(
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSafuAddress(
      _safu: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setSafuAddress(address)"(
      _safu: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    singleBorrowerInitialize(
      _token: string,
      _ftlAgency: string,
      _safu: string,
      _loanFactory: string,
      __owner: string,
      borrowerName: string,
      borrowerSymbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "singleBorrowerInitialize(address,address,address,address,address,string,string)"(
      _token: string,
      _ftlAgency: string,
      _safu: string,
      _loanFactory: string,
      __owner: string,
      borrowerName: string,
      borrowerSymbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    strategy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "strategy()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    strategyValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "strategyValue()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    switchStrategy(
      newStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "switchStrategy(address)"(
      newStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
