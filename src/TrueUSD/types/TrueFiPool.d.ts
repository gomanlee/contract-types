/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TrueFiPoolInterface extends ethers.utils.Interface {
  functions: {
    "_crvOracle()": FunctionFragment;
    "_curveGauge()": FunctionFragment;
    "_curvePool()": FunctionFragment;
    "_lender()": FunctionFragment;
    "_lender2()": FunctionFragment;
    "_minter()": FunctionFragment;
    "_uniRouter()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "borrow(uint256,uint256)": FunctionFragment;
    "calcTokenAmount(uint256)": FunctionFragment;
    "claimableFees()": FunctionFragment;
    "collectCrv()": FunctionFragment;
    "collectFees(address)": FunctionFragment;
    "crvBalance()": FunctionFragment;
    "crvValue()": FunctionFragment;
    "currencyBalance()": FunctionFragment;
    "currencyToken()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "deficitValue()": FunctionFragment;
    "exit(uint256)": FunctionFragment;
    "flush(uint256)": FunctionFragment;
    "fundsManager()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "join(uint256)": FunctionFragment;
    "joiningFee()": FunctionFragment;
    "liquidExit(uint256)": FunctionFragment;
    "liquidExitPenalty(uint256)": FunctionFragment;
    "liquidValue()": FunctionFragment;
    "liquidate(address)": FunctionFragment;
    "loansValue()": FunctionFragment;
    "name()": FunctionFragment;
    "oracle()": FunctionFragment;
    "owner()": FunctionFragment;
    "pauseStatus()": FunctionFragment;
    "poolValue()": FunctionFragment;
    "pull(uint256,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "repay(uint256)": FunctionFragment;
    "safu()": FunctionFragment;
    "sellCrv(uint256,uint256,address[])": FunctionFragment;
    "setCrvOracle(address)": FunctionFragment;
    "setFundsManager(address)": FunctionFragment;
    "setJoiningFee(uint256)": FunctionFragment;
    "setLender2(address)": FunctionFragment;
    "setPauseStatus(bool)": FunctionFragment;
    "setSafuAddress(address)": FunctionFragment;
    "setTruOracle(address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "token()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateNameAndSymbolToLegacy()": FunctionFragment;
    "yTokenBalance()": FunctionFragment;
    "yTokenValue()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_crvOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_curveGauge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_curvePool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_lender", values?: undefined): string;
  encodeFunctionData(functionFragment: "_lender2", values?: undefined): string;
  encodeFunctionData(functionFragment: "_minter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_uniRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcTokenAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectCrv",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "collectFees", values: [string]): string;
  encodeFunctionData(
    functionFragment: "crvBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "crvValue", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "currencyBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currencyToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deficitValue",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "exit", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "flush", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "fundsManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "join", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "joiningFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidExit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidExitPenalty",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidValue",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "liquidate", values: [string]): string;
  encodeFunctionData(
    functionFragment: "loansValue",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseStatus",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "poolValue", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pull",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "repay", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "safu", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sellCrv",
    values: [BigNumberish, BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setCrvOracle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFundsManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setJoiningFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setLender2", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setPauseStatus",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setSafuAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTruOracle",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateNameAndSymbolToLegacy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "yTokenBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "yTokenValue",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "_crvOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_curveGauge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_curvePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_lender", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_lender2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_minter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_uniRouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calcTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimableFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collectCrv", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "crvBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "crvValue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currencyBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currencyToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deficitValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flush", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundsManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "join", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joiningFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidExit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidExitPenalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "loansValue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolValue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pull", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "safu", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sellCrv", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCrvOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFundsManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setJoiningFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setLender2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPauseStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSafuAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTruOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateNameAndSymbolToLegacy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "yTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "yTokenValue",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Borrow(address,uint256,uint256)": EventFragment;
    "Collected(address,uint256)": EventFragment;
    "CrvOracleChanged(address)": EventFragment;
    "Exited(address,uint256)": EventFragment;
    "Flushed(uint256)": EventFragment;
    "FundsManagerChanged(address)": EventFragment;
    "Joined(address,uint256,uint256)": EventFragment;
    "JoiningFeeChanged(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PauseStatusChanged(bool)": EventFragment;
    "Pulled(uint256)": EventFragment;
    "Repaid(address,uint256)": EventFragment;
    "SafuChanged(address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "TruOracleChanged(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Borrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Collected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CrvOracleChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Exited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Flushed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsManagerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Joined"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JoiningFeeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PauseStatusChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Pulled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Repaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SafuChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TruOracleChanged"): EventFragment;
}

export class TrueFiPool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TrueFiPoolInterface;

  functions: {
    _crvOracle(overrides?: CallOverrides): Promise<[string]>;

    "_crvOracle()"(overrides?: CallOverrides): Promise<[string]>;

    _curveGauge(overrides?: CallOverrides): Promise<[string]>;

    "_curveGauge()"(overrides?: CallOverrides): Promise<[string]>;

    _curvePool(overrides?: CallOverrides): Promise<[string]>;

    "_curvePool()"(overrides?: CallOverrides): Promise<[string]>;

    _lender(overrides?: CallOverrides): Promise<[string]>;

    "_lender()"(overrides?: CallOverrides): Promise<[string]>;

    _lender2(overrides?: CallOverrides): Promise<[string]>;

    "_lender2()"(overrides?: CallOverrides): Promise<[string]>;

    _minter(overrides?: CallOverrides): Promise<[string]>;

    "_minter()"(overrides?: CallOverrides): Promise<[string]>;

    _uniRouter(overrides?: CallOverrides): Promise<[string]>;

    "_uniRouter()"(overrides?: CallOverrides): Promise<[string]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "borrow(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "borrow(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calcTokenAmount(
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calcTokenAmount(uint256)"(
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimableFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    "claimableFees()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    collectCrv(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "collectCrv()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collectFees(
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "collectFees(address)"(
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    crvBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    "crvBalance()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    crvValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    "crvValue()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    currencyBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    "currencyBalance()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    currencyToken(overrides?: CallOverrides): Promise<[string]>;

    "currencyToken()"(overrides?: CallOverrides): Promise<[string]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    "decimals()"(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deficitValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    "deficitValue()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    exit(arg0: BigNumberish, overrides?: CallOverrides): Promise<[void]>;

    "exit(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    flush(
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "flush(uint256)"(
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fundsManager(overrides?: CallOverrides): Promise<[string]>;

    "fundsManager()"(overrides?: CallOverrides): Promise<[string]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    "isInitialized()"(overrides?: CallOverrides): Promise<[boolean]>;

    join(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "join(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    joiningFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "joiningFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidExit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "liquidExit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidExitPenalty(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "liquidExitPenalty(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    liquidValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    "liquidValue()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidate(
      loan: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "liquidate(address)"(
      loan: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    loansValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    "loansValue()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    "oracle()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pauseStatus(overrides?: CallOverrides): Promise<[boolean]>;

    "pauseStatus()"(overrides?: CallOverrides): Promise<[boolean]>;

    poolValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    "poolValue()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    pull(
      yAmount: BigNumberish,
      minCurrencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "pull(uint256,uint256)"(
      yAmount: BigNumberish,
      minCurrencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repay(
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "repay(uint256)"(
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safu(overrides?: CallOverrides): Promise<[string]>;

    "safu()"(overrides?: CallOverrides): Promise<[string]>;

    sellCrv(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "sellCrv(uint256,uint256,address[])"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCrvOracle(
      newOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setCrvOracle(address)"(
      newOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFundsManager(
      newFundsManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setFundsManager(address)"(
      newFundsManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setJoiningFee(
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setJoiningFee(uint256)"(
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLender2(
      lender2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setLender2(address)"(
      lender2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPauseStatus(
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setPauseStatus(bool)"(
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSafuAddress(
      _safu: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setSafuAddress(address)"(
      _safu: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTruOracle(
      newOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTruOracle(address)"(
      newOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    "symbol()"(overrides?: CallOverrides): Promise<[string]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    "token()"(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateNameAndSymbolToLegacy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateNameAndSymbolToLegacy()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    yTokenBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    "yTokenBalance()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    yTokenValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    "yTokenValue()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  _crvOracle(overrides?: CallOverrides): Promise<string>;

  "_crvOracle()"(overrides?: CallOverrides): Promise<string>;

  _curveGauge(overrides?: CallOverrides): Promise<string>;

  "_curveGauge()"(overrides?: CallOverrides): Promise<string>;

  _curvePool(overrides?: CallOverrides): Promise<string>;

  "_curvePool()"(overrides?: CallOverrides): Promise<string>;

  _lender(overrides?: CallOverrides): Promise<string>;

  "_lender()"(overrides?: CallOverrides): Promise<string>;

  _lender2(overrides?: CallOverrides): Promise<string>;

  "_lender2()"(overrides?: CallOverrides): Promise<string>;

  _minter(overrides?: CallOverrides): Promise<string>;

  "_minter()"(overrides?: CallOverrides): Promise<string>;

  _uniRouter(overrides?: CallOverrides): Promise<string>;

  "_uniRouter()"(overrides?: CallOverrides): Promise<string>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "borrow(uint256,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "borrow(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calcTokenAmount(
    currencyAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calcTokenAmount(uint256)"(
    currencyAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimableFees(overrides?: CallOverrides): Promise<BigNumber>;

  "claimableFees()"(overrides?: CallOverrides): Promise<BigNumber>;

  collectCrv(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "collectCrv()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collectFees(
    beneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "collectFees(address)"(
    beneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  crvBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "crvBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  crvValue(overrides?: CallOverrides): Promise<BigNumber>;

  "crvValue()"(overrides?: CallOverrides): Promise<BigNumber>;

  currencyBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "currencyBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  currencyToken(overrides?: CallOverrides): Promise<string>;

  "currencyToken()"(overrides?: CallOverrides): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "decreaseAllowance(address,uint256)"(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deficitValue(overrides?: CallOverrides): Promise<BigNumber>;

  "deficitValue()"(overrides?: CallOverrides): Promise<BigNumber>;

  exit(arg0: BigNumberish, overrides?: CallOverrides): Promise<void>;

  "exit(uint256)"(arg0: BigNumberish, overrides?: CallOverrides): Promise<void>;

  flush(
    currencyAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "flush(uint256)"(
    currencyAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fundsManager(overrides?: CallOverrides): Promise<string>;

  "fundsManager()"(overrides?: CallOverrides): Promise<string>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "increaseAllowance(address,uint256)"(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  "isInitialized()"(overrides?: CallOverrides): Promise<boolean>;

  join(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "join(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  joiningFee(overrides?: CallOverrides): Promise<BigNumber>;

  "joiningFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  liquidExit(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "liquidExit(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidExitPenalty(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "liquidExitPenalty(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  liquidValue(overrides?: CallOverrides): Promise<BigNumber>;

  "liquidValue()"(overrides?: CallOverrides): Promise<BigNumber>;

  liquidate(
    loan: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "liquidate(address)"(
    loan: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  loansValue(overrides?: CallOverrides): Promise<BigNumber>;

  "loansValue()"(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  oracle(overrides?: CallOverrides): Promise<string>;

  "oracle()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pauseStatus(overrides?: CallOverrides): Promise<boolean>;

  "pauseStatus()"(overrides?: CallOverrides): Promise<boolean>;

  poolValue(overrides?: CallOverrides): Promise<BigNumber>;

  "poolValue()"(overrides?: CallOverrides): Promise<BigNumber>;

  pull(
    yAmount: BigNumberish,
    minCurrencyAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "pull(uint256,uint256)"(
    yAmount: BigNumberish,
    minCurrencyAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repay(
    currencyAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "repay(uint256)"(
    currencyAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safu(overrides?: CallOverrides): Promise<string>;

  "safu()"(overrides?: CallOverrides): Promise<string>;

  sellCrv(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "sellCrv(uint256,uint256,address[])"(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCrvOracle(
    newOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setCrvOracle(address)"(
    newOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFundsManager(
    newFundsManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setFundsManager(address)"(
    newFundsManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setJoiningFee(
    fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setJoiningFee(uint256)"(
    fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLender2(
    lender2: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setLender2(address)"(
    lender2: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPauseStatus(
    status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setPauseStatus(bool)"(
    status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSafuAddress(
    _safu: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setSafuAddress(address)"(
    _safu: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTruOracle(
    newOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTruOracle(address)"(
    newOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateNameAndSymbolToLegacy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateNameAndSymbolToLegacy()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  yTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "yTokenBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  yTokenValue(overrides?: CallOverrides): Promise<BigNumber>;

  "yTokenValue()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    _crvOracle(overrides?: CallOverrides): Promise<string>;

    "_crvOracle()"(overrides?: CallOverrides): Promise<string>;

    _curveGauge(overrides?: CallOverrides): Promise<string>;

    "_curveGauge()"(overrides?: CallOverrides): Promise<string>;

    _curvePool(overrides?: CallOverrides): Promise<string>;

    "_curvePool()"(overrides?: CallOverrides): Promise<string>;

    _lender(overrides?: CallOverrides): Promise<string>;

    "_lender()"(overrides?: CallOverrides): Promise<string>;

    _lender2(overrides?: CallOverrides): Promise<string>;

    "_lender2()"(overrides?: CallOverrides): Promise<string>;

    _minter(overrides?: CallOverrides): Promise<string>;

    "_minter()"(overrides?: CallOverrides): Promise<string>;

    _uniRouter(overrides?: CallOverrides): Promise<string>;

    "_uniRouter()"(overrides?: CallOverrides): Promise<string>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "borrow(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "borrow(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    calcTokenAmount(
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcTokenAmount(uint256)"(
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimableFees(overrides?: CallOverrides): Promise<BigNumber>;

    "claimableFees()"(overrides?: CallOverrides): Promise<BigNumber>;

    collectCrv(overrides?: CallOverrides): Promise<void>;

    "collectCrv()"(overrides?: CallOverrides): Promise<void>;

    collectFees(beneficiary: string, overrides?: CallOverrides): Promise<void>;

    "collectFees(address)"(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    crvBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "crvBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    crvValue(overrides?: CallOverrides): Promise<BigNumber>;

    "crvValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    currencyBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "currencyBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    currencyToken(overrides?: CallOverrides): Promise<string>;

    "currencyToken()"(overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deficitValue(overrides?: CallOverrides): Promise<BigNumber>;

    "deficitValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    exit(arg0: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "exit(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    flush(
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "flush(uint256)"(
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fundsManager(overrides?: CallOverrides): Promise<string>;

    "fundsManager()"(overrides?: CallOverrides): Promise<string>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    "isInitialized()"(overrides?: CallOverrides): Promise<boolean>;

    join(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "join(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    joiningFee(overrides?: CallOverrides): Promise<BigNumber>;

    "joiningFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    liquidExit(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "liquidExit(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidExitPenalty(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "liquidExitPenalty(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidValue(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    liquidate(loan: string, overrides?: CallOverrides): Promise<void>;

    "liquidate(address)"(
      loan: string,
      overrides?: CallOverrides
    ): Promise<void>;

    loansValue(overrides?: CallOverrides): Promise<BigNumber>;

    "loansValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    oracle(overrides?: CallOverrides): Promise<string>;

    "oracle()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pauseStatus(overrides?: CallOverrides): Promise<boolean>;

    "pauseStatus()"(overrides?: CallOverrides): Promise<boolean>;

    poolValue(overrides?: CallOverrides): Promise<BigNumber>;

    "poolValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    pull(
      yAmount: BigNumberish,
      minCurrencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "pull(uint256,uint256)"(
      yAmount: BigNumberish,
      minCurrencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    repay(
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "repay(uint256)"(
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    safu(overrides?: CallOverrides): Promise<string>;

    "safu()"(overrides?: CallOverrides): Promise<string>;

    sellCrv(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "sellCrv(uint256,uint256,address[])"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setCrvOracle(newOracle: string, overrides?: CallOverrides): Promise<void>;

    "setCrvOracle(address)"(
      newOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFundsManager(
      newFundsManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFundsManager(address)"(
      newFundsManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setJoiningFee(fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setJoiningFee(uint256)"(
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLender2(lender2: string, overrides?: CallOverrides): Promise<void>;

    "setLender2(address)"(
      lender2: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPauseStatus(status: boolean, overrides?: CallOverrides): Promise<void>;

    "setPauseStatus(bool)"(
      status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setSafuAddress(_safu: string, overrides?: CallOverrides): Promise<void>;

    "setSafuAddress(address)"(
      _safu: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTruOracle(newOracle: string, overrides?: CallOverrides): Promise<void>;

    "setTruOracle(address)"(
      newOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateNameAndSymbolToLegacy(overrides?: CallOverrides): Promise<void>;

    "updateNameAndSymbolToLegacy()"(overrides?: CallOverrides): Promise<void>;

    yTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "yTokenBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    yTokenValue(overrides?: CallOverrides): Promise<BigNumber>;

    "yTokenValue()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    Borrow(
      borrower: null,
      amount: null,
      fee: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { borrower: string; amount: BigNumber; fee: BigNumber }
    >;

    Collected(
      beneficiary: string | null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { beneficiary: string; amount: BigNumber }
    >;

    CrvOracleChanged(
      newOracle: null
    ): TypedEventFilter<[string], { newOracle: string }>;

    Exited(
      staker: string | null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { staker: string; amount: BigNumber }
    >;

    Flushed(
      currencyAmount: null
    ): TypedEventFilter<[BigNumber], { currencyAmount: BigNumber }>;

    FundsManagerChanged(
      newManager: null
    ): TypedEventFilter<[string], { newManager: string }>;

    Joined(
      staker: string | null,
      deposited: null,
      minted: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { staker: string; deposited: BigNumber; minted: BigNumber }
    >;

    JoiningFeeChanged(
      newFee: null
    ): TypedEventFilter<[BigNumber], { newFee: BigNumber }>;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    PauseStatusChanged(
      pauseStatus: null
    ): TypedEventFilter<[boolean], { pauseStatus: boolean }>;

    Pulled(
      yAmount: null
    ): TypedEventFilter<[BigNumber], { yAmount: BigNumber }>;

    Repaid(
      payer: string | null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { payer: string; amount: BigNumber }
    >;

    SafuChanged(newSafu: null): TypedEventFilter<[string], { newSafu: string }>;

    Transfer(
      from: string | null,
      to: string | null,
      value: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    TruOracleChanged(
      newOracle: null
    ): TypedEventFilter<[string], { newOracle: string }>;
  };

  estimateGas: {
    _crvOracle(overrides?: CallOverrides): Promise<BigNumber>;

    "_crvOracle()"(overrides?: CallOverrides): Promise<BigNumber>;

    _curveGauge(overrides?: CallOverrides): Promise<BigNumber>;

    "_curveGauge()"(overrides?: CallOverrides): Promise<BigNumber>;

    _curvePool(overrides?: CallOverrides): Promise<BigNumber>;

    "_curvePool()"(overrides?: CallOverrides): Promise<BigNumber>;

    _lender(overrides?: CallOverrides): Promise<BigNumber>;

    "_lender()"(overrides?: CallOverrides): Promise<BigNumber>;

    _lender2(overrides?: CallOverrides): Promise<BigNumber>;

    "_lender2()"(overrides?: CallOverrides): Promise<BigNumber>;

    _minter(overrides?: CallOverrides): Promise<BigNumber>;

    "_minter()"(overrides?: CallOverrides): Promise<BigNumber>;

    _uniRouter(overrides?: CallOverrides): Promise<BigNumber>;

    "_uniRouter()"(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "borrow(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "borrow(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calcTokenAmount(
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcTokenAmount(uint256)"(
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimableFees(overrides?: CallOverrides): Promise<BigNumber>;

    "claimableFees()"(overrides?: CallOverrides): Promise<BigNumber>;

    collectCrv(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "collectCrv()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collectFees(
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "collectFees(address)"(
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    crvBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "crvBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    crvValue(overrides?: CallOverrides): Promise<BigNumber>;

    "crvValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    currencyBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "currencyBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    currencyToken(overrides?: CallOverrides): Promise<BigNumber>;

    "currencyToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deficitValue(overrides?: CallOverrides): Promise<BigNumber>;

    "deficitValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    exit(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "exit(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    flush(
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "flush(uint256)"(
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fundsManager(overrides?: CallOverrides): Promise<BigNumber>;

    "fundsManager()"(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    "isInitialized()"(overrides?: CallOverrides): Promise<BigNumber>;

    join(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "join(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    joiningFee(overrides?: CallOverrides): Promise<BigNumber>;

    "joiningFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    liquidExit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "liquidExit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidExitPenalty(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "liquidExitPenalty(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidValue(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    liquidate(
      loan: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "liquidate(address)"(
      loan: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    loansValue(overrides?: CallOverrides): Promise<BigNumber>;

    "loansValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    "oracle()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pauseStatus(overrides?: CallOverrides): Promise<BigNumber>;

    "pauseStatus()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolValue(overrides?: CallOverrides): Promise<BigNumber>;

    "poolValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    pull(
      yAmount: BigNumberish,
      minCurrencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "pull(uint256,uint256)"(
      yAmount: BigNumberish,
      minCurrencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repay(
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "repay(uint256)"(
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safu(overrides?: CallOverrides): Promise<BigNumber>;

    "safu()"(overrides?: CallOverrides): Promise<BigNumber>;

    sellCrv(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "sellCrv(uint256,uint256,address[])"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCrvOracle(
      newOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setCrvOracle(address)"(
      newOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFundsManager(
      newFundsManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setFundsManager(address)"(
      newFundsManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setJoiningFee(
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setJoiningFee(uint256)"(
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLender2(
      lender2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setLender2(address)"(
      lender2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPauseStatus(
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setPauseStatus(bool)"(
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSafuAddress(
      _safu: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setSafuAddress(address)"(
      _safu: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTruOracle(
      newOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTruOracle(address)"(
      newOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateNameAndSymbolToLegacy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateNameAndSymbolToLegacy()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    yTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "yTokenBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    yTokenValue(overrides?: CallOverrides): Promise<BigNumber>;

    "yTokenValue()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _crvOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_crvOracle()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _curveGauge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_curveGauge()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _curvePool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_curvePool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _lender(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_lender()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _lender2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_lender2()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _minter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_minter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _uniRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_uniRouter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "borrow(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "borrow(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calcTokenAmount(
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcTokenAmount(uint256)"(
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimableFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "claimableFees()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collectCrv(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "collectCrv()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collectFees(
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "collectFees(address)"(
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    crvBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "crvBalance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    crvValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "crvValue()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currencyBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currencyBalance()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currencyToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currencyToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deficitValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "deficitValue()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exit(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "exit(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    flush(
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "flush(uint256)"(
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fundsManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "fundsManager()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isInitialized()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    join(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "join(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    joiningFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "joiningFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidExit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "liquidExit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidExitPenalty(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "liquidExitPenalty(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "liquidValue()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidate(
      loan: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "liquidate(address)"(
      loan: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    loansValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "loansValue()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "oracle()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauseStatus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pauseStatus()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolValue()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pull(
      yAmount: BigNumberish,
      minCurrencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "pull(uint256,uint256)"(
      yAmount: BigNumberish,
      minCurrencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repay(
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "repay(uint256)"(
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safu(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "safu()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellCrv(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "sellCrv(uint256,uint256,address[])"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCrvOracle(
      newOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setCrvOracle(address)"(
      newOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFundsManager(
      newFundsManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setFundsManager(address)"(
      newFundsManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setJoiningFee(
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setJoiningFee(uint256)"(
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLender2(
      lender2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setLender2(address)"(
      lender2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPauseStatus(
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setPauseStatus(bool)"(
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSafuAddress(
      _safu: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setSafuAddress(address)"(
      _safu: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTruOracle(
      newOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTruOracle(address)"(
      newOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateNameAndSymbolToLegacy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateNameAndSymbolToLegacy()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    yTokenBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "yTokenBalance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    yTokenValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "yTokenValue()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
