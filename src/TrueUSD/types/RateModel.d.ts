/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface RateModelInterface extends ethers.utils.Interface {
  functions: {
    "baseRateOracle(address)": FunctionFragment;
    "borrowLimit(address,uint8,uint256,uint256,uint256)": FunctionFragment;
    "borrowLimitAdjustment(uint8)": FunctionFragment;
    "borrowLimitConfig()": FunctionFragment;
    "claimOwnership()": FunctionFragment;
    "combinedRate(uint256,uint256)": FunctionFragment;
    "conservativeStakedRatio(address,uint256,uint256)": FunctionFragment;
    "conservativeStakedValue(uint256)": FunctionFragment;
    "creditScoreAdjustmentRate(uint8)": FunctionFragment;
    "creditScoreRateConfig()": FunctionFragment;
    "effectiveScore(address,uint8,uint256,uint256)": FunctionFragment;
    "fixedTermLoanAdjustment(uint256)": FunctionFragment;
    "fixedTermLoanAdjustmentCoefficient()": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "isOverLimit(address,uint8,uint256,uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "poolBasicRate(address,uint256)": FunctionFragment;
    "poolFactory()": FunctionFragment;
    "rate(address,uint8,uint256)": FunctionFragment;
    "riskPremium()": FunctionFragment;
    "securedRate(address)": FunctionFragment;
    "setBaseRateOracle(address,address)": FunctionFragment;
    "setBorrowLimitConfig(uint8,uint16,uint16,uint16)": FunctionFragment;
    "setCreditScoreRateConfig(uint16,uint16)": FunctionFragment;
    "setFixedTermLoanAdjustmentCoefficient(uint256)": FunctionFragment;
    "setRiskPremium(uint256)": FunctionFragment;
    "setStakingConfig(uint16,uint16)": FunctionFragment;
    "setTruPriceOracle(address)": FunctionFragment;
    "setUtilizationRateConfig(uint16,uint16)": FunctionFragment;
    "stakingConfig()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "truPriceOracle()": FunctionFragment;
    "utilizationAdjustmentRate(address,uint256)": FunctionFragment;
    "utilizationRateConfig()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "baseRateOracle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowLimit",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowLimitAdjustment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowLimitConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "combinedRate",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "conservativeStakedRatio",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "conservativeStakedValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "creditScoreAdjustmentRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "creditScoreRateConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "effectiveScore",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fixedTermLoanAdjustment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fixedTermLoanAdjustmentCoefficient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isOverLimit",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolBasicRate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rate",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "riskPremium",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "securedRate", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setBaseRateOracle",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBorrowLimitConfig",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCreditScoreRateConfig",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFixedTermLoanAdjustmentCoefficient",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRiskPremium",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakingConfig",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTruPriceOracle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setUtilizationRateConfig",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "truPriceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "utilizationAdjustmentRate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "utilizationRateConfig",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "baseRateOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowLimitAdjustment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowLimitConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "combinedRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "conservativeStakedRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "conservativeStakedValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditScoreAdjustmentRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditScoreRateConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "effectiveScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fixedTermLoanAdjustment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fixedTermLoanAdjustmentCoefficient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOverLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolBasicRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "riskPremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "securedRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseRateOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBorrowLimitConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCreditScoreRateConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFixedTermLoanAdjustmentCoefficient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRiskPremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakingConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTruPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUtilizationRateConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "truPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "utilizationAdjustmentRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "utilizationRateConfig",
    data: BytesLike
  ): Result;

  events: {
    "BaseRateOracleChanged(address,address)": EventFragment;
    "BorrowLimitConfigChanged(uint8,uint16,uint16,uint16)": EventFragment;
    "CreditScoreRateConfigChanged(uint16,uint16)": EventFragment;
    "FixedTermLoanAdjustmentCoefficientChanged(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RiskPremiumChanged(uint256)": EventFragment;
    "StakingConfigChanged(uint16,uint16)": EventFragment;
    "TruPriceOracleChanged(address)": EventFragment;
    "UtilizationRateConfigChanged(uint16,uint16)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BaseRateOracleChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BorrowLimitConfigChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CreditScoreRateConfigChanged"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "FixedTermLoanAdjustmentCoefficientChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RiskPremiumChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakingConfigChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TruPriceOracleChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UtilizationRateConfigChanged"
  ): EventFragment;
}

export class RateModel extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RateModelInterface;

  functions: {
    baseRateOracle(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    "baseRateOracle(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    borrowLimit(
      pool: string,
      score: BigNumberish,
      maxBorrowerLimit: BigNumberish,
      stakedTru: BigNumberish,
      totalBorrowedInUsd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "borrowLimit(address,uint8,uint256,uint256,uint256)"(
      pool: string,
      score: BigNumberish,
      maxBorrowerLimit: BigNumberish,
      stakedTru: BigNumberish,
      totalBorrowedInUsd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    borrowLimitAdjustment(
      score: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "borrowLimitAdjustment(uint8)"(
      score: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    borrowLimitConfig(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number] & {
        scoreFloor: number;
        limitAdjustmentPower: number;
        tvlLimitCoefficient: number;
        poolValueLimitCoefficient: number;
      }
    >;

    "borrowLimitConfig()"(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number] & {
        scoreFloor: number;
        limitAdjustmentPower: number;
        tvlLimitCoefficient: number;
        poolValueLimitCoefficient: number;
      }
    >;

    claimOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    combinedRate(
      partialRate: BigNumberish,
      __creditScoreAdjustmentRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "combinedRate(uint256,uint256)"(
      partialRate: BigNumberish,
      __creditScoreAdjustmentRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    conservativeStakedRatio(
      pool: string,
      stakedAmount: BigNumberish,
      borrowedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "conservativeStakedRatio(address,uint256,uint256)"(
      pool: string,
      stakedAmount: BigNumberish,
      borrowedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    conservativeStakedValue(
      stakedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "conservativeStakedValue(uint256)"(
      stakedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    creditScoreAdjustmentRate(
      score: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "creditScoreAdjustmentRate(uint8)"(
      score: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    creditScoreRateConfig(
      overrides?: CallOverrides
    ): Promise<[number, number] & { coefficient: number; power: number }>;

    "creditScoreRateConfig()"(
      overrides?: CallOverrides
    ): Promise<[number, number] & { coefficient: number; power: number }>;

    effectiveScore(
      pool: string,
      score: BigNumberish,
      stakedAmount: BigNumberish,
      borrowedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    "effectiveScore(address,uint8,uint256,uint256)"(
      pool: string,
      score: BigNumberish,
      stakedAmount: BigNumberish,
      borrowedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    fixedTermLoanAdjustment(
      term: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "fixedTermLoanAdjustment(uint256)"(
      term: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    fixedTermLoanAdjustmentCoefficient(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "fixedTermLoanAdjustmentCoefficient()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      _poolFactory: string,
      _truPriceOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(address,address)"(
      _poolFactory: string,
      _truPriceOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    "isInitialized()"(overrides?: CallOverrides): Promise<[boolean]>;

    isOverLimit(
      pool: string,
      score: BigNumberish,
      maxBorrowerLimit: BigNumberish,
      stakedTru: BigNumberish,
      totalBorrowedInUsd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isOverLimit(address,uint8,uint256,uint256,uint256)"(
      pool: string,
      score: BigNumberish,
      maxBorrowerLimit: BigNumberish,
      stakedTru: BigNumberish,
      totalBorrowedInUsd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<[string]>;

    poolBasicRate(
      pool: string,
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "poolBasicRate(address,uint256)"(
      pool: string,
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    poolFactory(overrides?: CallOverrides): Promise<[string]>;

    "poolFactory()"(overrides?: CallOverrides): Promise<[string]>;

    rate(
      pool: string,
      score: BigNumberish,
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "rate(address,uint8,uint256)"(
      pool: string,
      score: BigNumberish,
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    riskPremium(overrides?: CallOverrides): Promise<[BigNumber]>;

    "riskPremium()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    securedRate(pool: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "securedRate(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setBaseRateOracle(
      pool: string,
      _baseRateOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setBaseRateOracle(address,address)"(
      pool: string,
      _baseRateOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBorrowLimitConfig(
      scoreFloor: BigNumberish,
      limitAdjustmentPower: BigNumberish,
      tvlLimitCoefficient: BigNumberish,
      poolValueLimitCoefficient: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setBorrowLimitConfig(uint8,uint16,uint16,uint16)"(
      scoreFloor: BigNumberish,
      limitAdjustmentPower: BigNumberish,
      tvlLimitCoefficient: BigNumberish,
      poolValueLimitCoefficient: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCreditScoreRateConfig(
      coefficient: BigNumberish,
      power: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setCreditScoreRateConfig(uint16,uint16)"(
      coefficient: BigNumberish,
      power: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFixedTermLoanAdjustmentCoefficient(
      newCoefficient: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setFixedTermLoanAdjustmentCoefficient(uint256)"(
      newCoefficient: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRiskPremium(
      newRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setRiskPremium(uint256)"(
      newRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStakingConfig(
      ltvRatio: BigNumberish,
      effectiveScorePower: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setStakingConfig(uint16,uint16)"(
      ltvRatio: BigNumberish,
      effectiveScorePower: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTruPriceOracle(
      _truPriceOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTruPriceOracle(address)"(
      _truPriceOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUtilizationRateConfig(
      coefficient: BigNumberish,
      power: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setUtilizationRateConfig(uint16,uint16)"(
      coefficient: BigNumberish,
      power: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakingConfig(
      overrides?: CallOverrides
    ): Promise<
      [number, number] & { ltvRatio: number; effectiveScorePower: number }
    >;

    "stakingConfig()"(
      overrides?: CallOverrides
    ): Promise<
      [number, number] & { ltvRatio: number; effectiveScorePower: number }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    truPriceOracle(overrides?: CallOverrides): Promise<[string]>;

    "truPriceOracle()"(overrides?: CallOverrides): Promise<[string]>;

    utilizationAdjustmentRate(
      pool: string,
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "utilizationAdjustmentRate(address,uint256)"(
      pool: string,
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    utilizationRateConfig(
      overrides?: CallOverrides
    ): Promise<[number, number] & { coefficient: number; power: number }>;

    "utilizationRateConfig()"(
      overrides?: CallOverrides
    ): Promise<[number, number] & { coefficient: number; power: number }>;
  };

  baseRateOracle(arg0: string, overrides?: CallOverrides): Promise<string>;

  "baseRateOracle(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  borrowLimit(
    pool: string,
    score: BigNumberish,
    maxBorrowerLimit: BigNumberish,
    stakedTru: BigNumberish,
    totalBorrowedInUsd: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "borrowLimit(address,uint8,uint256,uint256,uint256)"(
    pool: string,
    score: BigNumberish,
    maxBorrowerLimit: BigNumberish,
    stakedTru: BigNumberish,
    totalBorrowedInUsd: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  borrowLimitAdjustment(
    score: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "borrowLimitAdjustment(uint8)"(
    score: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  borrowLimitConfig(
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, number] & {
      scoreFloor: number;
      limitAdjustmentPower: number;
      tvlLimitCoefficient: number;
      poolValueLimitCoefficient: number;
    }
  >;

  "borrowLimitConfig()"(
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, number] & {
      scoreFloor: number;
      limitAdjustmentPower: number;
      tvlLimitCoefficient: number;
      poolValueLimitCoefficient: number;
    }
  >;

  claimOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  combinedRate(
    partialRate: BigNumberish,
    __creditScoreAdjustmentRate: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "combinedRate(uint256,uint256)"(
    partialRate: BigNumberish,
    __creditScoreAdjustmentRate: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  conservativeStakedRatio(
    pool: string,
    stakedAmount: BigNumberish,
    borrowedAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "conservativeStakedRatio(address,uint256,uint256)"(
    pool: string,
    stakedAmount: BigNumberish,
    borrowedAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  conservativeStakedValue(
    stakedAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "conservativeStakedValue(uint256)"(
    stakedAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  creditScoreAdjustmentRate(
    score: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "creditScoreAdjustmentRate(uint8)"(
    score: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  creditScoreRateConfig(
    overrides?: CallOverrides
  ): Promise<[number, number] & { coefficient: number; power: number }>;

  "creditScoreRateConfig()"(
    overrides?: CallOverrides
  ): Promise<[number, number] & { coefficient: number; power: number }>;

  effectiveScore(
    pool: string,
    score: BigNumberish,
    stakedAmount: BigNumberish,
    borrowedAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  "effectiveScore(address,uint8,uint256,uint256)"(
    pool: string,
    score: BigNumberish,
    stakedAmount: BigNumberish,
    borrowedAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  fixedTermLoanAdjustment(
    term: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "fixedTermLoanAdjustment(uint256)"(
    term: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  fixedTermLoanAdjustmentCoefficient(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "fixedTermLoanAdjustmentCoefficient()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _poolFactory: string,
    _truPriceOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(address,address)"(
    _poolFactory: string,
    _truPriceOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  "isInitialized()"(overrides?: CallOverrides): Promise<boolean>;

  isOverLimit(
    pool: string,
    score: BigNumberish,
    maxBorrowerLimit: BigNumberish,
    stakedTru: BigNumberish,
    totalBorrowedInUsd: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isOverLimit(address,uint8,uint256,uint256,uint256)"(
    pool: string,
    score: BigNumberish,
    maxBorrowerLimit: BigNumberish,
    stakedTru: BigNumberish,
    totalBorrowedInUsd: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  "pendingOwner()"(overrides?: CallOverrides): Promise<string>;

  poolBasicRate(
    pool: string,
    afterAmountLent: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "poolBasicRate(address,uint256)"(
    pool: string,
    afterAmountLent: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolFactory(overrides?: CallOverrides): Promise<string>;

  "poolFactory()"(overrides?: CallOverrides): Promise<string>;

  rate(
    pool: string,
    score: BigNumberish,
    afterAmountLent: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "rate(address,uint8,uint256)"(
    pool: string,
    score: BigNumberish,
    afterAmountLent: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  riskPremium(overrides?: CallOverrides): Promise<BigNumber>;

  "riskPremium()"(overrides?: CallOverrides): Promise<BigNumber>;

  securedRate(pool: string, overrides?: CallOverrides): Promise<BigNumber>;

  "securedRate(address)"(
    pool: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setBaseRateOracle(
    pool: string,
    _baseRateOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setBaseRateOracle(address,address)"(
    pool: string,
    _baseRateOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBorrowLimitConfig(
    scoreFloor: BigNumberish,
    limitAdjustmentPower: BigNumberish,
    tvlLimitCoefficient: BigNumberish,
    poolValueLimitCoefficient: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setBorrowLimitConfig(uint8,uint16,uint16,uint16)"(
    scoreFloor: BigNumberish,
    limitAdjustmentPower: BigNumberish,
    tvlLimitCoefficient: BigNumberish,
    poolValueLimitCoefficient: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCreditScoreRateConfig(
    coefficient: BigNumberish,
    power: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setCreditScoreRateConfig(uint16,uint16)"(
    coefficient: BigNumberish,
    power: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFixedTermLoanAdjustmentCoefficient(
    newCoefficient: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setFixedTermLoanAdjustmentCoefficient(uint256)"(
    newCoefficient: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRiskPremium(
    newRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setRiskPremium(uint256)"(
    newRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStakingConfig(
    ltvRatio: BigNumberish,
    effectiveScorePower: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setStakingConfig(uint16,uint16)"(
    ltvRatio: BigNumberish,
    effectiveScorePower: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTruPriceOracle(
    _truPriceOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTruPriceOracle(address)"(
    _truPriceOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUtilizationRateConfig(
    coefficient: BigNumberish,
    power: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setUtilizationRateConfig(uint16,uint16)"(
    coefficient: BigNumberish,
    power: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakingConfig(
    overrides?: CallOverrides
  ): Promise<
    [number, number] & { ltvRatio: number; effectiveScorePower: number }
  >;

  "stakingConfig()"(
    overrides?: CallOverrides
  ): Promise<
    [number, number] & { ltvRatio: number; effectiveScorePower: number }
  >;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  truPriceOracle(overrides?: CallOverrides): Promise<string>;

  "truPriceOracle()"(overrides?: CallOverrides): Promise<string>;

  utilizationAdjustmentRate(
    pool: string,
    afterAmountLent: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "utilizationAdjustmentRate(address,uint256)"(
    pool: string,
    afterAmountLent: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  utilizationRateConfig(
    overrides?: CallOverrides
  ): Promise<[number, number] & { coefficient: number; power: number }>;

  "utilizationRateConfig()"(
    overrides?: CallOverrides
  ): Promise<[number, number] & { coefficient: number; power: number }>;

  callStatic: {
    baseRateOracle(arg0: string, overrides?: CallOverrides): Promise<string>;

    "baseRateOracle(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    borrowLimit(
      pool: string,
      score: BigNumberish,
      maxBorrowerLimit: BigNumberish,
      stakedTru: BigNumberish,
      totalBorrowedInUsd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "borrowLimit(address,uint8,uint256,uint256,uint256)"(
      pool: string,
      score: BigNumberish,
      maxBorrowerLimit: BigNumberish,
      stakedTru: BigNumberish,
      totalBorrowedInUsd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowLimitAdjustment(
      score: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "borrowLimitAdjustment(uint8)"(
      score: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowLimitConfig(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number] & {
        scoreFloor: number;
        limitAdjustmentPower: number;
        tvlLimitCoefficient: number;
        poolValueLimitCoefficient: number;
      }
    >;

    "borrowLimitConfig()"(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number] & {
        scoreFloor: number;
        limitAdjustmentPower: number;
        tvlLimitCoefficient: number;
        poolValueLimitCoefficient: number;
      }
    >;

    claimOwnership(overrides?: CallOverrides): Promise<void>;

    "claimOwnership()"(overrides?: CallOverrides): Promise<void>;

    combinedRate(
      partialRate: BigNumberish,
      __creditScoreAdjustmentRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "combinedRate(uint256,uint256)"(
      partialRate: BigNumberish,
      __creditScoreAdjustmentRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    conservativeStakedRatio(
      pool: string,
      stakedAmount: BigNumberish,
      borrowedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "conservativeStakedRatio(address,uint256,uint256)"(
      pool: string,
      stakedAmount: BigNumberish,
      borrowedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    conservativeStakedValue(
      stakedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "conservativeStakedValue(uint256)"(
      stakedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creditScoreAdjustmentRate(
      score: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "creditScoreAdjustmentRate(uint8)"(
      score: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creditScoreRateConfig(
      overrides?: CallOverrides
    ): Promise<[number, number] & { coefficient: number; power: number }>;

    "creditScoreRateConfig()"(
      overrides?: CallOverrides
    ): Promise<[number, number] & { coefficient: number; power: number }>;

    effectiveScore(
      pool: string,
      score: BigNumberish,
      stakedAmount: BigNumberish,
      borrowedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    "effectiveScore(address,uint8,uint256,uint256)"(
      pool: string,
      score: BigNumberish,
      stakedAmount: BigNumberish,
      borrowedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    fixedTermLoanAdjustment(
      term: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "fixedTermLoanAdjustment(uint256)"(
      term: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fixedTermLoanAdjustmentCoefficient(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "fixedTermLoanAdjustmentCoefficient()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _poolFactory: string,
      _truPriceOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address)"(
      _poolFactory: string,
      _truPriceOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    "isInitialized()"(overrides?: CallOverrides): Promise<boolean>;

    isOverLimit(
      pool: string,
      score: BigNumberish,
      maxBorrowerLimit: BigNumberish,
      stakedTru: BigNumberish,
      totalBorrowedInUsd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isOverLimit(address,uint8,uint256,uint256,uint256)"(
      pool: string,
      score: BigNumberish,
      maxBorrowerLimit: BigNumberish,
      stakedTru: BigNumberish,
      totalBorrowedInUsd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<string>;

    poolBasicRate(
      pool: string,
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poolBasicRate(address,uint256)"(
      pool: string,
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolFactory(overrides?: CallOverrides): Promise<string>;

    "poolFactory()"(overrides?: CallOverrides): Promise<string>;

    rate(
      pool: string,
      score: BigNumberish,
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rate(address,uint8,uint256)"(
      pool: string,
      score: BigNumberish,
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    riskPremium(overrides?: CallOverrides): Promise<BigNumber>;

    "riskPremium()"(overrides?: CallOverrides): Promise<BigNumber>;

    securedRate(pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    "securedRate(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBaseRateOracle(
      pool: string,
      _baseRateOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBaseRateOracle(address,address)"(
      pool: string,
      _baseRateOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setBorrowLimitConfig(
      scoreFloor: BigNumberish,
      limitAdjustmentPower: BigNumberish,
      tvlLimitCoefficient: BigNumberish,
      poolValueLimitCoefficient: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBorrowLimitConfig(uint8,uint16,uint16,uint16)"(
      scoreFloor: BigNumberish,
      limitAdjustmentPower: BigNumberish,
      tvlLimitCoefficient: BigNumberish,
      poolValueLimitCoefficient: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCreditScoreRateConfig(
      coefficient: BigNumberish,
      power: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCreditScoreRateConfig(uint16,uint16)"(
      coefficient: BigNumberish,
      power: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFixedTermLoanAdjustmentCoefficient(
      newCoefficient: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFixedTermLoanAdjustmentCoefficient(uint256)"(
      newCoefficient: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRiskPremium(
      newRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRiskPremium(uint256)"(
      newRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStakingConfig(
      ltvRatio: BigNumberish,
      effectiveScorePower: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setStakingConfig(uint16,uint16)"(
      ltvRatio: BigNumberish,
      effectiveScorePower: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTruPriceOracle(
      _truPriceOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTruPriceOracle(address)"(
      _truPriceOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setUtilizationRateConfig(
      coefficient: BigNumberish,
      power: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setUtilizationRateConfig(uint16,uint16)"(
      coefficient: BigNumberish,
      power: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakingConfig(
      overrides?: CallOverrides
    ): Promise<
      [number, number] & { ltvRatio: number; effectiveScorePower: number }
    >;

    "stakingConfig()"(
      overrides?: CallOverrides
    ): Promise<
      [number, number] & { ltvRatio: number; effectiveScorePower: number }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    truPriceOracle(overrides?: CallOverrides): Promise<string>;

    "truPriceOracle()"(overrides?: CallOverrides): Promise<string>;

    utilizationAdjustmentRate(
      pool: string,
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "utilizationAdjustmentRate(address,uint256)"(
      pool: string,
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    utilizationRateConfig(
      overrides?: CallOverrides
    ): Promise<[number, number] & { coefficient: number; power: number }>;

    "utilizationRateConfig()"(
      overrides?: CallOverrides
    ): Promise<[number, number] & { coefficient: number; power: number }>;
  };

  filters: {
    BaseRateOracleChanged(
      pool: null,
      oracle: null
    ): TypedEventFilter<[string, string], { pool: string; oracle: string }>;

    BorrowLimitConfigChanged(
      scoreFloor: null,
      limitAdjustmentPower: null,
      tvlLimitCoefficient: null,
      poolValueLimitCoefficient: null
    ): TypedEventFilter<
      [number, number, number, number],
      {
        scoreFloor: number;
        limitAdjustmentPower: number;
        tvlLimitCoefficient: number;
        poolValueLimitCoefficient: number;
      }
    >;

    CreditScoreRateConfigChanged(
      coefficient: null,
      power: null
    ): TypedEventFilter<
      [number, number],
      { coefficient: number; power: number }
    >;

    FixedTermLoanAdjustmentCoefficientChanged(
      newCoefficient: null
    ): TypedEventFilter<[BigNumber], { newCoefficient: BigNumber }>;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    RiskPremiumChanged(
      newRate: null
    ): TypedEventFilter<[BigNumber], { newRate: BigNumber }>;

    StakingConfigChanged(
      ltvRatio: null,
      effectiveScorePower: null
    ): TypedEventFilter<
      [number, number],
      { ltvRatio: number; effectiveScorePower: number }
    >;

    TruPriceOracleChanged(
      oracle: null
    ): TypedEventFilter<[string], { oracle: string }>;

    UtilizationRateConfigChanged(
      coefficient: null,
      power: null
    ): TypedEventFilter<
      [number, number],
      { coefficient: number; power: number }
    >;
  };

  estimateGas: {
    baseRateOracle(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "baseRateOracle(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowLimit(
      pool: string,
      score: BigNumberish,
      maxBorrowerLimit: BigNumberish,
      stakedTru: BigNumberish,
      totalBorrowedInUsd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "borrowLimit(address,uint8,uint256,uint256,uint256)"(
      pool: string,
      score: BigNumberish,
      maxBorrowerLimit: BigNumberish,
      stakedTru: BigNumberish,
      totalBorrowedInUsd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowLimitAdjustment(
      score: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "borrowLimitAdjustment(uint8)"(
      score: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowLimitConfig(overrides?: CallOverrides): Promise<BigNumber>;

    "borrowLimitConfig()"(overrides?: CallOverrides): Promise<BigNumber>;

    claimOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    combinedRate(
      partialRate: BigNumberish,
      __creditScoreAdjustmentRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "combinedRate(uint256,uint256)"(
      partialRate: BigNumberish,
      __creditScoreAdjustmentRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    conservativeStakedRatio(
      pool: string,
      stakedAmount: BigNumberish,
      borrowedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "conservativeStakedRatio(address,uint256,uint256)"(
      pool: string,
      stakedAmount: BigNumberish,
      borrowedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    conservativeStakedValue(
      stakedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "conservativeStakedValue(uint256)"(
      stakedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creditScoreAdjustmentRate(
      score: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "creditScoreAdjustmentRate(uint8)"(
      score: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creditScoreRateConfig(overrides?: CallOverrides): Promise<BigNumber>;

    "creditScoreRateConfig()"(overrides?: CallOverrides): Promise<BigNumber>;

    effectiveScore(
      pool: string,
      score: BigNumberish,
      stakedAmount: BigNumberish,
      borrowedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "effectiveScore(address,uint8,uint256,uint256)"(
      pool: string,
      score: BigNumberish,
      stakedAmount: BigNumberish,
      borrowedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fixedTermLoanAdjustment(
      term: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "fixedTermLoanAdjustment(uint256)"(
      term: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fixedTermLoanAdjustmentCoefficient(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "fixedTermLoanAdjustmentCoefficient()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _poolFactory: string,
      _truPriceOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(address,address)"(
      _poolFactory: string,
      _truPriceOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    "isInitialized()"(overrides?: CallOverrides): Promise<BigNumber>;

    isOverLimit(
      pool: string,
      score: BigNumberish,
      maxBorrowerLimit: BigNumberish,
      stakedTru: BigNumberish,
      totalBorrowedInUsd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isOverLimit(address,uint8,uint256,uint256,uint256)"(
      pool: string,
      score: BigNumberish,
      maxBorrowerLimit: BigNumberish,
      stakedTru: BigNumberish,
      totalBorrowedInUsd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolBasicRate(
      pool: string,
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poolBasicRate(address,uint256)"(
      pool: string,
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "poolFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    rate(
      pool: string,
      score: BigNumberish,
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rate(address,uint8,uint256)"(
      pool: string,
      score: BigNumberish,
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    riskPremium(overrides?: CallOverrides): Promise<BigNumber>;

    "riskPremium()"(overrides?: CallOverrides): Promise<BigNumber>;

    securedRate(pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    "securedRate(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBaseRateOracle(
      pool: string,
      _baseRateOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setBaseRateOracle(address,address)"(
      pool: string,
      _baseRateOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBorrowLimitConfig(
      scoreFloor: BigNumberish,
      limitAdjustmentPower: BigNumberish,
      tvlLimitCoefficient: BigNumberish,
      poolValueLimitCoefficient: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setBorrowLimitConfig(uint8,uint16,uint16,uint16)"(
      scoreFloor: BigNumberish,
      limitAdjustmentPower: BigNumberish,
      tvlLimitCoefficient: BigNumberish,
      poolValueLimitCoefficient: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCreditScoreRateConfig(
      coefficient: BigNumberish,
      power: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setCreditScoreRateConfig(uint16,uint16)"(
      coefficient: BigNumberish,
      power: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFixedTermLoanAdjustmentCoefficient(
      newCoefficient: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setFixedTermLoanAdjustmentCoefficient(uint256)"(
      newCoefficient: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRiskPremium(
      newRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setRiskPremium(uint256)"(
      newRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStakingConfig(
      ltvRatio: BigNumberish,
      effectiveScorePower: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setStakingConfig(uint16,uint16)"(
      ltvRatio: BigNumberish,
      effectiveScorePower: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTruPriceOracle(
      _truPriceOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTruPriceOracle(address)"(
      _truPriceOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUtilizationRateConfig(
      coefficient: BigNumberish,
      power: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setUtilizationRateConfig(uint16,uint16)"(
      coefficient: BigNumberish,
      power: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakingConfig(overrides?: CallOverrides): Promise<BigNumber>;

    "stakingConfig()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    truPriceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    "truPriceOracle()"(overrides?: CallOverrides): Promise<BigNumber>;

    utilizationAdjustmentRate(
      pool: string,
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "utilizationAdjustmentRate(address,uint256)"(
      pool: string,
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    utilizationRateConfig(overrides?: CallOverrides): Promise<BigNumber>;

    "utilizationRateConfig()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    baseRateOracle(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "baseRateOracle(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowLimit(
      pool: string,
      score: BigNumberish,
      maxBorrowerLimit: BigNumberish,
      stakedTru: BigNumberish,
      totalBorrowedInUsd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "borrowLimit(address,uint8,uint256,uint256,uint256)"(
      pool: string,
      score: BigNumberish,
      maxBorrowerLimit: BigNumberish,
      stakedTru: BigNumberish,
      totalBorrowedInUsd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowLimitAdjustment(
      score: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "borrowLimitAdjustment(uint8)"(
      score: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowLimitConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "borrowLimitConfig()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    combinedRate(
      partialRate: BigNumberish,
      __creditScoreAdjustmentRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "combinedRate(uint256,uint256)"(
      partialRate: BigNumberish,
      __creditScoreAdjustmentRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    conservativeStakedRatio(
      pool: string,
      stakedAmount: BigNumberish,
      borrowedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "conservativeStakedRatio(address,uint256,uint256)"(
      pool: string,
      stakedAmount: BigNumberish,
      borrowedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    conservativeStakedValue(
      stakedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "conservativeStakedValue(uint256)"(
      stakedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creditScoreAdjustmentRate(
      score: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "creditScoreAdjustmentRate(uint8)"(
      score: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creditScoreRateConfig(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "creditScoreRateConfig()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    effectiveScore(
      pool: string,
      score: BigNumberish,
      stakedAmount: BigNumberish,
      borrowedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "effectiveScore(address,uint8,uint256,uint256)"(
      pool: string,
      score: BigNumberish,
      stakedAmount: BigNumberish,
      borrowedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fixedTermLoanAdjustment(
      term: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "fixedTermLoanAdjustment(uint256)"(
      term: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fixedTermLoanAdjustmentCoefficient(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "fixedTermLoanAdjustmentCoefficient()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _poolFactory: string,
      _truPriceOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(address,address)"(
      _poolFactory: string,
      _truPriceOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isInitialized()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOverLimit(
      pool: string,
      score: BigNumberish,
      maxBorrowerLimit: BigNumberish,
      stakedTru: BigNumberish,
      totalBorrowedInUsd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isOverLimit(address,uint8,uint256,uint256,uint256)"(
      pool: string,
      score: BigNumberish,
      maxBorrowerLimit: BigNumberish,
      stakedTru: BigNumberish,
      totalBorrowedInUsd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolBasicRate(
      pool: string,
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolBasicRate(address,uint256)"(
      pool: string,
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolFactory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rate(
      pool: string,
      score: BigNumberish,
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rate(address,uint8,uint256)"(
      pool: string,
      score: BigNumberish,
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    riskPremium(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "riskPremium()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    securedRate(
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "securedRate(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setBaseRateOracle(
      pool: string,
      _baseRateOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setBaseRateOracle(address,address)"(
      pool: string,
      _baseRateOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBorrowLimitConfig(
      scoreFloor: BigNumberish,
      limitAdjustmentPower: BigNumberish,
      tvlLimitCoefficient: BigNumberish,
      poolValueLimitCoefficient: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setBorrowLimitConfig(uint8,uint16,uint16,uint16)"(
      scoreFloor: BigNumberish,
      limitAdjustmentPower: BigNumberish,
      tvlLimitCoefficient: BigNumberish,
      poolValueLimitCoefficient: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCreditScoreRateConfig(
      coefficient: BigNumberish,
      power: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setCreditScoreRateConfig(uint16,uint16)"(
      coefficient: BigNumberish,
      power: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFixedTermLoanAdjustmentCoefficient(
      newCoefficient: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setFixedTermLoanAdjustmentCoefficient(uint256)"(
      newCoefficient: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRiskPremium(
      newRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setRiskPremium(uint256)"(
      newRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStakingConfig(
      ltvRatio: BigNumberish,
      effectiveScorePower: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setStakingConfig(uint16,uint16)"(
      ltvRatio: BigNumberish,
      effectiveScorePower: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTruPriceOracle(
      _truPriceOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTruPriceOracle(address)"(
      _truPriceOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUtilizationRateConfig(
      coefficient: BigNumberish,
      power: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setUtilizationRateConfig(uint16,uint16)"(
      coefficient: BigNumberish,
      power: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakingConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stakingConfig()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    truPriceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "truPriceOracle()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    utilizationAdjustmentRate(
      pool: string,
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "utilizationAdjustmentRate(address,uint256)"(
      pool: string,
      afterAmountLent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    utilizationRateConfig(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "utilizationRateConfig()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
