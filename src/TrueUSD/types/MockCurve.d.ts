/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MockCurveInterface extends ethers.utils.Interface {
  functions: {
    "burn300kGas()": FunctionFragment;
    "calc_token_amount(uint256[4],bool)": FunctionFragment;
    "get_virtual_price()": FunctionFragment;
    "set_withdraw_price(uint256)": FunctionFragment;
    "sharePrice()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "burn300kGas",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calc_token_amount",
    values: [[BigNumberish, BigNumberish, BigNumberish, BigNumberish], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "get_virtual_price",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "set_withdraw_price",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sharePrice",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "burn300kGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calc_token_amount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_virtual_price",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set_withdraw_price",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sharePrice", data: BytesLike): Result;

  events: {};
}

export class MockCurve extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MockCurveInterface;

  functions: {
    burn300kGas(overrides?: CallOverrides): Promise<[void]>;

    "burn300kGas()"(overrides?: CallOverrides): Promise<[void]>;

    calc_token_amount(
      amounts: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      arg1: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calc_token_amount(uint256[4],bool)"(
      amounts: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      arg1: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    get_virtual_price(overrides?: CallOverrides): Promise<[BigNumber]>;

    "get_virtual_price()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    set_withdraw_price(
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "set_withdraw_price(uint256)"(
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sharePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    "sharePrice()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  burn300kGas(overrides?: CallOverrides): Promise<void>;

  "burn300kGas()"(overrides?: CallOverrides): Promise<void>;

  calc_token_amount(
    amounts: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    arg1: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calc_token_amount(uint256[4],bool)"(
    amounts: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    arg1: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  get_virtual_price(overrides?: CallOverrides): Promise<BigNumber>;

  "get_virtual_price()"(overrides?: CallOverrides): Promise<BigNumber>;

  set_withdraw_price(
    price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "set_withdraw_price(uint256)"(
    price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sharePrice(overrides?: CallOverrides): Promise<BigNumber>;

  "sharePrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    burn300kGas(overrides?: CallOverrides): Promise<void>;

    "burn300kGas()"(overrides?: CallOverrides): Promise<void>;

    calc_token_amount(
      amounts: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      arg1: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calc_token_amount(uint256[4],bool)"(
      amounts: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      arg1: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_virtual_price(overrides?: CallOverrides): Promise<BigNumber>;

    "get_virtual_price()"(overrides?: CallOverrides): Promise<BigNumber>;

    set_withdraw_price(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "set_withdraw_price(uint256)"(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sharePrice(overrides?: CallOverrides): Promise<BigNumber>;

    "sharePrice()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    burn300kGas(overrides?: CallOverrides): Promise<BigNumber>;

    "burn300kGas()"(overrides?: CallOverrides): Promise<BigNumber>;

    calc_token_amount(
      amounts: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      arg1: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calc_token_amount(uint256[4],bool)"(
      amounts: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      arg1: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_virtual_price(overrides?: CallOverrides): Promise<BigNumber>;

    "get_virtual_price()"(overrides?: CallOverrides): Promise<BigNumber>;

    set_withdraw_price(
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "set_withdraw_price(uint256)"(
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sharePrice(overrides?: CallOverrides): Promise<BigNumber>;

    "sharePrice()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    burn300kGas(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "burn300kGas()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calc_token_amount(
      amounts: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      arg1: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calc_token_amount(uint256[4],bool)"(
      amounts: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      arg1: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_virtual_price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "get_virtual_price()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    set_withdraw_price(
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "set_withdraw_price(uint256)"(
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sharePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "sharePrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
