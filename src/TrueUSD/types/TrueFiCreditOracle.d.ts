/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TrueFiCreditOracleInterface extends ethers.utils.Interface {
  functions: {
    "claimOwnership()": FunctionFragment;
    "creditUpdatePeriod()": FunctionFragment;
    "eligibleUntilTime(address)": FunctionFragment;
    "gracePeriod()": FunctionFragment;
    "initialize()": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "manager()": FunctionFragment;
    "maxBorrowerLimit(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "score(address)": FunctionFragment;
    "setCreditUpdatePeriod(uint256)": FunctionFragment;
    "setEligibleForDuration(address,uint256)": FunctionFragment;
    "setGracePeriod(uint256)": FunctionFragment;
    "setIneligible(address)": FunctionFragment;
    "setManager(address)": FunctionFragment;
    "setMaxBorrowerLimit(address,uint256)": FunctionFragment;
    "setOnHold(address)": FunctionFragment;
    "setScore(address,uint8)": FunctionFragment;
    "status(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "claimOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creditUpdatePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eligibleUntilTime",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "gracePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "manager", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxBorrowerLimit",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "score", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setCreditUpdatePeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEligibleForDuration",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGracePeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setIneligible",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setManager", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setMaxBorrowerLimit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setOnHold", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setScore",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "status", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditUpdatePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eligibleUntilTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gracePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxBorrowerLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "score", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCreditUpdatePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEligibleForDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGracePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIneligible",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxBorrowerLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOnHold", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setScore", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "CreditUpdatePeriodChanged(uint256)": EventFragment;
    "EligibleUntilTimeChanged(address,uint256)": EventFragment;
    "GracePeriodChanged(uint256)": EventFragment;
    "ManagerChanged(address)": EventFragment;
    "MaxBorrowerLimitChanged(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ScoreChanged(address,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreditUpdatePeriodChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EligibleUntilTimeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GracePeriodChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ManagerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxBorrowerLimitChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ScoreChanged"): EventFragment;
}

export class TrueFiCreditOracle extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TrueFiCreditOracleInterface;

  functions: {
    claimOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    creditUpdatePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    "creditUpdatePeriod()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    eligibleUntilTime(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "eligibleUntilTime(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    gracePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    "gracePeriod()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    "isInitialized()"(overrides?: CallOverrides): Promise<[boolean]>;

    manager(overrides?: CallOverrides): Promise<[string]>;

    "manager()"(overrides?: CallOverrides): Promise<[string]>;

    maxBorrowerLimit(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "maxBorrowerLimit(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<[string]>;

    score(arg0: string, overrides?: CallOverrides): Promise<[number]>;

    "score(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    setCreditUpdatePeriod(
      newCreditUpdatePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setCreditUpdatePeriod(uint256)"(
      newCreditUpdatePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEligibleForDuration(
      account: string,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setEligibleForDuration(address,uint256)"(
      account: string,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGracePeriod(
      newGracePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setGracePeriod(uint256)"(
      newGracePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIneligible(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setIneligible(address)"(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setManager(
      newManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setManager(address)"(
      newManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxBorrowerLimit(
      account: string,
      newMaxBorrowerLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMaxBorrowerLimit(address,uint256)"(
      account: string,
      newMaxBorrowerLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOnHold(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setOnHold(address)"(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setScore(
      account: string,
      newScore: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setScore(address,uint8)"(
      account: string,
      newScore: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    status(account: string, overrides?: CallOverrides): Promise<[number]>;

    "status(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  claimOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  creditUpdatePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "creditUpdatePeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  eligibleUntilTime(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "eligibleUntilTime(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  gracePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "gracePeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  "isInitialized()"(overrides?: CallOverrides): Promise<boolean>;

  manager(overrides?: CallOverrides): Promise<string>;

  "manager()"(overrides?: CallOverrides): Promise<string>;

  maxBorrowerLimit(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "maxBorrowerLimit(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  "pendingOwner()"(overrides?: CallOverrides): Promise<string>;

  score(arg0: string, overrides?: CallOverrides): Promise<number>;

  "score(address)"(arg0: string, overrides?: CallOverrides): Promise<number>;

  setCreditUpdatePeriod(
    newCreditUpdatePeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setCreditUpdatePeriod(uint256)"(
    newCreditUpdatePeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEligibleForDuration(
    account: string,
    duration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setEligibleForDuration(address,uint256)"(
    account: string,
    duration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGracePeriod(
    newGracePeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setGracePeriod(uint256)"(
    newGracePeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIneligible(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setIneligible(address)"(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setManager(
    newManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setManager(address)"(
    newManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxBorrowerLimit(
    account: string,
    newMaxBorrowerLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMaxBorrowerLimit(address,uint256)"(
    account: string,
    newMaxBorrowerLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOnHold(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setOnHold(address)"(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setScore(
    account: string,
    newScore: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setScore(address,uint8)"(
    account: string,
    newScore: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  status(account: string, overrides?: CallOverrides): Promise<number>;

  "status(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<number>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimOwnership(overrides?: CallOverrides): Promise<void>;

    "claimOwnership()"(overrides?: CallOverrides): Promise<void>;

    creditUpdatePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "creditUpdatePeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    eligibleUntilTime(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "eligibleUntilTime(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gracePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "gracePeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(overrides?: CallOverrides): Promise<void>;

    "initialize()"(overrides?: CallOverrides): Promise<void>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    "isInitialized()"(overrides?: CallOverrides): Promise<boolean>;

    manager(overrides?: CallOverrides): Promise<string>;

    "manager()"(overrides?: CallOverrides): Promise<string>;

    maxBorrowerLimit(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "maxBorrowerLimit(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<string>;

    score(arg0: string, overrides?: CallOverrides): Promise<number>;

    "score(address)"(arg0: string, overrides?: CallOverrides): Promise<number>;

    setCreditUpdatePeriod(
      newCreditUpdatePeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCreditUpdatePeriod(uint256)"(
      newCreditUpdatePeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setEligibleForDuration(
      account: string,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setEligibleForDuration(address,uint256)"(
      account: string,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setGracePeriod(
      newGracePeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setGracePeriod(uint256)"(
      newGracePeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setIneligible(account: string, overrides?: CallOverrides): Promise<void>;

    "setIneligible(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setManager(newManager: string, overrides?: CallOverrides): Promise<void>;

    "setManager(address)"(
      newManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxBorrowerLimit(
      account: string,
      newMaxBorrowerLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxBorrowerLimit(address,uint256)"(
      account: string,
      newMaxBorrowerLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOnHold(account: string, overrides?: CallOverrides): Promise<void>;

    "setOnHold(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setScore(
      account: string,
      newScore: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setScore(address,uint8)"(
      account: string,
      newScore: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    status(account: string, overrides?: CallOverrides): Promise<number>;

    "status(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<number>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    CreditUpdatePeriodChanged(
      newCreditUpdatePeriod: null
    ): TypedEventFilter<[BigNumber], { newCreditUpdatePeriod: BigNumber }>;

    EligibleUntilTimeChanged(
      account: string | null,
      timestamp: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; timestamp: BigNumber }
    >;

    GracePeriodChanged(
      newGracePeriod: null
    ): TypedEventFilter<[BigNumber], { newGracePeriod: BigNumber }>;

    ManagerChanged(
      newManager: null
    ): TypedEventFilter<[string], { newManager: string }>;

    MaxBorrowerLimitChanged(
      account: string | null,
      newMaxBorrowerLimit: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; newMaxBorrowerLimit: BigNumber }
    >;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    ScoreChanged(
      account: string | null,
      newScore: BigNumberish | null
    ): TypedEventFilter<
      [string, number],
      { account: string; newScore: number }
    >;
  };

  estimateGas: {
    claimOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    creditUpdatePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "creditUpdatePeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    eligibleUntilTime(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "eligibleUntilTime(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gracePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "gracePeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    "isInitialized()"(overrides?: CallOverrides): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<BigNumber>;

    "manager()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxBorrowerLimit(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "maxBorrowerLimit(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    score(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "score(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setCreditUpdatePeriod(
      newCreditUpdatePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setCreditUpdatePeriod(uint256)"(
      newCreditUpdatePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEligibleForDuration(
      account: string,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setEligibleForDuration(address,uint256)"(
      account: string,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGracePeriod(
      newGracePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setGracePeriod(uint256)"(
      newGracePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIneligible(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setIneligible(address)"(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setManager(
      newManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setManager(address)"(
      newManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxBorrowerLimit(
      account: string,
      newMaxBorrowerLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMaxBorrowerLimit(address,uint256)"(
      account: string,
      newMaxBorrowerLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOnHold(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setOnHold(address)"(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setScore(
      account: string,
      newScore: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setScore(address,uint8)"(
      account: string,
      newScore: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    status(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "status(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    creditUpdatePeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "creditUpdatePeriod()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    eligibleUntilTime(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "eligibleUntilTime(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gracePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "gracePeriod()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isInitialized()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "manager()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxBorrowerLimit(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "maxBorrowerLimit(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    score(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "score(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setCreditUpdatePeriod(
      newCreditUpdatePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setCreditUpdatePeriod(uint256)"(
      newCreditUpdatePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEligibleForDuration(
      account: string,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setEligibleForDuration(address,uint256)"(
      account: string,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGracePeriod(
      newGracePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setGracePeriod(uint256)"(
      newGracePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIneligible(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setIneligible(address)"(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setManager(
      newManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setManager(address)"(
      newManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxBorrowerLimit(
      account: string,
      newMaxBorrowerLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMaxBorrowerLimit(address,uint256)"(
      account: string,
      newMaxBorrowerLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOnHold(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setOnHold(address)"(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setScore(
      account: string,
      newScore: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setScore(address,uint8)"(
      account: string,
      newScore: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    status(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "status(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
