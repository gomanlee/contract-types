/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface LineOfCreditAgencyInterface extends ethers.utils.Interface {
  functions: {
    "allowBorrower(address,bool)": FunctionFragment;
    "borrow(address,uint256)": FunctionFragment;
    "borrowLimit(address,address,uint256)": FunctionFragment;
    "borrowLimitAdjustment(uint8)": FunctionFragment;
    "borrowed(address,address)": FunctionFragment;
    "borrowerTotalPaidInterest(address,address)": FunctionFragment;
    "borrowingMutex()": FunctionFragment;
    "buckets(address,uint256)": FunctionFragment;
    "claimOwnership()": FunctionFragment;
    "creditOracle()": FunctionFragment;
    "creditScore(address,address)": FunctionFragment;
    "creditScoreAdjustmentRate(address,address)": FunctionFragment;
    "currentRate(address,address)": FunctionFragment;
    "enterDefault(address)": FunctionFragment;
    "initialize(address,address,address,address,address,address)": FunctionFragment;
    "interest(address,address)": FunctionFragment;
    "interestRepaymentPeriod()": FunctionFragment;
    "isBorrowerAllowed(address)": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "isOverLimit(address,address)": FunctionFragment;
    "isOverProFormaLimit(address,uint256)": FunctionFragment;
    "loanFactory()": FunctionFragment;
    "minCreditScore()": FunctionFragment;
    "nextInterestRepayTime(address,address)": FunctionFragment;
    "overBorrowLimitTime(address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "payInterest(address)": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "poke(address)": FunctionFragment;
    "pokeAll()": FunctionFragment;
    "pokeBorrowLimitTimer(address,address)": FunctionFragment;
    "poolBasicRate(address)": FunctionFragment;
    "poolCreditValue(address)": FunctionFragment;
    "poolFactory()": FunctionFragment;
    "poolTotalInterest(address)": FunctionFragment;
    "poolTotalPaidInterest(address)": FunctionFragment;
    "rateModel()": FunctionFragment;
    "repay(address,uint256)": FunctionFragment;
    "repayInFull(address)": FunctionFragment;
    "setInterestRepaymentPeriod(uint256)": FunctionFragment;
    "setLoanFactory(address)": FunctionFragment;
    "setMinCreditScore(uint256)": FunctionFragment;
    "setPoolFactory(address)": FunctionFragment;
    "setRateModel(address)": FunctionFragment;
    "singleCreditValue(address,address)": FunctionFragment;
    "stakingVault()": FunctionFragment;
    "totalBorrowed(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateAllCreditScores(address)": FunctionFragment;
    "updateCreditScore(address,address)": FunctionFragment;
    "usedBucketsBitmap()": FunctionFragment;
    "utilizationAdjustmentRate(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allowBorrower",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowLimit",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowLimitAdjustment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowed",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowerTotalPaidInterest",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowingMutex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buckets",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creditOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creditScore",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "creditScoreAdjustmentRate",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "currentRate",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "enterDefault",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "interest",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "interestRepaymentPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isBorrowerAllowed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isOverLimit",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isOverProFormaLimit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "loanFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minCreditScore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextInterestRepayTime",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "overBorrowLimitTime",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "payInterest", values: [string]): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "poke", values: [string]): string;
  encodeFunctionData(functionFragment: "pokeAll", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pokeBorrowLimitTimer",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "poolBasicRate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "poolCreditValue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "poolFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolTotalInterest",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "poolTotalPaidInterest",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "rateModel", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "repayInFull", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setInterestRepaymentPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLoanFactory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinCreditScore",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolFactory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRateModel",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "singleCreditValue",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBorrowed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAllCreditScores",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCreditScore",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "usedBucketsBitmap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "utilizationAdjustmentRate",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "allowBorrower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowLimitAdjustment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrowed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowerTotalPaidInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowingMutex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buckets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditScoreAdjustmentRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enterDefault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "interest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "interestRepaymentPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBorrowerAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOverLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOverProFormaLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loanFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minCreditScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextInterestRepayTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "overBorrowLimitTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poke", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pokeAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pokeBorrowLimitTimer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolBasicRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolCreditValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolTotalInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolTotalPaidInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rateModel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "repayInFull",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInterestRepaymentPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLoanFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinCreditScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRateModel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "singleCreditValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBorrowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAllCreditScores",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCreditScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usedBucketsBitmap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "utilizationAdjustmentRate",
    data: BytesLike
  ): Result;

  events: {
    "BorrowerAllowed(address,bool)": EventFragment;
    "EnteredDefault(address,uint8)": EventFragment;
    "InterestPaid(address,address,uint256)": EventFragment;
    "InterestRepaymentPeriodChanged(uint256)": EventFragment;
    "LoanFactoryChanged(address)": EventFragment;
    "MinCreditScoreChanged(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PoolAllowed(address,bool)": EventFragment;
    "PoolFactoryChanged(address)": EventFragment;
    "PrincipalRepaid(address,address,uint256)": EventFragment;
    "RateModelChanged(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BorrowerAllowed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnteredDefault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InterestPaid"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "InterestRepaymentPeriodChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoanFactoryChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinCreditScoreChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolAllowed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolFactoryChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PrincipalRepaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RateModelChanged"): EventFragment;
}

export class LineOfCreditAgency extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LineOfCreditAgencyInterface;

  functions: {
    allowBorrower(
      who: string,
      isAllowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "allowBorrower(address,bool)"(
      who: string,
      isAllowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrow(
      pool: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "borrow(address,uint256)"(
      pool: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrowLimit(
      pool: string,
      borrower: string,
      _totalBorrowed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "borrowLimit(address,address,uint256)"(
      pool: string,
      borrower: string,
      _totalBorrowed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    borrowLimitAdjustment(
      score: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "borrowLimitAdjustment(uint8)"(
      score: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    borrowed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "borrowed(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    borrowerTotalPaidInterest(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "borrowerTotalPaidInterest(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    borrowingMutex(overrides?: CallOverrides): Promise<[string]>;

    "borrowingMutex()"(overrides?: CallOverrides): Promise<[string]>;

    buckets(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber, BigNumber] & {
        borrowersCount: number;
        timestamp: BigNumber;
        rate: BigNumber;
        cumulativeInterestPerShare: BigNumber;
        totalBorrowed: BigNumber;
      }
    >;

    "buckets(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber, BigNumber] & {
        borrowersCount: number;
        timestamp: BigNumber;
        rate: BigNumber;
        cumulativeInterestPerShare: BigNumber;
        totalBorrowed: BigNumber;
      }
    >;

    claimOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    creditOracle(overrides?: CallOverrides): Promise<[string]>;

    "creditOracle()"(overrides?: CallOverrides): Promise<[string]>;

    creditScore(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    "creditScore(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    creditScoreAdjustmentRate(
      pool: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "creditScoreAdjustmentRate(address,address)"(
      pool: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    currentRate(
      pool: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "currentRate(address,address)"(
      pool: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    enterDefault(
      borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "enterDefault(address)"(
      borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _creditOracle: string,
      _rateModel: string,
      _borrowingMutex: string,
      _poolFactory: string,
      _loanFactory: string,
      _stakingVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(address,address,address,address,address,address)"(
      _creditOracle: string,
      _rateModel: string,
      _borrowingMutex: string,
      _poolFactory: string,
      _loanFactory: string,
      _stakingVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    interest(
      pool: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "interest(address,address)"(
      pool: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    interestRepaymentPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    "interestRepaymentPeriod()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isBorrowerAllowed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isBorrowerAllowed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    "isInitialized()"(overrides?: CallOverrides): Promise<[boolean]>;

    isOverLimit(
      pool: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isOverLimit(address,address)"(
      pool: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOverProFormaLimit(
      borrower: string,
      stakedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isOverProFormaLimit(address,uint256)"(
      borrower: string,
      stakedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    loanFactory(overrides?: CallOverrides): Promise<[string]>;

    "loanFactory()"(overrides?: CallOverrides): Promise<[string]>;

    minCreditScore(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minCreditScore()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextInterestRepayTime(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "nextInterestRepayTime(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    overBorrowLimitTime(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "overBorrowLimitTime(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    payInterest(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "payInterest(address)"(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<[string]>;

    poke(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "poke(address)"(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pokeAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "pokeAll()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pokeBorrowLimitTimer(
      pool: string,
      borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "pokeBorrowLimitTimer(address,address)"(
      pool: string,
      borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    poolBasicRate(
      pool: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "poolBasicRate(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    poolCreditValue(
      pool: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "poolCreditValue(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    poolFactory(overrides?: CallOverrides): Promise<[string]>;

    "poolFactory()"(overrides?: CallOverrides): Promise<[string]>;

    poolTotalInterest(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "poolTotalInterest(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    poolTotalPaidInterest(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "poolTotalPaidInterest(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rateModel(overrides?: CallOverrides): Promise<[string]>;

    "rateModel()"(overrides?: CallOverrides): Promise<[string]>;

    repay(
      pool: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "repay(address,uint256)"(
      pool: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repayInFull(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "repayInFull(address)"(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInterestRepaymentPeriod(
      newPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setInterestRepaymentPeriod(uint256)"(
      newPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLoanFactory(
      newLoanFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setLoanFactory(address)"(
      newLoanFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinCreditScore(
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMinCreditScore(uint256)"(
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPoolFactory(
      newPoolFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setPoolFactory(address)"(
      newPoolFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRateModel(
      newRateModel: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setRateModel(address)"(
      newRateModel: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    singleCreditValue(
      pool: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "singleCreditValue(address,address)"(
      pool: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stakingVault(overrides?: CallOverrides): Promise<[string]>;

    "stakingVault()"(overrides?: CallOverrides): Promise<[string]>;

    totalBorrowed(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "totalBorrowed(address)"(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateAllCreditScores(
      borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateAllCreditScores(address)"(
      borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCreditScore(
      pool: string,
      borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateCreditScore(address,address)"(
      pool: string,
      borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usedBucketsBitmap(overrides?: CallOverrides): Promise<[BigNumber]>;

    "usedBucketsBitmap()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    utilizationAdjustmentRate(
      pool: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "utilizationAdjustmentRate(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  allowBorrower(
    who: string,
    isAllowed: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "allowBorrower(address,bool)"(
    who: string,
    isAllowed: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrow(
    pool: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "borrow(address,uint256)"(
    pool: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrowLimit(
    pool: string,
    borrower: string,
    _totalBorrowed: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "borrowLimit(address,address,uint256)"(
    pool: string,
    borrower: string,
    _totalBorrowed: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  borrowLimitAdjustment(
    score: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "borrowLimitAdjustment(uint8)"(
    score: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  borrowed(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "borrowed(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  borrowerTotalPaidInterest(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "borrowerTotalPaidInterest(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  borrowingMutex(overrides?: CallOverrides): Promise<string>;

  "borrowingMutex()"(overrides?: CallOverrides): Promise<string>;

  buckets(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber, BigNumber, BigNumber] & {
      borrowersCount: number;
      timestamp: BigNumber;
      rate: BigNumber;
      cumulativeInterestPerShare: BigNumber;
      totalBorrowed: BigNumber;
    }
  >;

  "buckets(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber, BigNumber, BigNumber] & {
      borrowersCount: number;
      timestamp: BigNumber;
      rate: BigNumber;
      cumulativeInterestPerShare: BigNumber;
      totalBorrowed: BigNumber;
    }
  >;

  claimOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  creditOracle(overrides?: CallOverrides): Promise<string>;

  "creditOracle()"(overrides?: CallOverrides): Promise<string>;

  creditScore(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<number>;

  "creditScore(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<number>;

  creditScoreAdjustmentRate(
    pool: string,
    borrower: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "creditScoreAdjustmentRate(address,address)"(
    pool: string,
    borrower: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  currentRate(
    pool: string,
    borrower: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "currentRate(address,address)"(
    pool: string,
    borrower: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  enterDefault(
    borrower: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "enterDefault(address)"(
    borrower: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _creditOracle: string,
    _rateModel: string,
    _borrowingMutex: string,
    _poolFactory: string,
    _loanFactory: string,
    _stakingVault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(address,address,address,address,address,address)"(
    _creditOracle: string,
    _rateModel: string,
    _borrowingMutex: string,
    _poolFactory: string,
    _loanFactory: string,
    _stakingVault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  interest(
    pool: string,
    borrower: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "interest(address,address)"(
    pool: string,
    borrower: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  interestRepaymentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "interestRepaymentPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  isBorrowerAllowed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "isBorrowerAllowed(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  "isInitialized()"(overrides?: CallOverrides): Promise<boolean>;

  isOverLimit(
    pool: string,
    borrower: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isOverLimit(address,address)"(
    pool: string,
    borrower: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOverProFormaLimit(
    borrower: string,
    stakedAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isOverProFormaLimit(address,uint256)"(
    borrower: string,
    stakedAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  loanFactory(overrides?: CallOverrides): Promise<string>;

  "loanFactory()"(overrides?: CallOverrides): Promise<string>;

  minCreditScore(overrides?: CallOverrides): Promise<BigNumber>;

  "minCreditScore()"(overrides?: CallOverrides): Promise<BigNumber>;

  nextInterestRepayTime(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "nextInterestRepayTime(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  overBorrowLimitTime(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "overBorrowLimitTime(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  payInterest(
    pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "payInterest(address)"(
    pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  "pendingOwner()"(overrides?: CallOverrides): Promise<string>;

  poke(
    pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "poke(address)"(
    pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pokeAll(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "pokeAll()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pokeBorrowLimitTimer(
    pool: string,
    borrower: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "pokeBorrowLimitTimer(address,address)"(
    pool: string,
    borrower: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  poolBasicRate(pool: string, overrides?: CallOverrides): Promise<BigNumber>;

  "poolBasicRate(address)"(
    pool: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolCreditValue(pool: string, overrides?: CallOverrides): Promise<BigNumber>;

  "poolCreditValue(address)"(
    pool: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolFactory(overrides?: CallOverrides): Promise<string>;

  "poolFactory()"(overrides?: CallOverrides): Promise<string>;

  poolTotalInterest(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "poolTotalInterest(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolTotalPaidInterest(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "poolTotalPaidInterest(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rateModel(overrides?: CallOverrides): Promise<string>;

  "rateModel()"(overrides?: CallOverrides): Promise<string>;

  repay(
    pool: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "repay(address,uint256)"(
    pool: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repayInFull(
    pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "repayInFull(address)"(
    pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInterestRepaymentPeriod(
    newPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setInterestRepaymentPeriod(uint256)"(
    newPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLoanFactory(
    newLoanFactory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setLoanFactory(address)"(
    newLoanFactory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinCreditScore(
    newValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMinCreditScore(uint256)"(
    newValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPoolFactory(
    newPoolFactory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setPoolFactory(address)"(
    newPoolFactory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRateModel(
    newRateModel: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setRateModel(address)"(
    newRateModel: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  singleCreditValue(
    pool: string,
    borrower: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "singleCreditValue(address,address)"(
    pool: string,
    borrower: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stakingVault(overrides?: CallOverrides): Promise<string>;

  "stakingVault()"(overrides?: CallOverrides): Promise<string>;

  totalBorrowed(
    borrower: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "totalBorrowed(address)"(
    borrower: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateAllCreditScores(
    borrower: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateAllCreditScores(address)"(
    borrower: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCreditScore(
    pool: string,
    borrower: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateCreditScore(address,address)"(
    pool: string,
    borrower: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  usedBucketsBitmap(overrides?: CallOverrides): Promise<BigNumber>;

  "usedBucketsBitmap()"(overrides?: CallOverrides): Promise<BigNumber>;

  utilizationAdjustmentRate(
    pool: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "utilizationAdjustmentRate(address)"(
    pool: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    allowBorrower(
      who: string,
      isAllowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "allowBorrower(address,bool)"(
      who: string,
      isAllowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    borrow(
      pool: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "borrow(address,uint256)"(
      pool: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    borrowLimit(
      pool: string,
      borrower: string,
      _totalBorrowed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "borrowLimit(address,address,uint256)"(
      pool: string,
      borrower: string,
      _totalBorrowed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowLimitAdjustment(
      score: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "borrowLimitAdjustment(uint8)"(
      score: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "borrowed(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowerTotalPaidInterest(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "borrowerTotalPaidInterest(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowingMutex(overrides?: CallOverrides): Promise<string>;

    "borrowingMutex()"(overrides?: CallOverrides): Promise<string>;

    buckets(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber, BigNumber] & {
        borrowersCount: number;
        timestamp: BigNumber;
        rate: BigNumber;
        cumulativeInterestPerShare: BigNumber;
        totalBorrowed: BigNumber;
      }
    >;

    "buckets(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber, BigNumber] & {
        borrowersCount: number;
        timestamp: BigNumber;
        rate: BigNumber;
        cumulativeInterestPerShare: BigNumber;
        totalBorrowed: BigNumber;
      }
    >;

    claimOwnership(overrides?: CallOverrides): Promise<void>;

    "claimOwnership()"(overrides?: CallOverrides): Promise<void>;

    creditOracle(overrides?: CallOverrides): Promise<string>;

    "creditOracle()"(overrides?: CallOverrides): Promise<string>;

    creditScore(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<number>;

    "creditScore(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<number>;

    creditScoreAdjustmentRate(
      pool: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "creditScoreAdjustmentRate(address,address)"(
      pool: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentRate(
      pool: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "currentRate(address,address)"(
      pool: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    enterDefault(borrower: string, overrides?: CallOverrides): Promise<void>;

    "enterDefault(address)"(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _creditOracle: string,
      _rateModel: string,
      _borrowingMutex: string,
      _poolFactory: string,
      _loanFactory: string,
      _stakingVault: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address,address,address,address)"(
      _creditOracle: string,
      _rateModel: string,
      _borrowingMutex: string,
      _poolFactory: string,
      _loanFactory: string,
      _stakingVault: string,
      overrides?: CallOverrides
    ): Promise<void>;

    interest(
      pool: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "interest(address,address)"(
      pool: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    interestRepaymentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "interestRepaymentPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    isBorrowerAllowed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isBorrowerAllowed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    "isInitialized()"(overrides?: CallOverrides): Promise<boolean>;

    isOverLimit(
      pool: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isOverLimit(address,address)"(
      pool: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOverProFormaLimit(
      borrower: string,
      stakedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isOverProFormaLimit(address,uint256)"(
      borrower: string,
      stakedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    loanFactory(overrides?: CallOverrides): Promise<string>;

    "loanFactory()"(overrides?: CallOverrides): Promise<string>;

    minCreditScore(overrides?: CallOverrides): Promise<BigNumber>;

    "minCreditScore()"(overrides?: CallOverrides): Promise<BigNumber>;

    nextInterestRepayTime(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nextInterestRepayTime(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    overBorrowLimitTime(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "overBorrowLimitTime(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    payInterest(pool: string, overrides?: CallOverrides): Promise<void>;

    "payInterest(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<string>;

    poke(pool: string, overrides?: CallOverrides): Promise<void>;

    "poke(address)"(pool: string, overrides?: CallOverrides): Promise<void>;

    pokeAll(overrides?: CallOverrides): Promise<void>;

    "pokeAll()"(overrides?: CallOverrides): Promise<void>;

    pokeBorrowLimitTimer(
      pool: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "pokeBorrowLimitTimer(address,address)"(
      pool: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<void>;

    poolBasicRate(pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    "poolBasicRate(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolCreditValue(
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poolCreditValue(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolFactory(overrides?: CallOverrides): Promise<string>;

    "poolFactory()"(overrides?: CallOverrides): Promise<string>;

    poolTotalInterest(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poolTotalInterest(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolTotalPaidInterest(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poolTotalPaidInterest(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rateModel(overrides?: CallOverrides): Promise<string>;

    "rateModel()"(overrides?: CallOverrides): Promise<string>;

    repay(
      pool: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "repay(address,uint256)"(
      pool: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    repayInFull(pool: string, overrides?: CallOverrides): Promise<void>;

    "repayInFull(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setInterestRepaymentPeriod(
      newPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setInterestRepaymentPeriod(uint256)"(
      newPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLoanFactory(
      newLoanFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLoanFactory(address)"(
      newLoanFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinCreditScore(
      newValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinCreditScore(uint256)"(
      newValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolFactory(
      newPoolFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPoolFactory(address)"(
      newPoolFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRateModel(
      newRateModel: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRateModel(address)"(
      newRateModel: string,
      overrides?: CallOverrides
    ): Promise<void>;

    singleCreditValue(
      pool: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "singleCreditValue(address,address)"(
      pool: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakingVault(overrides?: CallOverrides): Promise<string>;

    "stakingVault()"(overrides?: CallOverrides): Promise<string>;

    totalBorrowed(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalBorrowed(address)"(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAllCreditScores(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateAllCreditScores(address)"(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCreditScore(
      pool: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateCreditScore(address,address)"(
      pool: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<void>;

    usedBucketsBitmap(overrides?: CallOverrides): Promise<BigNumber>;

    "usedBucketsBitmap()"(overrides?: CallOverrides): Promise<BigNumber>;

    utilizationAdjustmentRate(
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "utilizationAdjustmentRate(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    BorrowerAllowed(
      who: string | null,
      isAllowed: null
    ): TypedEventFilter<[string, boolean], { who: string; isAllowed: boolean }>;

    EnteredDefault(
      borrower: null,
      reason: null
    ): TypedEventFilter<[string, number], { borrower: string; reason: number }>;

    InterestPaid(
      pool: null,
      borrower: null,
      amount: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { pool: string; borrower: string; amount: BigNumber }
    >;

    InterestRepaymentPeriodChanged(
      newPeriod: null
    ): TypedEventFilter<[BigNumber], { newPeriod: BigNumber }>;

    LoanFactoryChanged(
      newLoanFactory: null
    ): TypedEventFilter<[string], { newLoanFactory: string }>;

    MinCreditScoreChanged(
      newValue: null
    ): TypedEventFilter<[BigNumber], { newValue: BigNumber }>;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    PoolAllowed(
      pool: null,
      isAllowed: null
    ): TypedEventFilter<
      [string, boolean],
      { pool: string; isAllowed: boolean }
    >;

    PoolFactoryChanged(
      newPoolFactory: null
    ): TypedEventFilter<[string], { newPoolFactory: string }>;

    PrincipalRepaid(
      pool: null,
      borrower: null,
      amount: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { pool: string; borrower: string; amount: BigNumber }
    >;

    RateModelChanged(
      newRateModel: null
    ): TypedEventFilter<[string], { newRateModel: string }>;
  };

  estimateGas: {
    allowBorrower(
      who: string,
      isAllowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "allowBorrower(address,bool)"(
      who: string,
      isAllowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrow(
      pool: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "borrow(address,uint256)"(
      pool: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrowLimit(
      pool: string,
      borrower: string,
      _totalBorrowed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "borrowLimit(address,address,uint256)"(
      pool: string,
      borrower: string,
      _totalBorrowed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowLimitAdjustment(
      score: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "borrowLimitAdjustment(uint8)"(
      score: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "borrowed(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowerTotalPaidInterest(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "borrowerTotalPaidInterest(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowingMutex(overrides?: CallOverrides): Promise<BigNumber>;

    "borrowingMutex()"(overrides?: CallOverrides): Promise<BigNumber>;

    buckets(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "buckets(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    creditOracle(overrides?: CallOverrides): Promise<BigNumber>;

    "creditOracle()"(overrides?: CallOverrides): Promise<BigNumber>;

    creditScore(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "creditScore(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creditScoreAdjustmentRate(
      pool: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "creditScoreAdjustmentRate(address,address)"(
      pool: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentRate(
      pool: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "currentRate(address,address)"(
      pool: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    enterDefault(
      borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "enterDefault(address)"(
      borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _creditOracle: string,
      _rateModel: string,
      _borrowingMutex: string,
      _poolFactory: string,
      _loanFactory: string,
      _stakingVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(address,address,address,address,address,address)"(
      _creditOracle: string,
      _rateModel: string,
      _borrowingMutex: string,
      _poolFactory: string,
      _loanFactory: string,
      _stakingVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    interest(
      pool: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "interest(address,address)"(
      pool: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    interestRepaymentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "interestRepaymentPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    isBorrowerAllowed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isBorrowerAllowed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    "isInitialized()"(overrides?: CallOverrides): Promise<BigNumber>;

    isOverLimit(
      pool: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isOverLimit(address,address)"(
      pool: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOverProFormaLimit(
      borrower: string,
      stakedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isOverProFormaLimit(address,uint256)"(
      borrower: string,
      stakedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    loanFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "loanFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    minCreditScore(overrides?: CallOverrides): Promise<BigNumber>;

    "minCreditScore()"(overrides?: CallOverrides): Promise<BigNumber>;

    nextInterestRepayTime(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nextInterestRepayTime(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    overBorrowLimitTime(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "overBorrowLimitTime(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    payInterest(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "payInterest(address)"(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    poke(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "poke(address)"(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pokeAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "pokeAll()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pokeBorrowLimitTimer(
      pool: string,
      borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "pokeBorrowLimitTimer(address,address)"(
      pool: string,
      borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    poolBasicRate(pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    "poolBasicRate(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolCreditValue(
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poolCreditValue(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "poolFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolTotalInterest(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poolTotalInterest(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolTotalPaidInterest(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poolTotalPaidInterest(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rateModel(overrides?: CallOverrides): Promise<BigNumber>;

    "rateModel()"(overrides?: CallOverrides): Promise<BigNumber>;

    repay(
      pool: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "repay(address,uint256)"(
      pool: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repayInFull(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "repayInFull(address)"(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInterestRepaymentPeriod(
      newPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setInterestRepaymentPeriod(uint256)"(
      newPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLoanFactory(
      newLoanFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setLoanFactory(address)"(
      newLoanFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinCreditScore(
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMinCreditScore(uint256)"(
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPoolFactory(
      newPoolFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setPoolFactory(address)"(
      newPoolFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRateModel(
      newRateModel: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setRateModel(address)"(
      newRateModel: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    singleCreditValue(
      pool: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "singleCreditValue(address,address)"(
      pool: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakingVault(overrides?: CallOverrides): Promise<BigNumber>;

    "stakingVault()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalBorrowed(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalBorrowed(address)"(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateAllCreditScores(
      borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateAllCreditScores(address)"(
      borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCreditScore(
      pool: string,
      borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateCreditScore(address,address)"(
      pool: string,
      borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usedBucketsBitmap(overrides?: CallOverrides): Promise<BigNumber>;

    "usedBucketsBitmap()"(overrides?: CallOverrides): Promise<BigNumber>;

    utilizationAdjustmentRate(
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "utilizationAdjustmentRate(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowBorrower(
      who: string,
      isAllowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "allowBorrower(address,bool)"(
      who: string,
      isAllowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrow(
      pool: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "borrow(address,uint256)"(
      pool: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrowLimit(
      pool: string,
      borrower: string,
      _totalBorrowed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "borrowLimit(address,address,uint256)"(
      pool: string,
      borrower: string,
      _totalBorrowed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowLimitAdjustment(
      score: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "borrowLimitAdjustment(uint8)"(
      score: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "borrowed(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowerTotalPaidInterest(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "borrowerTotalPaidInterest(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowingMutex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "borrowingMutex()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buckets(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "buckets(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    creditOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "creditOracle()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    creditScore(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "creditScore(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creditScoreAdjustmentRate(
      pool: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "creditScoreAdjustmentRate(address,address)"(
      pool: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentRate(
      pool: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "currentRate(address,address)"(
      pool: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    enterDefault(
      borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "enterDefault(address)"(
      borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _creditOracle: string,
      _rateModel: string,
      _borrowingMutex: string,
      _poolFactory: string,
      _loanFactory: string,
      _stakingVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address,address,address,address)"(
      _creditOracle: string,
      _rateModel: string,
      _borrowingMutex: string,
      _poolFactory: string,
      _loanFactory: string,
      _stakingVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    interest(
      pool: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "interest(address,address)"(
      pool: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    interestRepaymentPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "interestRepaymentPeriod()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isBorrowerAllowed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isBorrowerAllowed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isInitialized()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOverLimit(
      pool: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isOverLimit(address,address)"(
      pool: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOverProFormaLimit(
      borrower: string,
      stakedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isOverProFormaLimit(address,uint256)"(
      borrower: string,
      stakedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    loanFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "loanFactory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minCreditScore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minCreditScore()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextInterestRepayTime(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nextInterestRepayTime(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    overBorrowLimitTime(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "overBorrowLimitTime(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payInterest(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "payInterest(address)"(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poke(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "poke(address)"(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pokeAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "pokeAll()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pokeBorrowLimitTimer(
      pool: string,
      borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "pokeBorrowLimitTimer(address,address)"(
      pool: string,
      borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    poolBasicRate(
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolBasicRate(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolCreditValue(
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolCreditValue(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolFactory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolTotalInterest(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolTotalInterest(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolTotalPaidInterest(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolTotalPaidInterest(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rateModel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rateModel()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    repay(
      pool: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "repay(address,uint256)"(
      pool: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repayInFull(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "repayInFull(address)"(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInterestRepaymentPeriod(
      newPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setInterestRepaymentPeriod(uint256)"(
      newPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLoanFactory(
      newLoanFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setLoanFactory(address)"(
      newLoanFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinCreditScore(
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMinCreditScore(uint256)"(
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPoolFactory(
      newPoolFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setPoolFactory(address)"(
      newPoolFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRateModel(
      newRateModel: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setRateModel(address)"(
      newRateModel: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    singleCreditValue(
      pool: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "singleCreditValue(address,address)"(
      pool: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakingVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stakingVault()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBorrowed(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalBorrowed(address)"(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateAllCreditScores(
      borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateAllCreditScores(address)"(
      borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCreditScore(
      pool: string,
      borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateCreditScore(address,address)"(
      pool: string,
      borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usedBucketsBitmap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "usedBucketsBitmap()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    utilizationAdjustmentRate(
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "utilizationAdjustmentRate(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
