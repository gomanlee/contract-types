/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TestCurveStrategyInterface extends ethers.utils.Interface {
  functions: {
    "N_TOKENS()": FunctionFragment;
    "_1Inch()": FunctionFragment;
    "calcTokenAmount(uint256)": FunctionFragment;
    "calcTokenDepositAmount(uint256)": FunctionFragment;
    "calcTokenWithdrawAmount(uint256)": FunctionFragment;
    "claimOwnership()": FunctionFragment;
    "collectCrv()": FunctionFragment;
    "crvBalance()": FunctionFragment;
    "crvOracle()": FunctionFragment;
    "crvValue()": FunctionFragment;
    "curveGauge()": FunctionFragment;
    "curvePool()": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "initialize(address,address,address,address,address,address,uint256,uint8)": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "maxPriceSlippage()": FunctionFragment;
    "minter()": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "pool()": FunctionFragment;
    "sellCrv(bytes)": FunctionFragment;
    "setMaxPriceSlippage(uint256)": FunctionFragment;
    "setOracle(address)": FunctionFragment;
    "testInitialize(address,address,address,address,address,address,address,uint256,uint8)": FunctionFragment;
    "token()": FunctionFragment;
    "tokenIndex()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "value()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawAll()": FunctionFragment;
    "yTokenBalance()": FunctionFragment;
    "yTokenValue()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "N_TOKENS", values?: undefined): string;
  encodeFunctionData(functionFragment: "_1Inch", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calcTokenAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcTokenDepositAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcTokenWithdrawAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectCrv",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "crvBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "crvOracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "crvValue", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "curveGauge",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "curvePool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxPriceSlippage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "minter", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(functionFragment: "sellCrv", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "setMaxPriceSlippage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setOracle", values: [string]): string;
  encodeFunctionData(
    functionFragment: "testInitialize",
    values: [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "value", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "yTokenBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "yTokenValue",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "N_TOKENS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_1Inch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calcTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcTokenDepositAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcTokenWithdrawAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collectCrv", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "crvBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "crvOracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "crvValue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "curveGauge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "curvePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxPriceSlippage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sellCrv", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPriceSlippage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "testInitialize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenIndex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "value", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "yTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "yTokenValue",
    data: BytesLike
  ): Result;

  events: {
    "Deposited(uint256,uint256)": EventFragment;
    "MaxPriceSlippageChanged(uint256)": EventFragment;
    "OracleChanged(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Withdrawn(uint256,uint256)": EventFragment;
    "WithdrawnAll(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxPriceSlippageChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawnAll"): EventFragment;
}

export class TestCurveStrategy extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TestCurveStrategyInterface;

  functions: {
    N_TOKENS(overrides?: CallOverrides): Promise<[number]>;

    "N_TOKENS()"(overrides?: CallOverrides): Promise<[number]>;

    _1Inch(overrides?: CallOverrides): Promise<[string]>;

    "_1Inch()"(overrides?: CallOverrides): Promise<[string]>;

    calcTokenAmount(
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calcTokenAmount(uint256)"(
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcTokenDepositAmount(
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calcTokenDepositAmount(uint256)"(
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcTokenWithdrawAmount(
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calcTokenWithdrawAmount(uint256)"(
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collectCrv(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "collectCrv()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    crvBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    "crvBalance()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    crvOracle(overrides?: CallOverrides): Promise<[string]>;

    "crvOracle()"(overrides?: CallOverrides): Promise<[string]>;

    crvValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    "crvValue()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    curveGauge(overrides?: CallOverrides): Promise<[string]>;

    "curveGauge()"(overrides?: CallOverrides): Promise<[string]>;

    curvePool(overrides?: CallOverrides): Promise<[string]>;

    "curvePool()"(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _pool: string,
      _curvePool: string,
      _curveGauge: string,
      _minter: string,
      _1inchExchange: string,
      _crvOracle: string,
      _maxPriceSlippage: BigNumberish,
      _tokenIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(address,address,address,address,address,address,uint256,uint8)"(
      _pool: string,
      _curvePool: string,
      _curveGauge: string,
      _minter: string,
      _1inchExchange: string,
      _crvOracle: string,
      _maxPriceSlippage: BigNumberish,
      _tokenIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    "isInitialized()"(overrides?: CallOverrides): Promise<[boolean]>;

    maxPriceSlippage(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maxPriceSlippage()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    minter(overrides?: CallOverrides): Promise<[string]>;

    "minter()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<[string]>;

    pool(overrides?: CallOverrides): Promise<[string]>;

    "pool()"(overrides?: CallOverrides): Promise<[string]>;

    sellCrv(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "sellCrv(bytes)"(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxPriceSlippage(
      _maxPriceSlippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMaxPriceSlippage(uint256)"(
      _maxPriceSlippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOracle(
      _crvOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setOracle(address)"(
      _crvOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testInitialize(
      _token: string,
      _pool: string,
      _curvePool: string,
      _curveGauge: string,
      _minter: string,
      _1inchExchange: string,
      _crvOracle: string,
      _maxPriceSlippage: BigNumberish,
      _tokenIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "testInitialize(address,address,address,address,address,address,address,uint256,uint8)"(
      _token: string,
      _pool: string,
      _curvePool: string,
      _curveGauge: string,
      _minter: string,
      _1inchExchange: string,
      _crvOracle: string,
      _maxPriceSlippage: BigNumberish,
      _tokenIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    "token()"(overrides?: CallOverrides): Promise<[string]>;

    tokenIndex(overrides?: CallOverrides): Promise<[number]>;

    "tokenIndex()"(overrides?: CallOverrides): Promise<[number]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    value(overrides?: CallOverrides): Promise<[BigNumber]>;

    "value()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      minAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdraw(uint256)"(
      minAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawAll()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    yTokenBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    "yTokenBalance()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    yTokenValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    "yTokenValue()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  N_TOKENS(overrides?: CallOverrides): Promise<number>;

  "N_TOKENS()"(overrides?: CallOverrides): Promise<number>;

  _1Inch(overrides?: CallOverrides): Promise<string>;

  "_1Inch()"(overrides?: CallOverrides): Promise<string>;

  calcTokenAmount(
    currencyAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calcTokenAmount(uint256)"(
    currencyAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcTokenDepositAmount(
    currencyAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calcTokenDepositAmount(uint256)"(
    currencyAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcTokenWithdrawAmount(
    currencyAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calcTokenWithdrawAmount(uint256)"(
    currencyAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collectCrv(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "collectCrv()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  crvBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "crvBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  crvOracle(overrides?: CallOverrides): Promise<string>;

  "crvOracle()"(overrides?: CallOverrides): Promise<string>;

  crvValue(overrides?: CallOverrides): Promise<BigNumber>;

  "crvValue()"(overrides?: CallOverrides): Promise<BigNumber>;

  curveGauge(overrides?: CallOverrides): Promise<string>;

  "curveGauge()"(overrides?: CallOverrides): Promise<string>;

  curvePool(overrides?: CallOverrides): Promise<string>;

  "curvePool()"(overrides?: CallOverrides): Promise<string>;

  deposit(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deposit(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _pool: string,
    _curvePool: string,
    _curveGauge: string,
    _minter: string,
    _1inchExchange: string,
    _crvOracle: string,
    _maxPriceSlippage: BigNumberish,
    _tokenIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(address,address,address,address,address,address,uint256,uint8)"(
    _pool: string,
    _curvePool: string,
    _curveGauge: string,
    _minter: string,
    _1inchExchange: string,
    _crvOracle: string,
    _maxPriceSlippage: BigNumberish,
    _tokenIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  "isInitialized()"(overrides?: CallOverrides): Promise<boolean>;

  maxPriceSlippage(overrides?: CallOverrides): Promise<BigNumber>;

  "maxPriceSlippage()"(overrides?: CallOverrides): Promise<BigNumber>;

  minter(overrides?: CallOverrides): Promise<string>;

  "minter()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  "pendingOwner()"(overrides?: CallOverrides): Promise<string>;

  pool(overrides?: CallOverrides): Promise<string>;

  "pool()"(overrides?: CallOverrides): Promise<string>;

  sellCrv(
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "sellCrv(bytes)"(
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxPriceSlippage(
    _maxPriceSlippage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMaxPriceSlippage(uint256)"(
    _maxPriceSlippage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOracle(
    _crvOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setOracle(address)"(
    _crvOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testInitialize(
    _token: string,
    _pool: string,
    _curvePool: string,
    _curveGauge: string,
    _minter: string,
    _1inchExchange: string,
    _crvOracle: string,
    _maxPriceSlippage: BigNumberish,
    _tokenIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "testInitialize(address,address,address,address,address,address,address,uint256,uint8)"(
    _token: string,
    _pool: string,
    _curvePool: string,
    _curveGauge: string,
    _minter: string,
    _1inchExchange: string,
    _crvOracle: string,
    _maxPriceSlippage: BigNumberish,
    _tokenIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  tokenIndex(overrides?: CallOverrides): Promise<number>;

  "tokenIndex()"(overrides?: CallOverrides): Promise<number>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  value(overrides?: CallOverrides): Promise<BigNumber>;

  "value()"(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    minAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdraw(uint256)"(
    minAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAll(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawAll()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  yTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "yTokenBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  yTokenValue(overrides?: CallOverrides): Promise<BigNumber>;

  "yTokenValue()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    N_TOKENS(overrides?: CallOverrides): Promise<number>;

    "N_TOKENS()"(overrides?: CallOverrides): Promise<number>;

    _1Inch(overrides?: CallOverrides): Promise<string>;

    "_1Inch()"(overrides?: CallOverrides): Promise<string>;

    calcTokenAmount(
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcTokenAmount(uint256)"(
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcTokenDepositAmount(
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcTokenDepositAmount(uint256)"(
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcTokenWithdrawAmount(
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcTokenWithdrawAmount(uint256)"(
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimOwnership(overrides?: CallOverrides): Promise<void>;

    "claimOwnership()"(overrides?: CallOverrides): Promise<void>;

    collectCrv(overrides?: CallOverrides): Promise<void>;

    "collectCrv()"(overrides?: CallOverrides): Promise<void>;

    crvBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "crvBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    crvOracle(overrides?: CallOverrides): Promise<string>;

    "crvOracle()"(overrides?: CallOverrides): Promise<string>;

    crvValue(overrides?: CallOverrides): Promise<BigNumber>;

    "crvValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    curveGauge(overrides?: CallOverrides): Promise<string>;

    "curveGauge()"(overrides?: CallOverrides): Promise<string>;

    curvePool(overrides?: CallOverrides): Promise<string>;

    "curvePool()"(overrides?: CallOverrides): Promise<string>;

    deposit(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _pool: string,
      _curvePool: string,
      _curveGauge: string,
      _minter: string,
      _1inchExchange: string,
      _crvOracle: string,
      _maxPriceSlippage: BigNumberish,
      _tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address,address,address,address,uint256,uint8)"(
      _pool: string,
      _curvePool: string,
      _curveGauge: string,
      _minter: string,
      _1inchExchange: string,
      _crvOracle: string,
      _maxPriceSlippage: BigNumberish,
      _tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    "isInitialized()"(overrides?: CallOverrides): Promise<boolean>;

    maxPriceSlippage(overrides?: CallOverrides): Promise<BigNumber>;

    "maxPriceSlippage()"(overrides?: CallOverrides): Promise<BigNumber>;

    minter(overrides?: CallOverrides): Promise<string>;

    "minter()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<string>;

    pool(overrides?: CallOverrides): Promise<string>;

    "pool()"(overrides?: CallOverrides): Promise<string>;

    sellCrv(data: BytesLike, overrides?: CallOverrides): Promise<void>;

    "sellCrv(bytes)"(data: BytesLike, overrides?: CallOverrides): Promise<void>;

    setMaxPriceSlippage(
      _maxPriceSlippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxPriceSlippage(uint256)"(
      _maxPriceSlippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOracle(_crvOracle: string, overrides?: CallOverrides): Promise<void>;

    "setOracle(address)"(
      _crvOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    testInitialize(
      _token: string,
      _pool: string,
      _curvePool: string,
      _curveGauge: string,
      _minter: string,
      _1inchExchange: string,
      _crvOracle: string,
      _maxPriceSlippage: BigNumberish,
      _tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "testInitialize(address,address,address,address,address,address,address,uint256,uint8)"(
      _token: string,
      _pool: string,
      _curvePool: string,
      _curveGauge: string,
      _minter: string,
      _1inchExchange: string,
      _crvOracle: string,
      _maxPriceSlippage: BigNumberish,
      _tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;

    tokenIndex(overrides?: CallOverrides): Promise<number>;

    "tokenIndex()"(overrides?: CallOverrides): Promise<number>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    value(overrides?: CallOverrides): Promise<BigNumber>;

    "value()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(minAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "withdraw(uint256)"(
      minAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAll(overrides?: CallOverrides): Promise<void>;

    "withdrawAll()"(overrides?: CallOverrides): Promise<void>;

    yTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "yTokenBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    yTokenValue(overrides?: CallOverrides): Promise<BigNumber>;

    "yTokenValue()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    Deposited(
      depositedAmount: null,
      receivedYAmount: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { depositedAmount: BigNumber; receivedYAmount: BigNumber }
    >;

    MaxPriceSlippageChanged(
      maxPriceSlippage: null
    ): TypedEventFilter<[BigNumber], { maxPriceSlippage: BigNumber }>;

    OracleChanged(
      newOracle: null
    ): TypedEventFilter<[string], { newOracle: string }>;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    Withdrawn(
      minAmount: null,
      yAmount: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { minAmount: BigNumber; yAmount: BigNumber }
    >;

    WithdrawnAll(
      yAmount: null
    ): TypedEventFilter<[BigNumber], { yAmount: BigNumber }>;
  };

  estimateGas: {
    N_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

    "N_TOKENS()"(overrides?: CallOverrides): Promise<BigNumber>;

    _1Inch(overrides?: CallOverrides): Promise<BigNumber>;

    "_1Inch()"(overrides?: CallOverrides): Promise<BigNumber>;

    calcTokenAmount(
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcTokenAmount(uint256)"(
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcTokenDepositAmount(
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcTokenDepositAmount(uint256)"(
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcTokenWithdrawAmount(
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcTokenWithdrawAmount(uint256)"(
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collectCrv(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "collectCrv()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    crvBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "crvBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    crvOracle(overrides?: CallOverrides): Promise<BigNumber>;

    "crvOracle()"(overrides?: CallOverrides): Promise<BigNumber>;

    crvValue(overrides?: CallOverrides): Promise<BigNumber>;

    "crvValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    curveGauge(overrides?: CallOverrides): Promise<BigNumber>;

    "curveGauge()"(overrides?: CallOverrides): Promise<BigNumber>;

    curvePool(overrides?: CallOverrides): Promise<BigNumber>;

    "curvePool()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _pool: string,
      _curvePool: string,
      _curveGauge: string,
      _minter: string,
      _1inchExchange: string,
      _crvOracle: string,
      _maxPriceSlippage: BigNumberish,
      _tokenIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(address,address,address,address,address,address,uint256,uint8)"(
      _pool: string,
      _curvePool: string,
      _curveGauge: string,
      _minter: string,
      _1inchExchange: string,
      _crvOracle: string,
      _maxPriceSlippage: BigNumberish,
      _tokenIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    "isInitialized()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxPriceSlippage(overrides?: CallOverrides): Promise<BigNumber>;

    "maxPriceSlippage()"(overrides?: CallOverrides): Promise<BigNumber>;

    minter(overrides?: CallOverrides): Promise<BigNumber>;

    "minter()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<BigNumber>;

    "pool()"(overrides?: CallOverrides): Promise<BigNumber>;

    sellCrv(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "sellCrv(bytes)"(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxPriceSlippage(
      _maxPriceSlippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMaxPriceSlippage(uint256)"(
      _maxPriceSlippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOracle(
      _crvOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setOracle(address)"(
      _crvOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testInitialize(
      _token: string,
      _pool: string,
      _curvePool: string,
      _curveGauge: string,
      _minter: string,
      _1inchExchange: string,
      _crvOracle: string,
      _maxPriceSlippage: BigNumberish,
      _tokenIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "testInitialize(address,address,address,address,address,address,address,uint256,uint8)"(
      _token: string,
      _pool: string,
      _curvePool: string,
      _curveGauge: string,
      _minter: string,
      _1inchExchange: string,
      _crvOracle: string,
      _maxPriceSlippage: BigNumberish,
      _tokenIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenIndex(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    value(overrides?: CallOverrides): Promise<BigNumber>;

    "value()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      minAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdraw(uint256)"(
      minAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawAll()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    yTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "yTokenBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    yTokenValue(overrides?: CallOverrides): Promise<BigNumber>;

    "yTokenValue()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    N_TOKENS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "N_TOKENS()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _1Inch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_1Inch()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calcTokenAmount(
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcTokenAmount(uint256)"(
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcTokenDepositAmount(
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcTokenDepositAmount(uint256)"(
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcTokenWithdrawAmount(
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcTokenWithdrawAmount(uint256)"(
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collectCrv(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "collectCrv()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    crvBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "crvBalance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    crvOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "crvOracle()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    crvValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "crvValue()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    curveGauge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "curveGauge()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    curvePool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "curvePool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _pool: string,
      _curvePool: string,
      _curveGauge: string,
      _minter: string,
      _1inchExchange: string,
      _crvOracle: string,
      _maxPriceSlippage: BigNumberish,
      _tokenIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address,address,address,address,uint256,uint8)"(
      _pool: string,
      _curvePool: string,
      _curveGauge: string,
      _minter: string,
      _1inchExchange: string,
      _crvOracle: string,
      _maxPriceSlippage: BigNumberish,
      _tokenIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isInitialized()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxPriceSlippage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxPriceSlippage()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellCrv(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "sellCrv(bytes)"(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxPriceSlippage(
      _maxPriceSlippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMaxPriceSlippage(uint256)"(
      _maxPriceSlippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOracle(
      _crvOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setOracle(address)"(
      _crvOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testInitialize(
      _token: string,
      _pool: string,
      _curvePool: string,
      _curveGauge: string,
      _minter: string,
      _1inchExchange: string,
      _crvOracle: string,
      _maxPriceSlippage: BigNumberish,
      _tokenIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "testInitialize(address,address,address,address,address,address,address,uint256,uint8)"(
      _token: string,
      _pool: string,
      _curvePool: string,
      _curveGauge: string,
      _minter: string,
      _1inchExchange: string,
      _crvOracle: string,
      _maxPriceSlippage: BigNumberish,
      _tokenIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenIndex()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    value(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "value()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      minAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256)"(
      minAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawAll()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    yTokenBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "yTokenBalance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    yTokenValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "yTokenValue()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
