/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface Liquidator2Interface extends ethers.utils.Interface {
  functions: {
    "SAFU()": FunctionFragment;
    "claimOwnership()": FunctionFragment;
    "fetchMaxShare()": FunctionFragment;
    "initialize(address,address,address,address,address,address,address)": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "legacyLiquidate(address)": FunctionFragment;
    "liquidate(address[])": FunctionFragment;
    "loanFactory()": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "poolFactory()": FunctionFragment;
    "setAssurance(address)": FunctionFragment;
    "setFetchMaxShare(uint256)": FunctionFragment;
    "setPoolFactory(address)": FunctionFragment;
    "setStakingVault(address)": FunctionFragment;
    "setTusdPoolOracle(address)": FunctionFragment;
    "stakingVault()": FunctionFragment;
    "stkTru()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "tru()": FunctionFragment;
    "tusdPoolOracle()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "SAFU", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fetchMaxShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "legacyLiquidate",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "liquidate", values: [string[]]): string;
  encodeFunctionData(
    functionFragment: "loanFactory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAssurance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFetchMaxShare",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolFactory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakingVault",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTusdPoolOracle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingVault",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stkTru", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "tru", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tusdPoolOracle",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "SAFU", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchMaxShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "legacyLiquidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "loanFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAssurance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFetchMaxShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakingVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTusdPoolOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stkTru", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tru", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tusdPoolOracle",
    data: BytesLike
  ): Result;

  events: {
    "AssuranceChanged(address)": EventFragment;
    "FetchMaxShareChanged(uint256)": EventFragment;
    "LegacyLiquidated(address,uint256,uint256)": EventFragment;
    "Liquidated(address[],uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PoolFactoryChanged(address)": EventFragment;
    "StakingVaultChanged(address)": EventFragment;
    "TusdPoolOracleChanged(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssuranceChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FetchMaxShareChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LegacyLiquidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Liquidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolFactoryChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakingVaultChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TusdPoolOracleChanged"): EventFragment;
}

export class Liquidator2 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: Liquidator2Interface;

  functions: {
    SAFU(overrides?: CallOverrides): Promise<[string]>;

    "SAFU()"(overrides?: CallOverrides): Promise<[string]>;

    claimOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fetchMaxShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    "fetchMaxShare()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _stkTru: string,
      _tru: string,
      _loanFactory: string,
      _poolFactory: string,
      _SAFU: string,
      _tusdPoolOracle: string,
      _stakingVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(address,address,address,address,address,address,address)"(
      _stkTru: string,
      _tru: string,
      _loanFactory: string,
      _poolFactory: string,
      _SAFU: string,
      _tusdPoolOracle: string,
      _stakingVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    "isInitialized()"(overrides?: CallOverrides): Promise<[boolean]>;

    legacyLiquidate(
      loan: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "legacyLiquidate(address)"(
      loan: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidate(
      debts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "liquidate(address[])"(
      debts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    loanFactory(overrides?: CallOverrides): Promise<[string]>;

    "loanFactory()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<[string]>;

    poolFactory(overrides?: CallOverrides): Promise<[string]>;

    "poolFactory()"(overrides?: CallOverrides): Promise<[string]>;

    setAssurance(
      _SAFU: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setAssurance(address)"(
      _SAFU: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFetchMaxShare(
      newShare: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setFetchMaxShare(uint256)"(
      newShare: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPoolFactory(
      _poolFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setPoolFactory(address)"(
      _poolFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStakingVault(
      _stakingVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setStakingVault(address)"(
      _stakingVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTusdPoolOracle(
      _tusdPoolOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTusdPoolOracle(address)"(
      _tusdPoolOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakingVault(overrides?: CallOverrides): Promise<[string]>;

    "stakingVault()"(overrides?: CallOverrides): Promise<[string]>;

    stkTru(overrides?: CallOverrides): Promise<[string]>;

    "stkTru()"(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tru(overrides?: CallOverrides): Promise<[string]>;

    "tru()"(overrides?: CallOverrides): Promise<[string]>;

    tusdPoolOracle(overrides?: CallOverrides): Promise<[string]>;

    "tusdPoolOracle()"(overrides?: CallOverrides): Promise<[string]>;
  };

  SAFU(overrides?: CallOverrides): Promise<string>;

  "SAFU()"(overrides?: CallOverrides): Promise<string>;

  claimOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fetchMaxShare(overrides?: CallOverrides): Promise<BigNumber>;

  "fetchMaxShare()"(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _stkTru: string,
    _tru: string,
    _loanFactory: string,
    _poolFactory: string,
    _SAFU: string,
    _tusdPoolOracle: string,
    _stakingVault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(address,address,address,address,address,address,address)"(
    _stkTru: string,
    _tru: string,
    _loanFactory: string,
    _poolFactory: string,
    _SAFU: string,
    _tusdPoolOracle: string,
    _stakingVault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  "isInitialized()"(overrides?: CallOverrides): Promise<boolean>;

  legacyLiquidate(
    loan: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "legacyLiquidate(address)"(
    loan: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidate(
    debts: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "liquidate(address[])"(
    debts: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  loanFactory(overrides?: CallOverrides): Promise<string>;

  "loanFactory()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  "pendingOwner()"(overrides?: CallOverrides): Promise<string>;

  poolFactory(overrides?: CallOverrides): Promise<string>;

  "poolFactory()"(overrides?: CallOverrides): Promise<string>;

  setAssurance(
    _SAFU: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setAssurance(address)"(
    _SAFU: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFetchMaxShare(
    newShare: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setFetchMaxShare(uint256)"(
    newShare: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPoolFactory(
    _poolFactory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setPoolFactory(address)"(
    _poolFactory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStakingVault(
    _stakingVault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setStakingVault(address)"(
    _stakingVault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTusdPoolOracle(
    _tusdPoolOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTusdPoolOracle(address)"(
    _tusdPoolOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakingVault(overrides?: CallOverrides): Promise<string>;

  "stakingVault()"(overrides?: CallOverrides): Promise<string>;

  stkTru(overrides?: CallOverrides): Promise<string>;

  "stkTru()"(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tru(overrides?: CallOverrides): Promise<string>;

  "tru()"(overrides?: CallOverrides): Promise<string>;

  tusdPoolOracle(overrides?: CallOverrides): Promise<string>;

  "tusdPoolOracle()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    SAFU(overrides?: CallOverrides): Promise<string>;

    "SAFU()"(overrides?: CallOverrides): Promise<string>;

    claimOwnership(overrides?: CallOverrides): Promise<void>;

    "claimOwnership()"(overrides?: CallOverrides): Promise<void>;

    fetchMaxShare(overrides?: CallOverrides): Promise<BigNumber>;

    "fetchMaxShare()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _stkTru: string,
      _tru: string,
      _loanFactory: string,
      _poolFactory: string,
      _SAFU: string,
      _tusdPoolOracle: string,
      _stakingVault: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address,address,address,address,address)"(
      _stkTru: string,
      _tru: string,
      _loanFactory: string,
      _poolFactory: string,
      _SAFU: string,
      _tusdPoolOracle: string,
      _stakingVault: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    "isInitialized()"(overrides?: CallOverrides): Promise<boolean>;

    legacyLiquidate(loan: string, overrides?: CallOverrides): Promise<void>;

    "legacyLiquidate(address)"(
      loan: string,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidate(debts: string[], overrides?: CallOverrides): Promise<void>;

    "liquidate(address[])"(
      debts: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    loanFactory(overrides?: CallOverrides): Promise<string>;

    "loanFactory()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<string>;

    poolFactory(overrides?: CallOverrides): Promise<string>;

    "poolFactory()"(overrides?: CallOverrides): Promise<string>;

    setAssurance(_SAFU: string, overrides?: CallOverrides): Promise<void>;

    "setAssurance(address)"(
      _SAFU: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFetchMaxShare(
      newShare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFetchMaxShare(uint256)"(
      newShare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolFactory(
      _poolFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPoolFactory(address)"(
      _poolFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setStakingVault(
      _stakingVault: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setStakingVault(address)"(
      _stakingVault: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTusdPoolOracle(
      _tusdPoolOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTusdPoolOracle(address)"(
      _tusdPoolOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stakingVault(overrides?: CallOverrides): Promise<string>;

    "stakingVault()"(overrides?: CallOverrides): Promise<string>;

    stkTru(overrides?: CallOverrides): Promise<string>;

    "stkTru()"(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tru(overrides?: CallOverrides): Promise<string>;

    "tru()"(overrides?: CallOverrides): Promise<string>;

    tusdPoolOracle(overrides?: CallOverrides): Promise<string>;

    "tusdPoolOracle()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    AssuranceChanged(SAFU: null): TypedEventFilter<[string], { SAFU: string }>;

    FetchMaxShareChanged(
      newShare: null
    ): TypedEventFilter<[BigNumber], { newShare: BigNumber }>;

    LegacyLiquidated(
      legacyLoan: null,
      defaultedValue: null,
      withdrawnTru: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { legacyLoan: string; defaultedValue: BigNumber; withdrawnTru: BigNumber }
    >;

    Liquidated(
      debts: null,
      defaultedValue: null,
      withdrawnTru: null
    ): TypedEventFilter<
      [string[], BigNumber, BigNumber],
      { debts: string[]; defaultedValue: BigNumber; withdrawnTru: BigNumber }
    >;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    PoolFactoryChanged(
      poolFactory: null
    ): TypedEventFilter<[string], { poolFactory: string }>;

    StakingVaultChanged(
      stakingVault: null
    ): TypedEventFilter<[string], { stakingVault: string }>;

    TusdPoolOracleChanged(
      poolOracle: null
    ): TypedEventFilter<[string], { poolOracle: string }>;
  };

  estimateGas: {
    SAFU(overrides?: CallOverrides): Promise<BigNumber>;

    "SAFU()"(overrides?: CallOverrides): Promise<BigNumber>;

    claimOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fetchMaxShare(overrides?: CallOverrides): Promise<BigNumber>;

    "fetchMaxShare()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _stkTru: string,
      _tru: string,
      _loanFactory: string,
      _poolFactory: string,
      _SAFU: string,
      _tusdPoolOracle: string,
      _stakingVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(address,address,address,address,address,address,address)"(
      _stkTru: string,
      _tru: string,
      _loanFactory: string,
      _poolFactory: string,
      _SAFU: string,
      _tusdPoolOracle: string,
      _stakingVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    "isInitialized()"(overrides?: CallOverrides): Promise<BigNumber>;

    legacyLiquidate(
      loan: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "legacyLiquidate(address)"(
      loan: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidate(
      debts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "liquidate(address[])"(
      debts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    loanFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "loanFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "poolFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    setAssurance(
      _SAFU: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setAssurance(address)"(
      _SAFU: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFetchMaxShare(
      newShare: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setFetchMaxShare(uint256)"(
      newShare: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPoolFactory(
      _poolFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setPoolFactory(address)"(
      _poolFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStakingVault(
      _stakingVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setStakingVault(address)"(
      _stakingVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTusdPoolOracle(
      _tusdPoolOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTusdPoolOracle(address)"(
      _tusdPoolOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakingVault(overrides?: CallOverrides): Promise<BigNumber>;

    "stakingVault()"(overrides?: CallOverrides): Promise<BigNumber>;

    stkTru(overrides?: CallOverrides): Promise<BigNumber>;

    "stkTru()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tru(overrides?: CallOverrides): Promise<BigNumber>;

    "tru()"(overrides?: CallOverrides): Promise<BigNumber>;

    tusdPoolOracle(overrides?: CallOverrides): Promise<BigNumber>;

    "tusdPoolOracle()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    SAFU(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "SAFU()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fetchMaxShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "fetchMaxShare()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _stkTru: string,
      _tru: string,
      _loanFactory: string,
      _poolFactory: string,
      _SAFU: string,
      _tusdPoolOracle: string,
      _stakingVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address,address,address,address,address)"(
      _stkTru: string,
      _tru: string,
      _loanFactory: string,
      _poolFactory: string,
      _SAFU: string,
      _tusdPoolOracle: string,
      _stakingVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isInitialized()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    legacyLiquidate(
      loan: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "legacyLiquidate(address)"(
      loan: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidate(
      debts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "liquidate(address[])"(
      debts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    loanFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "loanFactory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolFactory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAssurance(
      _SAFU: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setAssurance(address)"(
      _SAFU: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFetchMaxShare(
      newShare: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setFetchMaxShare(uint256)"(
      newShare: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPoolFactory(
      _poolFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setPoolFactory(address)"(
      _poolFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStakingVault(
      _stakingVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setStakingVault(address)"(
      _stakingVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTusdPoolOracle(
      _tusdPoolOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTusdPoolOracle(address)"(
      _tusdPoolOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakingVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stakingVault()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stkTru(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stkTru()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tru(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tru()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tusdPoolOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tusdPoolOracle()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
