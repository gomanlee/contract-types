/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface PauserInterface extends ethers.utils.Interface {
  functions: {
    "EXECUTION_PERIOD()": FunctionFragment;
    "castVote(uint256)": FunctionFragment;
    "claimOwnership()": FunctionFragment;
    "countVotes(address,uint256)": FunctionFragment;
    "execute(uint256)": FunctionFragment;
    "getActions(uint256)": FunctionFragment;
    "getReceipt(uint256,address)": FunctionFragment;
    "governor()": FunctionFragment;
    "initialize(address,address,address,address,uint256)": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "latestRequestIds(address)": FunctionFragment;
    "makeRequest(address[],uint8[])": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "quorumVotes()": FunctionFragment;
    "requestCount()": FunctionFragment;
    "requestMaxOperations()": FunctionFragment;
    "requestThreshold()": FunctionFragment;
    "requests(uint256)": FunctionFragment;
    "state(uint256)": FunctionFragment;
    "stkTRU()": FunctionFragment;
    "timelock()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "trustToken()": FunctionFragment;
    "votingPeriod()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "EXECUTION_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "countVotes",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReceipt",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestRequestIds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "makeRequest",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quorumVotes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestMaxOperations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "state", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "stkTRU", values?: undefined): string;
  encodeFunctionData(functionFragment: "timelock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "trustToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingPeriod",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "EXECUTION_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "countVotes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getActions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getReceipt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestRequestIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quorumVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestMaxOperations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "requests", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stkTRU", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "timelock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "trustToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votingPeriod",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "RequestCreated(uint256,address,address[],uint8[],uint256,uint256)": EventFragment;
    "RequestExecuted(uint256)": EventFragment;
    "VoteCast(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteCast"): EventFragment;
}

export class Pauser extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PauserInterface;

  functions: {
    EXECUTION_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    "EXECUTION_PERIOD()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    castVote(
      requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "castVote(uint256)"(
      requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    countVotes(
      account: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "countVotes(address,uint256)"(
      account: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    execute(
      requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "execute(uint256)"(
      requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getActions(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], number[]] & { targets: string[]; methods: number[] }>;

    "getActions(uint256)"(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], number[]] & { targets: string[]; methods: number[] }>;

    getReceipt(
      requestId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<
      [[boolean, BigNumber] & { hasVoted: boolean; votes: BigNumber }]
    >;

    "getReceipt(uint256,address)"(
      requestId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<
      [[boolean, BigNumber] & { hasVoted: boolean; votes: BigNumber }]
    >;

    governor(overrides?: CallOverrides): Promise<[string]>;

    "governor()"(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _timelock: string,
      _governor: string,
      _trustToken: string,
      _stkTRU: string,
      _votingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(address,address,address,address,uint256)"(
      _timelock: string,
      _governor: string,
      _trustToken: string,
      _stkTRU: string,
      _votingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    "isInitialized()"(overrides?: CallOverrides): Promise<[boolean]>;

    latestRequestIds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "latestRequestIds(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    makeRequest(
      targets: string[],
      methods: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "makeRequest(address[],uint8[])"(
      targets: string[],
      methods: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<[string]>;

    quorumVotes(overrides?: CallOverrides): Promise<[BigNumber]>;

    "quorumVotes()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    requestCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "requestCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    requestMaxOperations(overrides?: CallOverrides): Promise<[BigNumber]>;

    "requestMaxOperations()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    requestThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    "requestThreshold()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    requests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, BigNumber, boolean] & {
        id: BigNumber;
        requester: string;
        startBlock: BigNumber;
        endTime: BigNumber;
        votes: BigNumber;
        executed: boolean;
      }
    >;

    "requests(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, BigNumber, boolean] & {
        id: BigNumber;
        requester: string;
        startBlock: BigNumber;
        endTime: BigNumber;
        votes: BigNumber;
        executed: boolean;
      }
    >;

    state(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    "state(uint256)"(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    stkTRU(overrides?: CallOverrides): Promise<[string]>;

    "stkTRU()"(overrides?: CallOverrides): Promise<[string]>;

    timelock(overrides?: CallOverrides): Promise<[string]>;

    "timelock()"(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    trustToken(overrides?: CallOverrides): Promise<[string]>;

    "trustToken()"(overrides?: CallOverrides): Promise<[string]>;

    votingPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    "votingPeriod()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  EXECUTION_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  "EXECUTION_PERIOD()"(overrides?: CallOverrides): Promise<BigNumber>;

  castVote(
    requestId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "castVote(uint256)"(
    requestId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  countVotes(
    account: string,
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "countVotes(address,uint256)"(
    account: string,
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  execute(
    requestId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "execute(uint256)"(
    requestId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getActions(
    requestId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string[], number[]] & { targets: string[]; methods: number[] }>;

  "getActions(uint256)"(
    requestId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string[], number[]] & { targets: string[]; methods: number[] }>;

  getReceipt(
    requestId: BigNumberish,
    voter: string,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber] & { hasVoted: boolean; votes: BigNumber }>;

  "getReceipt(uint256,address)"(
    requestId: BigNumberish,
    voter: string,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber] & { hasVoted: boolean; votes: BigNumber }>;

  governor(overrides?: CallOverrides): Promise<string>;

  "governor()"(overrides?: CallOverrides): Promise<string>;

  initialize(
    _timelock: string,
    _governor: string,
    _trustToken: string,
    _stkTRU: string,
    _votingPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(address,address,address,address,uint256)"(
    _timelock: string,
    _governor: string,
    _trustToken: string,
    _stkTRU: string,
    _votingPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  "isInitialized()"(overrides?: CallOverrides): Promise<boolean>;

  latestRequestIds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "latestRequestIds(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  makeRequest(
    targets: string[],
    methods: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "makeRequest(address[],uint8[])"(
    targets: string[],
    methods: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  "pendingOwner()"(overrides?: CallOverrides): Promise<string>;

  quorumVotes(overrides?: CallOverrides): Promise<BigNumber>;

  "quorumVotes()"(overrides?: CallOverrides): Promise<BigNumber>;

  requestCount(overrides?: CallOverrides): Promise<BigNumber>;

  "requestCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  requestMaxOperations(overrides?: CallOverrides): Promise<BigNumber>;

  "requestMaxOperations()"(overrides?: CallOverrides): Promise<BigNumber>;

  requestThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  "requestThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

  requests(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, BigNumber, BigNumber, boolean] & {
      id: BigNumber;
      requester: string;
      startBlock: BigNumber;
      endTime: BigNumber;
      votes: BigNumber;
      executed: boolean;
    }
  >;

  "requests(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, BigNumber, BigNumber, boolean] & {
      id: BigNumber;
      requester: string;
      startBlock: BigNumber;
      endTime: BigNumber;
      votes: BigNumber;
      executed: boolean;
    }
  >;

  state(requestId: BigNumberish, overrides?: CallOverrides): Promise<number>;

  "state(uint256)"(
    requestId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  stkTRU(overrides?: CallOverrides): Promise<string>;

  "stkTRU()"(overrides?: CallOverrides): Promise<string>;

  timelock(overrides?: CallOverrides): Promise<string>;

  "timelock()"(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  trustToken(overrides?: CallOverrides): Promise<string>;

  "trustToken()"(overrides?: CallOverrides): Promise<string>;

  votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "votingPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    EXECUTION_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    "EXECUTION_PERIOD()"(overrides?: CallOverrides): Promise<BigNumber>;

    castVote(requestId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "castVote(uint256)"(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimOwnership(overrides?: CallOverrides): Promise<void>;

    "claimOwnership()"(overrides?: CallOverrides): Promise<void>;

    countVotes(
      account: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "countVotes(address,uint256)"(
      account: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    execute(requestId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "execute(uint256)"(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getActions(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], number[]] & { targets: string[]; methods: number[] }>;

    "getActions(uint256)"(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], number[]] & { targets: string[]; methods: number[] }>;

    getReceipt(
      requestId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { hasVoted: boolean; votes: BigNumber }>;

    "getReceipt(uint256,address)"(
      requestId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { hasVoted: boolean; votes: BigNumber }>;

    governor(overrides?: CallOverrides): Promise<string>;

    "governor()"(overrides?: CallOverrides): Promise<string>;

    initialize(
      _timelock: string,
      _governor: string,
      _trustToken: string,
      _stkTRU: string,
      _votingPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address,address,uint256)"(
      _timelock: string,
      _governor: string,
      _trustToken: string,
      _stkTRU: string,
      _votingPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    "isInitialized()"(overrides?: CallOverrides): Promise<boolean>;

    latestRequestIds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "latestRequestIds(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    makeRequest(
      targets: string[],
      methods: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "makeRequest(address[],uint8[])"(
      targets: string[],
      methods: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<string>;

    quorumVotes(overrides?: CallOverrides): Promise<BigNumber>;

    "quorumVotes()"(overrides?: CallOverrides): Promise<BigNumber>;

    requestCount(overrides?: CallOverrides): Promise<BigNumber>;

    "requestCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    requestMaxOperations(overrides?: CallOverrides): Promise<BigNumber>;

    "requestMaxOperations()"(overrides?: CallOverrides): Promise<BigNumber>;

    requestThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    "requestThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

    requests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, BigNumber, boolean] & {
        id: BigNumber;
        requester: string;
        startBlock: BigNumber;
        endTime: BigNumber;
        votes: BigNumber;
        executed: boolean;
      }
    >;

    "requests(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, BigNumber, boolean] & {
        id: BigNumber;
        requester: string;
        startBlock: BigNumber;
        endTime: BigNumber;
        votes: BigNumber;
        executed: boolean;
      }
    >;

    state(requestId: BigNumberish, overrides?: CallOverrides): Promise<number>;

    "state(uint256)"(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    stkTRU(overrides?: CallOverrides): Promise<string>;

    "stkTRU()"(overrides?: CallOverrides): Promise<string>;

    timelock(overrides?: CallOverrides): Promise<string>;

    "timelock()"(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    trustToken(overrides?: CallOverrides): Promise<string>;

    "trustToken()"(overrides?: CallOverrides): Promise<string>;

    votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "votingPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    RequestCreated(
      id: null,
      requester: null,
      targets: null,
      methods: null,
      startBlock: null,
      endTime: null
    ): TypedEventFilter<
      [BigNumber, string, string[], number[], BigNumber, BigNumber],
      {
        id: BigNumber;
        requester: string;
        targets: string[];
        methods: number[];
        startBlock: BigNumber;
        endTime: BigNumber;
      }
    >;

    RequestExecuted(id: null): TypedEventFilter<[BigNumber], { id: BigNumber }>;

    VoteCast(
      voter: null,
      requestId: null,
      votes: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { voter: string; requestId: BigNumber; votes: BigNumber }
    >;
  };

  estimateGas: {
    EXECUTION_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    "EXECUTION_PERIOD()"(overrides?: CallOverrides): Promise<BigNumber>;

    castVote(
      requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "castVote(uint256)"(
      requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    countVotes(
      account: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "countVotes(address,uint256)"(
      account: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    execute(
      requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "execute(uint256)"(
      requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getActions(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getActions(uint256)"(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReceipt(
      requestId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getReceipt(uint256,address)"(
      requestId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    "governor()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _timelock: string,
      _governor: string,
      _trustToken: string,
      _stkTRU: string,
      _votingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(address,address,address,address,uint256)"(
      _timelock: string,
      _governor: string,
      _trustToken: string,
      _stkTRU: string,
      _votingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    "isInitialized()"(overrides?: CallOverrides): Promise<BigNumber>;

    latestRequestIds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "latestRequestIds(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    makeRequest(
      targets: string[],
      methods: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "makeRequest(address[],uint8[])"(
      targets: string[],
      methods: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    quorumVotes(overrides?: CallOverrides): Promise<BigNumber>;

    "quorumVotes()"(overrides?: CallOverrides): Promise<BigNumber>;

    requestCount(overrides?: CallOverrides): Promise<BigNumber>;

    "requestCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    requestMaxOperations(overrides?: CallOverrides): Promise<BigNumber>;

    "requestMaxOperations()"(overrides?: CallOverrides): Promise<BigNumber>;

    requestThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    "requestThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

    requests(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "requests(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    state(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "state(uint256)"(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stkTRU(overrides?: CallOverrides): Promise<BigNumber>;

    "stkTRU()"(overrides?: CallOverrides): Promise<BigNumber>;

    timelock(overrides?: CallOverrides): Promise<BigNumber>;

    "timelock()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    trustToken(overrides?: CallOverrides): Promise<BigNumber>;

    "trustToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "votingPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    EXECUTION_PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "EXECUTION_PERIOD()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    castVote(
      requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "castVote(uint256)"(
      requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    countVotes(
      account: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "countVotes(address,uint256)"(
      account: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    execute(
      requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "execute(uint256)"(
      requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getActions(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getActions(uint256)"(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReceipt(
      requestId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getReceipt(uint256,address)"(
      requestId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _timelock: string,
      _governor: string,
      _trustToken: string,
      _stkTRU: string,
      _votingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address,address,uint256)"(
      _timelock: string,
      _governor: string,
      _trustToken: string,
      _stkTRU: string,
      _votingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isInitialized()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestRequestIds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "latestRequestIds(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    makeRequest(
      targets: string[],
      methods: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "makeRequest(address[],uint8[])"(
      targets: string[],
      methods: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quorumVotes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "quorumVotes()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requestCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "requestCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requestMaxOperations(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "requestMaxOperations()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requestThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "requestThreshold()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "requests(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    state(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "state(uint256)"(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stkTRU(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stkTRU()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timelock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "timelock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    trustToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "trustToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votingPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "votingPeriod()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
