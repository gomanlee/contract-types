/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ComptrollerErrorReporter,
  ComptrollerErrorReporterInterface,
} from "../ComptrollerErrorReporter";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "error",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "info",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "detail",
        type: "uint256",
      },
    ],
    name: "Failure",
    type: "event",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50603e80601d6000396000f3fe6080604052600080fdfea265627a7a723158201545d7cfd3edede80ddbc971e1c623545de797a5b3dd46b6491d7057c007215b64736f6c63430005100032";

type ComptrollerErrorReporterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ComptrollerErrorReporterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ComptrollerErrorReporter__factory extends ContractFactory {
  constructor(...args: ComptrollerErrorReporterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ComptrollerErrorReporter";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ComptrollerErrorReporter> {
    return super.deploy(overrides || {}) as Promise<ComptrollerErrorReporter>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ComptrollerErrorReporter {
    return super.attach(address) as ComptrollerErrorReporter;
  }
  connect(signer: Signer): ComptrollerErrorReporter__factory {
    return super.connect(signer) as ComptrollerErrorReporter__factory;
  }
  static readonly contractName: "ComptrollerErrorReporter";
  public readonly contractName: "ComptrollerErrorReporter";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ComptrollerErrorReporterInterface {
    return new utils.Interface(_abi) as ComptrollerErrorReporterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ComptrollerErrorReporter {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ComptrollerErrorReporter;
  }
}
