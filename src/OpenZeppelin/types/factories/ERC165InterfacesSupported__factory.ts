/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BytesLike,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ERC165InterfacesSupported,
  ERC165InterfacesSupportedInterface,
} from "../ERC165InterfacesSupported";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes4[]",
        name: "interfaceIds",
        type: "bytes4[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "INTERFACE_ID_ERC165",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516106f83803806106f883398181016040528101906100329190610331565b6100486301ffc9a760e01b61009760201b60201c565b60005b81518110156100905761007d82828151811061006a5761006961037a565b5b602002602001015161009760201b60201c565b8080610088906103e2565b91505061004b565b50506104ce565b63ffffffff60e01b817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415610100576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f7906104ae565b60405180910390fd5b6001600080837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6101ce82610185565b810181811067ffffffffffffffff821117156101ed576101ec610196565b5b80604052505050565b600061020061016c565b905061020c82826101c5565b919050565b600067ffffffffffffffff82111561022c5761022b610196565b5b602082029050602081019050919050565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61027781610242565b811461028257600080fd5b50565b6000815190506102948161026e565b92915050565b60006102ad6102a884610211565b6101f6565b905080838252602082019050602084028301858111156102d0576102cf61023d565b5b835b818110156102f957806102e58882610285565b8452602084019350506020810190506102d2565b5050509392505050565b600082601f83011261031857610317610180565b5b815161032884826020860161029a565b91505092915050565b60006020828403121561034757610346610176565b5b600082015167ffffffffffffffff8111156103655761036461017b565b5b61037184828501610303565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b60006103ed826103d8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156104205761041f6103a9565b5b600182019050919050565b600082825260208201905092915050565b7f455243313635496e7465726661636573537570706f727465643a20696e76616c60008201527f696420696e746572666163652069640000000000000000000000000000000000602082015250565b6000610498602f8361042b565b91506104a38261043c565b604082019050919050565b600060208201905081810360008301526104c78161048b565b9050919050565b61021b806104dd6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806301ffc9a71461003b57806334d7006c1461006b575b600080fd5b61005560048036038101906100509190610158565b610089565b60405161006291906101a0565b60405180910390f35b6100736100f0565b60405161008091906101ca565b60405180910390f35b6000806000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b6301ffc9a760e01b81565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61013581610100565b811461014057600080fd5b50565b6000813590506101528161012c565b92915050565b60006020828403121561016e5761016d6100fb565b5b600061017c84828501610143565b91505092915050565b60008115159050919050565b61019a81610185565b82525050565b60006020820190506101b56000830184610191565b92915050565b6101c481610100565b82525050565b60006020820190506101df60008301846101bb565b9291505056fea2646970667358221220717f9bd35679d721c0431e24d03ad04dc56fc6493e26fe97ccc920e6c241f89164736f6c63430008090033";

type ERC165InterfacesSupportedConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC165InterfacesSupportedConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC165InterfacesSupported__factory extends ContractFactory {
  constructor(...args: ERC165InterfacesSupportedConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ERC165InterfacesSupported";
  }

  deploy(
    interfaceIds: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC165InterfacesSupported> {
    return super.deploy(
      interfaceIds,
      overrides || {}
    ) as Promise<ERC165InterfacesSupported>;
  }
  getDeployTransaction(
    interfaceIds: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(interfaceIds, overrides || {});
  }
  attach(address: string): ERC165InterfacesSupported {
    return super.attach(address) as ERC165InterfacesSupported;
  }
  connect(signer: Signer): ERC165InterfacesSupported__factory {
    return super.connect(signer) as ERC165InterfacesSupported__factory;
  }
  static readonly contractName: "ERC165InterfacesSupported";
  public readonly contractName: "ERC165InterfacesSupported";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC165InterfacesSupportedInterface {
    return new utils.Interface(_abi) as ERC165InterfacesSupportedInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC165InterfacesSupported {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ERC165InterfacesSupported;
  }
}
