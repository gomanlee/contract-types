/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { SampleFather, SampleFatherInterface } from "../SampleFather";

const _abi = [
  {
    inputs: [],
    name: "father",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "gramps",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_gramps",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "_father",
        type: "uint256",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "value",
        type: "string",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "isHuman",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610c94806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80631c8aca3b146100675780634a6c9db6146100855780638129fc1c146100a35780638beaf7d7146100ad578063f62d1888146100c9578063fa39851f146100e5575b600080fd5b61006f610103565b60405161007c91906107b3565b60405180910390f35b61008d610109565b60405161009a91906107e9565b60405180910390f35b6100ab61011c565b005b6100c760048036038101906100c2919061098a565b610208565b005b6100e360048036038101906100de91906109e6565b6102f8565b005b6100ed6103e6565b6040516100fa9190610ab7565b60405180910390f35b60025481565b600060029054906101000a900460ff1681565b600060019054906101000a900460ff166101445760008054906101000a900460ff161561014d565b61014c610474565b5b61018c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018390610b4b565b60405180910390fd5b60008060019054906101000a900460ff1615905080156101dc576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6101e4610485565b80156102055760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff166102305760008054906101000a900460ff1615610239565b610238610474565b5b610278576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026f90610b4b565b60405180910390fd5b60008060019054906101000a900460ff1615905080156102c8576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6102d283836104de565b80156102f35760008060016101000a81548160ff0219169083151502179055505b505050565b600060019054906101000a900460ff166103205760008054906101000a900460ff1615610329565b610328610474565b5b610368576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035f90610b4b565b60405180910390fd5b60008060019054906101000a900460ff1615905080156103b8576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6103c182610543565b80156103e25760008060016101000a81548160ff0219169083151502179055505b5050565b600180546103f390610b9a565b80601f016020809104026020016040519081016040528092919081815260200182805461041f90610b9a565b801561046c5780601f106104415761010080835404028352916020019161046c565b820191906000526020600020905b81548152906001019060200180831161044f57829003601f168201915b505050505081565b600061047f306105a6565b15905090565b600060019054906101000a900460ff166104d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104cb90610c3e565b60405180910390fd5b6104dc6105c9565b565b600060019054906101000a900460ff1661052d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052490610c3e565b60405180910390fd5b61053682610543565b61053f81610635565b5050565b600060019054906101000a900460ff16610592576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058990610c3e565b60405180910390fd5b61059a610485565b6105a38161068e565b50565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16610618576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060f90610c3e565b60405180910390fd5b6001600060026101000a81548160ff021916908315150217905550565b600060019054906101000a900460ff16610684576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067b90610c3e565b60405180910390fd5b8060028190555050565b600060019054906101000a900460ff166106dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d490610c3e565b60405180910390fd5b80600190805190602001906106f39291906106f7565b5050565b82805461070390610b9a565b90600052602060002090601f016020900481019282610725576000855561076c565b82601f1061073e57805160ff191683800117855561076c565b8280016001018555821561076c579182015b8281111561076b578251825591602001919060010190610750565b5b509050610779919061077d565b5090565b5b8082111561079657600081600090555060010161077e565b5090565b6000819050919050565b6107ad8161079a565b82525050565b60006020820190506107c860008301846107a4565b92915050565b60008115159050919050565b6107e3816107ce565b82525050565b60006020820190506107fe60008301846107da565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61086b82610822565b810181811067ffffffffffffffff8211171561088a57610889610833565b5b80604052505050565b600061089d610804565b90506108a98282610862565b919050565b600067ffffffffffffffff8211156108c9576108c8610833565b5b6108d282610822565b9050602081019050919050565b82818337600083830152505050565b60006109016108fc846108ae565b610893565b90508281526020810184848401111561091d5761091c61081d565b5b6109288482856108df565b509392505050565b600082601f83011261094557610944610818565b5b81356109558482602086016108ee565b91505092915050565b6109678161079a565b811461097257600080fd5b50565b6000813590506109848161095e565b92915050565b600080604083850312156109a1576109a061080e565b5b600083013567ffffffffffffffff8111156109bf576109be610813565b5b6109cb85828601610930565b92505060206109dc85828601610975565b9150509250929050565b6000602082840312156109fc576109fb61080e565b5b600082013567ffffffffffffffff811115610a1a57610a19610813565b5b610a2684828501610930565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610a69578082015181840152602081019050610a4e565b83811115610a78576000848401525b50505050565b6000610a8982610a2f565b610a938185610a3a565b9350610aa3818560208601610a4b565b610aac81610822565b840191505092915050565b60006020820190508181036000830152610ad18184610a7e565b905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000610b35602e83610a3a565b9150610b4082610ad9565b604082019050919050565b60006020820190508181036000830152610b6481610b28565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610bb257607f821691505b60208210811415610bc657610bc5610b6b565b5b50919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000610c28602b83610a3a565b9150610c3382610bcc565b604082019050919050565b60006020820190508181036000830152610c5781610c1b565b905091905056fea264697066735822122023595928bfcc81c9533fc22ae6c191ab5a6204917663b75249ff14327fd5d46564736f6c63430008090033";

type SampleFatherConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SampleFatherConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SampleFather__factory extends ContractFactory {
  constructor(...args: SampleFatherConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "SampleFather";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SampleFather> {
    return super.deploy(overrides || {}) as Promise<SampleFather>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SampleFather {
    return super.attach(address) as SampleFather;
  }
  connect(signer: Signer): SampleFather__factory {
    return super.connect(signer) as SampleFather__factory;
  }
  static readonly contractName: "SampleFather";
  public readonly contractName: "SampleFather";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SampleFatherInterface {
    return new utils.Interface(_abi) as SampleFatherInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SampleFather {
    return new Contract(address, _abi, signerOrProvider) as SampleFather;
  }
}
