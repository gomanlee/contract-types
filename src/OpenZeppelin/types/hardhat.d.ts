/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "AccessControlEnumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlEnumerable__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "IAccessControlEnumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlEnumerable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "PaymentSplitter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PaymentSplitter__factory>;
    getContractFactory(
      name: "VestingWallet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VestingWallet__factory>;
    getContractFactory(
      name: "GovernorCompatibilityBravo",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorCompatibilityBravo__factory>;
    getContractFactory(
      name: "IGovernorCompatibilityBravo",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGovernorCompatibilityBravo__factory>;
    getContractFactory(
      name: "GovernorCountingSimple",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorCountingSimple__factory>;
    getContractFactory(
      name: "GovernorPreventLateQuorum",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorPreventLateQuorum__factory>;
    getContractFactory(
      name: "GovernorProposalThreshold",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorProposalThreshold__factory>;
    getContractFactory(
      name: "GovernorSettings",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorSettings__factory>;
    getContractFactory(
      name: "GovernorTimelockCompound",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorTimelockCompound__factory>;
    getContractFactory(
      name: "ICompoundTimelock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICompoundTimelock__factory>;
    getContractFactory(
      name: "GovernorTimelockControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorTimelockControl__factory>;
    getContractFactory(
      name: "GovernorVotes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorVotes__factory>;
    getContractFactory(
      name: "GovernorVotesComp",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorVotesComp__factory>;
    getContractFactory(
      name: "GovernorVotesQuorumFraction",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorVotesQuorumFraction__factory>;
    getContractFactory(
      name: "IGovernorTimelock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGovernorTimelock__factory>;
    getContractFactory(
      name: "Governor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Governor__factory>;
    getContractFactory(
      name: "IGovernor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGovernor__factory>;
    getContractFactory(
      name: "TimelockController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TimelockController__factory>;
    getContractFactory(
      name: "IVotes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVotes__factory>;
    getContractFactory(
      name: "Votes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Votes__factory>;
    getContractFactory(
      name: "IERC1822Proxiable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822Proxiable__factory>;
    getContractFactory(
      name: "IERC2612",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC2612__factory>;
    getContractFactory(
      name: "IERC1271",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1271__factory>;
    getContractFactory(
      name: "IERC1363",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1363__factory>;
    getContractFactory(
      name: "IERC1363Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1363Receiver__factory>;
    getContractFactory(
      name: "IERC1363Spender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1363Spender__factory>;
    getContractFactory(
      name: "IERC2981",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC2981__factory>;
    getContractFactory(
      name: "IERC3156FlashBorrower",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC3156FlashBorrower__factory>;
    getContractFactory(
      name: "IERC3156FlashLender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC3156FlashLender__factory>;
    getContractFactory(
      name: "ERC2771Context",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC2771Context__factory>;
    getContractFactory(
      name: "MinimalForwarder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MinimalForwarder__factory>;
    getContractFactory(
      name: "AccessControlEnumerableMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlEnumerableMock__factory>;
    getContractFactory(
      name: "AccessControlMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlMock__factory>;
    getContractFactory(
      name: "AddressImpl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AddressImpl__factory>;
    getContractFactory(
      name: "ArraysImpl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArraysImpl__factory>;
    getContractFactory(
      name: "BadBeaconNotContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BadBeaconNotContract__factory>;
    getContractFactory(
      name: "Base64Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Base64Mock__factory>;
    getContractFactory(
      name: "BitMapMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BitMapMock__factory>;
    getContractFactory(
      name: "CallReceiverMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CallReceiverMock__factory>;
    getContractFactory(
      name: "CheckpointsImpl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CheckpointsImpl__factory>;
    getContractFactory(
      name: "ClashingImplementation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ClashingImplementation__factory>;
    getContractFactory(
      name: "ClonesMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ClonesMock__factory>;
    getContractFactory(
      name: "CompTimelock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CompTimelock__factory>;
    getContractFactory(
      name: "ConditionalEscrowMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConditionalEscrowMock__factory>;
    getContractFactory(
      name: "ContextMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextMock__factory>;
    getContractFactory(
      name: "ContextMockCaller",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextMockCaller__factory>;
    getContractFactory(
      name: "CountersImpl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CountersImpl__factory>;
    getContractFactory(
      name: "Create2Impl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Create2Impl__factory>;
    getContractFactory(
      name: "DummyImplementation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DummyImplementation__factory>;
    getContractFactory(
      name: "DummyImplementationV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DummyImplementationV2__factory>;
    getContractFactory(
      name: "Impl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Impl__factory>;
    getContractFactory(
      name: "ECDSAMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ECDSAMock__factory>;
    getContractFactory(
      name: "EIP712External",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EIP712External__factory>;
    getContractFactory(
      name: "AddressToUintMapMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AddressToUintMapMock__factory>;
    getContractFactory(
      name: "UintToAddressMapMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UintToAddressMapMock__factory>;
    getContractFactory(
      name: "EnumerableAddressSetMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EnumerableAddressSetMock__factory>;
    getContractFactory(
      name: "EnumerableBytes32SetMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EnumerableBytes32SetMock__factory>;
    getContractFactory(
      name: "EnumerableUintSetMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EnumerableUintSetMock__factory>;
    getContractFactory(
      name: "ERC1155BurnableMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155BurnableMock__factory>;
    getContractFactory(
      name: "ERC1155Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155Mock__factory>;
    getContractFactory(
      name: "ERC1155PausableMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155PausableMock__factory>;
    getContractFactory(
      name: "ERC1155ReceiverMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155ReceiverMock__factory>;
    getContractFactory(
      name: "ERC1155SupplyMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155SupplyMock__factory>;
    getContractFactory(
      name: "ERC1271WalletMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1271WalletMock__factory>;
    getContractFactory(
      name: "ERC165InterfacesSupported",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165InterfacesSupported__factory>;
    getContractFactory(
      name: "SupportsInterfaceWithLookupMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SupportsInterfaceWithLookupMock__factory>;
    getContractFactory(
      name: "ERC165MissingData",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165MissingData__factory>;
    getContractFactory(
      name: "ERC165CheckerMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165CheckerMock__factory>;
    getContractFactory(
      name: "ERC165Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Mock__factory>;
    getContractFactory(
      name: "ERC165StorageMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165StorageMock__factory>;
    getContractFactory(
      name: "ERC1820ImplementerMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1820ImplementerMock__factory>;
    getContractFactory(
      name: "ERC20BurnableMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20BurnableMock__factory>;
    getContractFactory(
      name: "ERC20CappedMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20CappedMock__factory>;
    getContractFactory(
      name: "ERC20DecimalsMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20DecimalsMock__factory>;
    getContractFactory(
      name: "ERC20FlashMintMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20FlashMintMock__factory>;
    getContractFactory(
      name: "ERC20Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Mock__factory>;
    getContractFactory(
      name: "ERC20PausableMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20PausableMock__factory>;
    getContractFactory(
      name: "ERC20PermitMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20PermitMock__factory>;
    getContractFactory(
      name: "ERC20SnapshotMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20SnapshotMock__factory>;
    getContractFactory(
      name: "ERC20VotesCompMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20VotesCompMock__factory>;
    getContractFactory(
      name: "ERC20VotesMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20VotesMock__factory>;
    getContractFactory(
      name: "ERC20WrapperMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20WrapperMock__factory>;
    getContractFactory(
      name: "ERC2771ContextMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC2771ContextMock__factory>;
    getContractFactory(
      name: "ERC3156FlashBorrowerMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC3156FlashBorrowerMock__factory>;
    getContractFactory(
      name: "ERC721BurnableMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721BurnableMock__factory>;
    getContractFactory(
      name: "ERC721EnumerableMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721EnumerableMock__factory>;
    getContractFactory(
      name: "ERC721Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Mock__factory>;
    getContractFactory(
      name: "ERC721PausableMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721PausableMock__factory>;
    getContractFactory(
      name: "ERC721ReceiverMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721ReceiverMock__factory>;
    getContractFactory(
      name: "ERC721RoyaltyMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721RoyaltyMock__factory>;
    getContractFactory(
      name: "ERC721URIStorageMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721URIStorageMock__factory>;
    getContractFactory(
      name: "ERC721VotesMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721VotesMock__factory>;
    getContractFactory(
      name: "ERC777Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC777Mock__factory>;
    getContractFactory(
      name: "ERC777SenderRecipientMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC777SenderRecipientMock__factory>;
    getContractFactory(
      name: "EtherReceiverMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EtherReceiverMock__factory>;
    getContractFactory(
      name: "GovernorCompatibilityBravoMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorCompatibilityBravoMock__factory>;
    getContractFactory(
      name: "GovernorCompMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorCompMock__factory>;
    getContractFactory(
      name: "GovernorMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorMock__factory>;
    getContractFactory(
      name: "GovernorPreventLateQuorumMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorPreventLateQuorumMock__factory>;
    getContractFactory(
      name: "GovernorTimelockCompoundMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorTimelockCompoundMock__factory>;
    getContractFactory(
      name: "GovernorTimelockControlMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorTimelockControlMock__factory>;
    getContractFactory(
      name: "GovernorVoteMocks",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorVoteMocks__factory>;
    getContractFactory(
      name: "ConstructorInitializableMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConstructorInitializableMock__factory>;
    getContractFactory(
      name: "InitializableMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InitializableMock__factory>;
    getContractFactory(
      name: "MathMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MathMock__factory>;
    getContractFactory(
      name: "MerkleProofWrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MerkleProofWrapper__factory>;
    getContractFactory(
      name: "MulticallTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MulticallTest__factory>;
    getContractFactory(
      name: "MulticallTokenMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MulticallTokenMock__factory>;
    getContractFactory(
      name: "SampleChild",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SampleChild__factory>;
    getContractFactory(
      name: "SampleFather",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SampleFather__factory>;
    getContractFactory(
      name: "SampleGramps",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SampleGramps__factory>;
    getContractFactory(
      name: "SampleHuman",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SampleHuman__factory>;
    getContractFactory(
      name: "SampleMother",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SampleMother__factory>;
    getContractFactory(
      name: "OwnableMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableMock__factory>;
    getContractFactory(
      name: "PausableMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableMock__factory>;
    getContractFactory(
      name: "PullPaymentMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PullPaymentMock__factory>;
    getContractFactory(
      name: "ReentrancyAttack",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyAttack__factory>;
    getContractFactory(
      name: "ReentrancyMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyMock__factory>;
    getContractFactory(
      name: "Implementation1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Implementation1__factory>;
    getContractFactory(
      name: "Implementation2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Implementation2__factory>;
    getContractFactory(
      name: "Implementation3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Implementation3__factory>;
    getContractFactory(
      name: "Implementation4",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Implementation4__factory>;
    getContractFactory(
      name: "SafeCastMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeCastMock__factory>;
    getContractFactory(
      name: "ERC20NoReturnMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20NoReturnMock__factory>;
    getContractFactory(
      name: "ERC20ReturnFalseMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20ReturnFalseMock__factory>;
    getContractFactory(
      name: "ERC20ReturnTrueMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20ReturnTrueMock__factory>;
    getContractFactory(
      name: "SafeERC20Wrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeERC20Wrapper__factory>;
    getContractFactory(
      name: "SafeMathMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeMathMock__factory>;
    getContractFactory(
      name: "SignatureCheckerMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SignatureCheckerMock__factory>;
    getContractFactory(
      name: "SignedMathMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SignedMathMock__factory>;
    getContractFactory(
      name: "SignedSafeMathMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SignedSafeMathMock__factory>;
    getContractFactory(
      name: "MigratableMockV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MigratableMockV1__factory>;
    getContractFactory(
      name: "MigratableMockV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MigratableMockV2__factory>;
    getContractFactory(
      name: "MigratableMockV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MigratableMockV3__factory>;
    getContractFactory(
      name: "StorageSlotMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StorageSlotMock__factory>;
    getContractFactory(
      name: "StringsMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StringsMock__factory>;
    getContractFactory(
      name: "TimersBlockNumberImpl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TimersBlockNumberImpl__factory>;
    getContractFactory(
      name: "TimersTimestampImpl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TimersTimestampImpl__factory>;
    getContractFactory(
      name: "UUPSUpgradeableLegacyMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UUPSUpgradeableLegacyMock__factory>;
    getContractFactory(
      name: "UUPSUpgradeableMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UUPSUpgradeableMock__factory>;
    getContractFactory(
      name: "UUPSUpgradeableUnsafeMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UUPSUpgradeableUnsafeMock__factory>;
    getContractFactory(
      name: "VotesMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VotesMock__factory>;
    getContractFactory(
      name: "MyGovernor1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MyGovernor1__factory>;
    getContractFactory(
      name: "MyGovernor2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MyGovernor2__factory>;
    getContractFactory(
      name: "MyGovernor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MyGovernor__factory>;
    getContractFactory(
      name: "BeaconProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BeaconProxy__factory>;
    getContractFactory(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeacon__factory>;
    getContractFactory(
      name: "UpgradeableBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpgradeableBeacon__factory>;
    getContractFactory(
      name: "ERC1967Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Proxy__factory>;
    getContractFactory(
      name: "ERC1967Upgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Upgrade__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "ProxyAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxyAdmin__factory>;
    getContractFactory(
      name: "TransparentUpgradeableProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransparentUpgradeableProxy__factory>;
    getContractFactory(
      name: "UUPSUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UUPSUpgradeable__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "PullPayment",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PullPayment__factory>;
    getContractFactory(
      name: "ERC2981",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC2981__factory>;
    getContractFactory(
      name: "ERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155__factory>;
    getContractFactory(
      name: "ERC1155Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155Burnable__factory>;
    getContractFactory(
      name: "ERC1155Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155Pausable__factory>;
    getContractFactory(
      name: "ERC1155Supply",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155Supply__factory>;
    getContractFactory(
      name: "IERC1155MetadataURI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155MetadataURI__factory>;
    getContractFactory(
      name: "IERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155__factory>;
    getContractFactory(
      name: "IERC1155Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Receiver__factory>;
    getContractFactory(
      name: "ERC1155PresetMinterPauser",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155PresetMinterPauser__factory>;
    getContractFactory(
      name: "ERC1155Holder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155Holder__factory>;
    getContractFactory(
      name: "ERC1155Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155Receiver__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Permit__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "ERC20Capped",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Capped__factory>;
    getContractFactory(
      name: "ERC20FlashMint",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20FlashMint__factory>;
    getContractFactory(
      name: "ERC20Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Pausable__factory>;
    getContractFactory(
      name: "ERC20Snapshot",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Snapshot__factory>;
    getContractFactory(
      name: "ERC20Votes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Votes__factory>;
    getContractFactory(
      name: "ERC20VotesComp",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20VotesComp__factory>;
    getContractFactory(
      name: "ERC20Wrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Wrapper__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC20PresetFixedSupply",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20PresetFixedSupply__factory>;
    getContractFactory(
      name: "ERC20PresetMinterPauser",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20PresetMinterPauser__factory>;
    getContractFactory(
      name: "TokenTimelock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenTimelock__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "ERC721Votes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Votes__factory>;
    getContractFactory(
      name: "ERC721Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Burnable__factory>;
    getContractFactory(
      name: "ERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Enumerable__factory>;
    getContractFactory(
      name: "ERC721Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Pausable__factory>;
    getContractFactory(
      name: "ERC721Royalty",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Royalty__factory>;
    getContractFactory(
      name: "ERC721URIStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721URIStorage__factory>;
    getContractFactory(
      name: "IERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Enumerable__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC721PresetMinterPauserAutoId",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721PresetMinterPauserAutoId__factory>;
    getContractFactory(
      name: "ERC721Holder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Holder__factory>;
    getContractFactory(
      name: "ERC777",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC777__factory>;
    getContractFactory(
      name: "IERC777",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC777__factory>;
    getContractFactory(
      name: "IERC777Recipient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC777Recipient__factory>;
    getContractFactory(
      name: "IERC777Sender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC777Sender__factory>;
    getContractFactory(
      name: "ERC777PresetFixedSupply",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC777PresetFixedSupply__factory>;
    getContractFactory(
      name: "ConditionalEscrow",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConditionalEscrow__factory>;
    getContractFactory(
      name: "Escrow",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Escrow__factory>;
    getContractFactory(
      name: "RefundEscrow",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RefundEscrow__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "ERC165Storage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Storage__factory>;
    getContractFactory(
      name: "ERC1820Implementer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1820Implementer__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "IERC1820Implementer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1820Implementer__factory>;
    getContractFactory(
      name: "IERC1820Registry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1820Registry__factory>;
    getContractFactory(
      name: "Multicall",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Multicall__factory>;

    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "AccessControlEnumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlEnumerable>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "IAccessControlEnumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlEnumerable>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "PaymentSplitter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PaymentSplitter>;
    getContractAt(
      name: "VestingWallet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VestingWallet>;
    getContractAt(
      name: "GovernorCompatibilityBravo",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorCompatibilityBravo>;
    getContractAt(
      name: "IGovernorCompatibilityBravo",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGovernorCompatibilityBravo>;
    getContractAt(
      name: "GovernorCountingSimple",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorCountingSimple>;
    getContractAt(
      name: "GovernorPreventLateQuorum",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorPreventLateQuorum>;
    getContractAt(
      name: "GovernorProposalThreshold",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorProposalThreshold>;
    getContractAt(
      name: "GovernorSettings",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorSettings>;
    getContractAt(
      name: "GovernorTimelockCompound",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorTimelockCompound>;
    getContractAt(
      name: "ICompoundTimelock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICompoundTimelock>;
    getContractAt(
      name: "GovernorTimelockControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorTimelockControl>;
    getContractAt(
      name: "GovernorVotes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorVotes>;
    getContractAt(
      name: "GovernorVotesComp",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorVotesComp>;
    getContractAt(
      name: "GovernorVotesQuorumFraction",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorVotesQuorumFraction>;
    getContractAt(
      name: "IGovernorTimelock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGovernorTimelock>;
    getContractAt(
      name: "Governor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Governor>;
    getContractAt(
      name: "IGovernor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGovernor>;
    getContractAt(
      name: "TimelockController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TimelockController>;
    getContractAt(
      name: "IVotes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVotes>;
    getContractAt(
      name: "Votes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Votes>;
    getContractAt(
      name: "IERC1822Proxiable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822Proxiable>;
    getContractAt(
      name: "IERC2612",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC2612>;
    getContractAt(
      name: "IERC1271",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1271>;
    getContractAt(
      name: "IERC1363",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1363>;
    getContractAt(
      name: "IERC1363Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1363Receiver>;
    getContractAt(
      name: "IERC1363Spender",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1363Spender>;
    getContractAt(
      name: "IERC2981",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC2981>;
    getContractAt(
      name: "IERC3156FlashBorrower",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC3156FlashBorrower>;
    getContractAt(
      name: "IERC3156FlashLender",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC3156FlashLender>;
    getContractAt(
      name: "ERC2771Context",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC2771Context>;
    getContractAt(
      name: "MinimalForwarder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MinimalForwarder>;
    getContractAt(
      name: "AccessControlEnumerableMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlEnumerableMock>;
    getContractAt(
      name: "AccessControlMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlMock>;
    getContractAt(
      name: "AddressImpl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AddressImpl>;
    getContractAt(
      name: "ArraysImpl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArraysImpl>;
    getContractAt(
      name: "BadBeaconNotContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BadBeaconNotContract>;
    getContractAt(
      name: "Base64Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Base64Mock>;
    getContractAt(
      name: "BitMapMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BitMapMock>;
    getContractAt(
      name: "CallReceiverMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CallReceiverMock>;
    getContractAt(
      name: "CheckpointsImpl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CheckpointsImpl>;
    getContractAt(
      name: "ClashingImplementation",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ClashingImplementation>;
    getContractAt(
      name: "ClonesMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ClonesMock>;
    getContractAt(
      name: "CompTimelock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CompTimelock>;
    getContractAt(
      name: "ConditionalEscrowMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ConditionalEscrowMock>;
    getContractAt(
      name: "ContextMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextMock>;
    getContractAt(
      name: "ContextMockCaller",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextMockCaller>;
    getContractAt(
      name: "CountersImpl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CountersImpl>;
    getContractAt(
      name: "Create2Impl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Create2Impl>;
    getContractAt(
      name: "DummyImplementation",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DummyImplementation>;
    getContractAt(
      name: "DummyImplementationV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DummyImplementationV2>;
    getContractAt(
      name: "Impl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Impl>;
    getContractAt(
      name: "ECDSAMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ECDSAMock>;
    getContractAt(
      name: "EIP712External",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EIP712External>;
    getContractAt(
      name: "AddressToUintMapMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AddressToUintMapMock>;
    getContractAt(
      name: "UintToAddressMapMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UintToAddressMapMock>;
    getContractAt(
      name: "EnumerableAddressSetMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EnumerableAddressSetMock>;
    getContractAt(
      name: "EnumerableBytes32SetMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EnumerableBytes32SetMock>;
    getContractAt(
      name: "EnumerableUintSetMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EnumerableUintSetMock>;
    getContractAt(
      name: "ERC1155BurnableMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155BurnableMock>;
    getContractAt(
      name: "ERC1155Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155Mock>;
    getContractAt(
      name: "ERC1155PausableMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155PausableMock>;
    getContractAt(
      name: "ERC1155ReceiverMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155ReceiverMock>;
    getContractAt(
      name: "ERC1155SupplyMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155SupplyMock>;
    getContractAt(
      name: "ERC1271WalletMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1271WalletMock>;
    getContractAt(
      name: "ERC165InterfacesSupported",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165InterfacesSupported>;
    getContractAt(
      name: "SupportsInterfaceWithLookupMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SupportsInterfaceWithLookupMock>;
    getContractAt(
      name: "ERC165MissingData",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165MissingData>;
    getContractAt(
      name: "ERC165CheckerMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165CheckerMock>;
    getContractAt(
      name: "ERC165Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Mock>;
    getContractAt(
      name: "ERC165StorageMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165StorageMock>;
    getContractAt(
      name: "ERC1820ImplementerMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1820ImplementerMock>;
    getContractAt(
      name: "ERC20BurnableMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20BurnableMock>;
    getContractAt(
      name: "ERC20CappedMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20CappedMock>;
    getContractAt(
      name: "ERC20DecimalsMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20DecimalsMock>;
    getContractAt(
      name: "ERC20FlashMintMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20FlashMintMock>;
    getContractAt(
      name: "ERC20Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Mock>;
    getContractAt(
      name: "ERC20PausableMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20PausableMock>;
    getContractAt(
      name: "ERC20PermitMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20PermitMock>;
    getContractAt(
      name: "ERC20SnapshotMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20SnapshotMock>;
    getContractAt(
      name: "ERC20VotesCompMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20VotesCompMock>;
    getContractAt(
      name: "ERC20VotesMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20VotesMock>;
    getContractAt(
      name: "ERC20WrapperMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20WrapperMock>;
    getContractAt(
      name: "ERC2771ContextMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC2771ContextMock>;
    getContractAt(
      name: "ERC3156FlashBorrowerMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC3156FlashBorrowerMock>;
    getContractAt(
      name: "ERC721BurnableMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721BurnableMock>;
    getContractAt(
      name: "ERC721EnumerableMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721EnumerableMock>;
    getContractAt(
      name: "ERC721Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Mock>;
    getContractAt(
      name: "ERC721PausableMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721PausableMock>;
    getContractAt(
      name: "ERC721ReceiverMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721ReceiverMock>;
    getContractAt(
      name: "ERC721RoyaltyMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721RoyaltyMock>;
    getContractAt(
      name: "ERC721URIStorageMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721URIStorageMock>;
    getContractAt(
      name: "ERC721VotesMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721VotesMock>;
    getContractAt(
      name: "ERC777Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC777Mock>;
    getContractAt(
      name: "ERC777SenderRecipientMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC777SenderRecipientMock>;
    getContractAt(
      name: "EtherReceiverMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EtherReceiverMock>;
    getContractAt(
      name: "GovernorCompatibilityBravoMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorCompatibilityBravoMock>;
    getContractAt(
      name: "GovernorCompMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorCompMock>;
    getContractAt(
      name: "GovernorMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorMock>;
    getContractAt(
      name: "GovernorPreventLateQuorumMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorPreventLateQuorumMock>;
    getContractAt(
      name: "GovernorTimelockCompoundMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorTimelockCompoundMock>;
    getContractAt(
      name: "GovernorTimelockControlMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorTimelockControlMock>;
    getContractAt(
      name: "GovernorVoteMocks",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorVoteMocks>;
    getContractAt(
      name: "ConstructorInitializableMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ConstructorInitializableMock>;
    getContractAt(
      name: "InitializableMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InitializableMock>;
    getContractAt(
      name: "MathMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MathMock>;
    getContractAt(
      name: "MerkleProofWrapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MerkleProofWrapper>;
    getContractAt(
      name: "MulticallTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MulticallTest>;
    getContractAt(
      name: "MulticallTokenMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MulticallTokenMock>;
    getContractAt(
      name: "SampleChild",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SampleChild>;
    getContractAt(
      name: "SampleFather",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SampleFather>;
    getContractAt(
      name: "SampleGramps",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SampleGramps>;
    getContractAt(
      name: "SampleHuman",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SampleHuman>;
    getContractAt(
      name: "SampleMother",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SampleMother>;
    getContractAt(
      name: "OwnableMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableMock>;
    getContractAt(
      name: "PausableMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PausableMock>;
    getContractAt(
      name: "PullPaymentMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PullPaymentMock>;
    getContractAt(
      name: "ReentrancyAttack",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyAttack>;
    getContractAt(
      name: "ReentrancyMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyMock>;
    getContractAt(
      name: "Implementation1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Implementation1>;
    getContractAt(
      name: "Implementation2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Implementation2>;
    getContractAt(
      name: "Implementation3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Implementation3>;
    getContractAt(
      name: "Implementation4",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Implementation4>;
    getContractAt(
      name: "SafeCastMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeCastMock>;
    getContractAt(
      name: "ERC20NoReturnMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20NoReturnMock>;
    getContractAt(
      name: "ERC20ReturnFalseMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20ReturnFalseMock>;
    getContractAt(
      name: "ERC20ReturnTrueMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20ReturnTrueMock>;
    getContractAt(
      name: "SafeERC20Wrapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeERC20Wrapper>;
    getContractAt(
      name: "SafeMathMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeMathMock>;
    getContractAt(
      name: "SignatureCheckerMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SignatureCheckerMock>;
    getContractAt(
      name: "SignedMathMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SignedMathMock>;
    getContractAt(
      name: "SignedSafeMathMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SignedSafeMathMock>;
    getContractAt(
      name: "MigratableMockV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MigratableMockV1>;
    getContractAt(
      name: "MigratableMockV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MigratableMockV2>;
    getContractAt(
      name: "MigratableMockV3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MigratableMockV3>;
    getContractAt(
      name: "StorageSlotMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StorageSlotMock>;
    getContractAt(
      name: "StringsMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StringsMock>;
    getContractAt(
      name: "TimersBlockNumberImpl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TimersBlockNumberImpl>;
    getContractAt(
      name: "TimersTimestampImpl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TimersTimestampImpl>;
    getContractAt(
      name: "UUPSUpgradeableLegacyMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UUPSUpgradeableLegacyMock>;
    getContractAt(
      name: "UUPSUpgradeableMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UUPSUpgradeableMock>;
    getContractAt(
      name: "UUPSUpgradeableUnsafeMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UUPSUpgradeableUnsafeMock>;
    getContractAt(
      name: "VotesMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VotesMock>;
    getContractAt(
      name: "MyGovernor1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MyGovernor1>;
    getContractAt(
      name: "MyGovernor2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MyGovernor2>;
    getContractAt(
      name: "MyGovernor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MyGovernor>;
    getContractAt(
      name: "BeaconProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BeaconProxy>;
    getContractAt(
      name: "IBeacon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeacon>;
    getContractAt(
      name: "UpgradeableBeacon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UpgradeableBeacon>;
    getContractAt(
      name: "ERC1967Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Proxy>;
    getContractAt(
      name: "ERC1967Upgrade",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Upgrade>;
    getContractAt(
      name: "Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "ProxyAdmin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProxyAdmin>;
    getContractAt(
      name: "TransparentUpgradeableProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TransparentUpgradeableProxy>;
    getContractAt(
      name: "UUPSUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UUPSUpgradeable>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "PullPayment",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PullPayment>;
    getContractAt(
      name: "ERC2981",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC2981>;
    getContractAt(
      name: "ERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155>;
    getContractAt(
      name: "ERC1155Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155Burnable>;
    getContractAt(
      name: "ERC1155Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155Pausable>;
    getContractAt(
      name: "ERC1155Supply",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155Supply>;
    getContractAt(
      name: "IERC1155MetadataURI",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155MetadataURI>;
    getContractAt(
      name: "IERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155>;
    getContractAt(
      name: "IERC1155Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Receiver>;
    getContractAt(
      name: "ERC1155PresetMinterPauser",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155PresetMinterPauser>;
    getContractAt(
      name: "ERC1155Holder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155Holder>;
    getContractAt(
      name: "ERC1155Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155Receiver>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Permit>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "ERC20Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: "ERC20Capped",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Capped>;
    getContractAt(
      name: "ERC20FlashMint",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20FlashMint>;
    getContractAt(
      name: "ERC20Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Pausable>;
    getContractAt(
      name: "ERC20Snapshot",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Snapshot>;
    getContractAt(
      name: "ERC20Votes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Votes>;
    getContractAt(
      name: "ERC20VotesComp",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20VotesComp>;
    getContractAt(
      name: "ERC20Wrapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Wrapper>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC20PresetFixedSupply",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20PresetFixedSupply>;
    getContractAt(
      name: "ERC20PresetMinterPauser",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20PresetMinterPauser>;
    getContractAt(
      name: "TokenTimelock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenTimelock>;
    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "ERC721Votes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Votes>;
    getContractAt(
      name: "ERC721Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Burnable>;
    getContractAt(
      name: "ERC721Enumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Enumerable>;
    getContractAt(
      name: "ERC721Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Pausable>;
    getContractAt(
      name: "ERC721Royalty",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Royalty>;
    getContractAt(
      name: "ERC721URIStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721URIStorage>;
    getContractAt(
      name: "IERC721Enumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Enumerable>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC721PresetMinterPauserAutoId",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721PresetMinterPauserAutoId>;
    getContractAt(
      name: "ERC721Holder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Holder>;
    getContractAt(
      name: "ERC777",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC777>;
    getContractAt(
      name: "IERC777",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC777>;
    getContractAt(
      name: "IERC777Recipient",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC777Recipient>;
    getContractAt(
      name: "IERC777Sender",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC777Sender>;
    getContractAt(
      name: "ERC777PresetFixedSupply",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC777PresetFixedSupply>;
    getContractAt(
      name: "ConditionalEscrow",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ConditionalEscrow>;
    getContractAt(
      name: "Escrow",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Escrow>;
    getContractAt(
      name: "RefundEscrow",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RefundEscrow>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "ERC165Storage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Storage>;
    getContractAt(
      name: "ERC1820Implementer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1820Implementer>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "IERC1820Implementer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1820Implementer>;
    getContractAt(
      name: "IERC1820Registry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1820Registry>;
    getContractAt(
      name: "Multicall",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Multicall>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
